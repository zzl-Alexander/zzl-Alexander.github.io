<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>PAC自定义规则</title>
    <url>/2021/01/30/PAC%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A7%84%E5%88%99/</url>
    <content><![CDATA[<h1 id="PAC自定义规则"><a href="#PAC自定义规则" class="headerlink" title="PAC自定义规则"></a>PAC自定义规则</h1><p>某些特定网站需要在全局模式下访问，来回切换很麻烦<br />在PAC文件中加入要访问的网站的url<br><a name="B6CaY"></a></p>
<h2 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h2><span id="more"></span>

<ul>
<li>通配符支持，如 <em>.example.com/</em> 实际书写时可省略 如 .example.com/ 意即 <code>*.example.com/*</code></li>
<li>正则表达式支持，以\开始和结束， 如 [\w]+://example.com<br />例外规则 @@，如 @@<em>.example.com/</em> 满足@@后规则的地址不使用代理</li>
<li>匹配地址开始和结尾 |，如 |<a href="http://example.com、example.com|/">http://example.com、example.com|</a> 分别表示以 <a href="http://example.com/">http://example.com</a> 开始和以 example.com 结束的地址</li>
<li>|| 标记，如 ||example.com 则 <a href="http://example.com/">http://example.com</a> 、<a href="https://example.com/">https://example.com</a> 、<a href="ftp://example.com/">ftp://example.com</a> 等地址均满足条件，只用于匹配地址开头</li>
<li>注释 ! 如 ! Comment</li>
<li>分隔符^，表示除了字母、数字或者 _ - . % 之外的任何字符。如 <a href="http://example.com^/">http://example.com^</a> ，<a href="http://example.com/">http://example.com/</a> 和<a href="http://example.com:8000/">http://example.com:8000/</a> 均满足条件，而 <a href="http://example.com.ar/">http://example.com.ar/</a> 不满足条件<br><a name="MxSse"></a><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2>在v2ray中的PAC中，在填写手动规则里填写<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i.stack.imgur.com</span><br><span class="line">|https://i.stack.imgur.com/</span><br></pre></td></tr></table></figure>
点击保存设置并从GFW List更新<br />浏览Pac文件 发现多了下面两行内容<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;i.stack.imgur.com&quot;</span>,</span><br><span class="line"><span class="string">&quot;|https:\/\/i.stack.imgur.com\/&quot;</span>,</span><br></pre></td></tr></table></figure></li>
</ul>
<p>如果不知道怎么写</p>
<p>直接把url的网址比较独特的一段粘贴来就行，因为支持通配符</p>
<p>比如下面的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.example.com</span><br></pre></td></tr></table></figure>

<p>就相当于匹配了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*.example.com*</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>科学上网</category>
      </categories>
      <tags>
        <tag>科学上网</tag>
      </tags>
  </entry>
  <entry>
    <title>Python--Matlibplot入门练习1</title>
    <url>/2021/01/30/Python--Matlibplot%E5%85%A5%E9%97%A8%E7%BB%83%E4%B9%A01/</url>
    <content><![CDATA[<h2 id="np-linspace"><a href="#np-linspace" class="headerlink" title="np.linspace()"></a>np.linspace()</h2><p>numpy.linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None)</p>
<h3 id="endpoint"><a href="#endpoint" class="headerlink" title="endpoint"></a>endpoint</h3><p>endpoint表示生成的数组是否包含stop</p>
<span id="more"></span>

<p>endpoint=True</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x&#x3D;np.linspace(1,100,num&#x3D;10,endpoint&#x3D;True)</span><br><span class="line">print(x)</span><br><span class="line">结果：[  1.  12.  23.  34.  45.  56.  67.  78.  89. 100.]</span><br></pre></td></tr></table></figure>

<p>endpoint=False</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x&#x3D;np.linspace(1,100,num&#x3D;10,endpoint&#x3D;False)</span><br><span class="line">print(x)</span><br><span class="line">结果：[ 1.  10.9 20.8 30.7 40.6 50.5 60.4 70.3 80.2 90.1]</span><br></pre></td></tr></table></figure>

<h3 id="retstep"><a href="#retstep" class="headerlink" title="retstep"></a>retstep</h3><p>相当于公差</p>
<p>retstep=True</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x&#x3D;np.linspace(1,100,num&#x3D;10,retstep&#x3D;True)</span><br><span class="line">print(x)</span><br><span class="line">结果：(array([  1.,  12.,  23.,  34.,  45.,  56.,  67.,  78.,  89., 100.]), 11.0)</span><br></pre></td></tr></table></figure>

<h3 id="dtype"><a href="#dtype" class="headerlink" title="dtype"></a>dtype</h3><p>结果的输出类型 有np.int   np.bool……..</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x&#x3D;np.linspace(1,100,num&#x3D;10,dtype&#x3D;np.int)</span><br><span class="line">print(x)</span><br><span class="line">结果：[  1  12  23  34  45  56  67  78  89 100]</span><br></pre></td></tr></table></figure>

<h2 id="plt-plot"><a href="#plt-plot" class="headerlink" title="plt.plot()"></a>plt.plot()</h2><p>plt.plot(x,y,format_string,**kwargs)</p>
<blockquote>
<p><strong>x</strong>:X轴上的数据，一般为列表或numpy中的数组，可选（只绘制一条曲线时，可省略，把y轴数据的索引值作为x取值）；</p>
<p><strong>y</strong>:Y轴上的数据，一般为列表或numpy中的数组；</p>
<p><strong>format_string</strong>:控制绘制曲线的格式字符串，可选；</p>
<p>*<strong>*kwargs</strong>:第二组或者更多的（x,y,format_string），可以绘制多条曲线，当我们绘制多条曲线时，各条曲线的x不能省略。</p>
</blockquote>
<h3 id="同时绘制多条曲线"><a href="#同时绘制多条曲线" class="headerlink" title="同时绘制多条曲线"></a>同时绘制多条曲线</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line">a &#x3D; np.arange(10)</span><br><span class="line">plt.plot(a,a*1.5,a,a*2.5,a,a*3.5,a,a**2)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zzl_Alexander/my-image/raw/master/img/Python--Matlibplot%E5%85%A5%E9%97%A8%E7%BB%83%E4%B9%A01A.png" alt="image.png"></p>
<h3 id="曲线格式"><a href="#曲线格式" class="headerlink" title="曲线格式"></a>曲线格式</h3><p>format_string控制绘制曲线的格式字符串，由颜色字符，风格字符，和标记字符组成。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fmt &#x3D; &#39;[marker][line][color]&#39;</span><br></pre></td></tr></table></figure>

<p>color:控制颜色，color = ‘g’;</p>
<p>linestyle:控制线条风格，linestyle = ‘dashed’;</p>
<p>marker:标记的风格，marker = ‘o’;</p>
<p>markerfacecolor:标记的颜色；</p>
<p>markersize;标记的大小;</p>
<p><strong>Markers</strong></p>
<table>
<thead>
<tr>
<th>character</th>
<th>description</th>
</tr>
</thead>
<tbody><tr>
<td><code>&#39;.&#39;</code></td>
<td>point marker</td>
</tr>
<tr>
<td><code>&#39;,&#39;</code></td>
<td>pixel marker</td>
</tr>
<tr>
<td><code>&#39;o&#39;</code></td>
<td>circle marker</td>
</tr>
<tr>
<td><code>&#39;v&#39;</code></td>
<td>triangle_down marker</td>
</tr>
<tr>
<td><code>&#39;^&#39;</code></td>
<td>triangle_up marker</td>
</tr>
<tr>
<td><code>&#39;&lt;&#39;</code></td>
<td>triangle_left marker</td>
</tr>
<tr>
<td><code>&#39;&gt;&#39;</code></td>
<td>triangle_right marker</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th><code>&#39;1&#39;</code></th>
<th>tri_down marker</th>
</tr>
</thead>
<tbody><tr>
<td><code>&#39;2&#39;</code></td>
<td>tri_up marker</td>
</tr>
<tr>
<td><code>&#39;3&#39;</code></td>
<td>tri_left marker</td>
</tr>
<tr>
<td><code>&#39;4&#39;</code></td>
<td>tri_right marker</td>
</tr>
<tr>
<td><code>&#39;s&#39;</code></td>
<td>square marker</td>
</tr>
<tr>
<td><code>&#39;p&#39;</code></td>
<td>pentagon marker</td>
</tr>
<tr>
<td><code>&#39;*&#39;</code></td>
<td>star marker</td>
</tr>
<tr>
<td><code>&#39;h&#39;</code></td>
<td>hexagon1 marker</td>
</tr>
<tr>
<td><code>&#39;H&#39;</code></td>
<td>hexagon2 marker</td>
</tr>
<tr>
<td><code>&#39;+&#39;</code></td>
<td>plus marker</td>
</tr>
<tr>
<td><code>&#39;x&#39;</code></td>
<td>x marker</td>
</tr>
<tr>
<td><code>&#39;D&#39;</code></td>
<td>diamond marker</td>
</tr>
<tr>
<td><code>&#39;d&#39;</code></td>
<td>thin_diamond marker</td>
</tr>
<tr>
<td>`’</td>
<td>‘`</td>
</tr>
<tr>
<td><code>&#39;_&#39;</code></td>
<td>hline marker</td>
</tr>
</tbody></table>
<p><strong>Line Styles</strong></p>
<table>
<thead>
<tr>
<th>character</th>
<th>description</th>
</tr>
</thead>
<tbody><tr>
<td><code>&#39;-&#39;</code></td>
<td>solid line style</td>
</tr>
<tr>
<td><code>&#39;--&#39;</code></td>
<td>dashed line style</td>
</tr>
<tr>
<td><code>&#39;-.&#39;</code></td>
<td>dash-dot line style</td>
</tr>
<tr>
<td><code>&#39;:&#39;</code></td>
<td>dotted line style</td>
</tr>
</tbody></table>
<p>**<br>**</p>
<p><strong>Colors</strong></p>
<table>
<thead>
<tr>
<th>character</th>
<th>color</th>
</tr>
</thead>
<tbody><tr>
<td><code>&#39;b&#39;</code></td>
<td>blue</td>
</tr>
<tr>
<td><code>&#39;g&#39;</code></td>
<td>green</td>
</tr>
<tr>
<td><code>&#39;r&#39;</code></td>
<td>red</td>
</tr>
<tr>
<td><code>&#39;c&#39;</code></td>
<td>cyan</td>
</tr>
<tr>
<td><code>&#39;m&#39;</code></td>
<td>magenta</td>
</tr>
<tr>
<td><code>&#39;y&#39;</code></td>
<td>yellow</td>
</tr>
<tr>
<td><code>&#39;k&#39;</code></td>
<td>black</td>
</tr>
<tr>
<td><code>&#39;w&#39;</code></td>
<td>white</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line">a &#x3D; np.arange(10)</span><br><span class="line">plt.plot(a,a*1.5,&#39;go-&#39;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zzl_Alexander/my-image/raw/master/img/Python--Matlibplot%E5%85%A5%E9%97%A8%E7%BB%83%E4%B9%A01B.png" alt="image.png"></p>
<h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line">a &#x3D; [1, 2, 3, 4] </span><br><span class="line">b &#x3D; [5, 6, 7, 8]</span><br><span class="line"></span><br><span class="line">plt.plot(a, b, &#39;r--&#39;, label &#x3D; &#39;aa&#39;)</span><br><span class="line">plt.xlabel(&#39;this is x&#39;)</span><br><span class="line">plt.ylabel(&#39;this is y&#39;)</span><br><span class="line">plt.title(&#39;this is a demo&#39;)</span><br><span class="line">plt.legend() # 将图例显示出来</span><br><span class="line"></span><br><span class="line">plt.plot()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zzl_Alexander/my-image/raw/master/img/Python--Matlibplot%E5%85%A5%E9%97%A8%E7%BB%83%E4%B9%A01C.png" alt="image.png"></p>
<h2 id="plt-scatter"><a href="#plt-scatter" class="headerlink" title="plt.scatter()"></a>plt.scatter()</h2><p>散点图</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line">a &#x3D; [1, 2, 3, 4]</span><br><span class="line">b &#x3D; [5, 6, 7, 8]</span><br><span class="line"></span><br><span class="line">plt.scatter(a, b, c&#x3D;&#39;r&#39;, marker&#x3D;&#39;v&#39;)</span><br><span class="line"></span><br><span class="line">plt.legend(&#39;x&#39;) # 将图例显示出来</span><br><span class="line"></span><br><span class="line">plt.plot()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zzl_Alexander/my-image/raw/master/img/Python--Matlibplot%E5%85%A5%E9%97%A8%E7%BB%83%E4%B9%A01D.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>数据处理</tag>
      </tags>
  </entry>
  <entry>
    <title>Python--Matlibplot入门练习2</title>
    <url>/2021/03/15/Python--Matlibplot%E5%85%A5%E9%97%A8%E7%BB%83%E4%B9%A02/</url>
    <content><![CDATA[<h2 id="figure"><a href="#figure" class="headerlink" title="figure"></a>figure</h2><p>plt.figure(figsize=(8,4))<br />定义图的大小<br><a name="z0q2G"></a></p>
<h2 id="plt-xlim-plt-ylim"><a href="#plt-xlim-plt-ylim" class="headerlink" title="plt.xlim() plt.ylim()"></a>plt.xlim() plt.ylim()</h2><p>限定轴的刻度，范围</p>
<span id="more"></span>

<iframe
  src="https://carbon.now.sh/embed?bg=rgba%281%2C1%2C1%2C1%29&t=seti&wt=sharp&l=auto&ds=true&dsyoff=20px&dsblur=96px&wc=true&wa=false&pv=0px&ph=0px&ln=true&fl=1&fm=Hack&fs=14px&lh=133%25&si=false&es=2x&wm=false&code=import%2520matplotlib.pyplot%2520as%2520plt%250A%250Aa%2520%253D%2520%255B1%252C%25202%252C%25203%252C%25204%255D%250Ab%2520%253D%2520%255B5%252C%25206%252C%25207%252C%25208%255D%250Aplt.figure%28figsize%253D%288%252C4%29%29%250Aplt.xlim%280%252C11%252C2%29%250Aplt.ylim%280%252C9%29%250Aplt.scatter%28a%252C%2520b%252C%2520c%253D%27r%27%252C%2520marker%253D%27v%27%29%250A%250Aplt.legend%28%27x%27%29%2520%2523%2520%25E5%25B0%2586%25E5%259B%25BE%25E4%25BE%258B%25E6%2598%25BE%25E7%25A4%25BA%25E5%2587%25BA%25E6%259D%25A5%250A%250Aplt.plot%28%29%250Aplt.show%28%29"
  style="width: 1280px; height: 308px; border:0; transform: scale(1); overflow:hidden;"
  sandbox="allow-scripts allow-same-origin">
</iframe>





<p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210315200140.png" alt="image"><br><a name="4KWR0"></a></p>
<h2 id="plt-subplot"><a href="#plt-subplot" class="headerlink" title="plt.subplot()"></a>plt.subplot()</h2><p>多张子图展示在一起<br />subplot(nrows, ncols, index, *<em>kwargs)<br />nrows表示一共有几行，ncols一共有几列，index表示这是第几个子图<br />例如ax1 = plt.subplot(2, 2, 1)  <br />表示该图放在2</em>2的第一个位置</p>
<iframe   src="https://carbon.now.sh/embed?bg=rgba%281%2C1%2C1%2C1%29&t=seti&wt=sharp&l=auto&ds=true&dsyoff=20px&dsblur=96px&wc=true&wa=false&pv=0px&ph=0px&ln=true&fl=1&fm=Hack&fs=14px&lh=133%25&si=false&es=2x&wm=false&code=import%2520matplotlib.pyplot%2520as%2520plt%250A%250A%2523%2520%25E9%25A6%2596%25E5%2585%2588%25E9%2580%259A%25E8%25BF%2587%2520np.linspace%2520%25E6%2596%25B9%25E5%25BC%258F%25E7%2594%259F%25E6%2588%2590%2520x%25EF%25BC%258C%250A%2523%2520%25E5%25AE%2583%25E5%258C%2585%25E5%2590%25AB%25E4%25BA%2586%252050%2520%25E4%25B8%25AA%25E5%2585%2583%25E7%25B4%25A0%25E7%259A%2584%25E6%2595%25B0%25E7%25BB%2584%25EF%25BC%258C%25E8%25BF%2599%2520100%2520%25E4%25B8%25AA%25E5%2585%2583%25E7%25B4%25A0%25E5%259D%2587%25E5%258C%2580%25E7%259A%2584%25E5%2588%2586%25E5%25B8%2583%25E5%259C%25A8%2520%255B0%252C%252050%255D%2520%25E7%259A%2584%25E5%258C%25BA%25E9%2597%25B4%25E4%25B8%258A%250Aimport%2520numpy%2520as%2520np%250A%250Ax%2520%253D%2520np.linspace%280%252C%252050%252C%2520100%29%250A%250A%250Aax1%2520%253D%2520plt.subplot%282%252C%25202%252C%25201%29%2520%250Aplt.plot%28x%252C%2520np.sin%28x%29%252C%2520%27r%27%29%250A%250Aax2%2520%253D%2520plt.subplot%282%252C%25202%252C%25202%252C%2520sharey%253Dax1%29%2520%2520%2523%2520%25E4%25B8%258E%2520ax1%2520%25E5%2585%25B1%25E4%25BA%25ABy%25E8%25BD%25B4%250Aplt.plot%28x%252C%25202%2520*%2520np.cos%28x%29%252C%2520%27g%27%29%250A%250Aax3%2520%253D%2520plt.subplot%282%252C%25202%252C%25203%29%250Aplt.plot%28x%252C%2520np.tan%28x%29%252C%2520%27b%27%29%250A%250Aax4%2520%253D%2520plt.subplot%282%252C%25202%252C%25204%252C%2520sharey%253Dax3%29%2520%2520%2523%2520%25E4%25B8%258E%2520ax3%2520%25E5%2585%25B1%25E4%25BA%25ABy%25E8%25BD%25B4%250Aplt.plot%28x%252C%25202%2520*%2520np.sin%28x%29%252C%2520%27y%27%29%250A%250A%250Aplt.show%28%29%250A%250A"   style="width: 1280px; height: 524px; border:0; transform: scale(1); overflow:hidden;"   sandbox="allow-scripts allow-same-origin"> </iframe>

<p><br /><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210315200200.png" alt="image (1)"><br /><br><br /><br><br /><br><br /></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>数据处理</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/10/01/hello-world/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="2c39beb0877a86453e756cda3d12ac275a39a9c9a03d50031207c0313c3bd01a">8857952509ef9895f61625fe2d594ef3c9251b16e75667b105d9b8e2f98fa4e0c494f99b3d7554ae30086249b805cde1fe829b34d38aa0681ad350aafa2c2da4c8681f4421e346dbc95e2e6923f9aeeaa7cb0ef799698a147bdd2547f87a667e80c4a457c4883e6a81c948b927aacdc8269abeb88afac5bbc909b14dfc1b0b17a2c72d6e20855b7f036ad637e406b96743a43a6c316871106e837e1bd6267befaadec082c11fd845ddf6c9c26eb5eafa6c71e5f7481fcd0821adeb5e5f7538c7d82b6357cc0a428a90dd2cb346d68f73fd55de4b0ead7d7488faddce0f62dd303df3ea0fe875c5fe284dc715cfa64ab1bdc4a9b449d0fcb4a5e41699583904cbb629413ee14378578d3540101f40ce6e93be912dfedf12723b663517027c0e1f677fa7cb6f67e581c42e8874d27ba96a40f6d9aeec6a527e368987493283f493372cf11342e3d2a4c530c6c3979e12f1c2761035d7ee2a597e6a60988d2d38cb5bb373a6c5c100e6663b683470d7681ff1493d477e1a31b20c08159bacf4406461a024726c9fab32fc0b423009a3942995804910e5a93cef058bc5229daa2c350fb0b30592da132e5c00058daa83114ce3684d937e25d7f9d888d54e7a6f3c76961e17f0156c335bb6e7e9fecc7e4fbaf7bea5c23849bca8d38e9edde3160d9a9e45711b8c450e653706eb619ef2f2a69baf67b88c51971c3a9c87afa86dff05d3dba36e4903b2e2543ac0b5d0260ea2528fdd4f09bb982f0f1c0b717a1c7a0f4a645918b35acdbf7b41e85a42df50ff7eb3b1f0e5d2e619a9dd351b44d0f942d7dc89823967c327536563c7fb8964fa4370488589da03106034c57a542f0b15acb9d597642bd15a20bb3c06a8c340cd583a7a850103f01d602540c7668db6e6e4cbb19893760fa5794a440a0c74043c2091d38480e702c52a65612054b381b4ba18867f34b4337c07d5df8cc17aa415f945521f0017c7db1a88d572d1d678514cd5008a25424b17271dd652a6e37468f5efe1dc718320d603baf7c0d969972a077a6edc19cd271cb4b5e3974f15e1b4381d3f1053bc978ec5728891d6fbedce553f45347a33d904d3d9ecffb633f5e5e32ec408f21c30a7d4d5ca85b21c383bd9d51dea3310bb284eba806a9dc49c19f03a0a4cf24034b487967c50f3d799355a81249b29586a51896bade3be3cdc5f6031249290f04e7fd05df804f7953c214dc15c1e71d3016b3848e74c06dae7f5e1e80eff053c31b8c2da32dfc03d70c3b37c761e92fc5ea4888536f66dba9f642a6cd7a417a7f147003e2705b6f29d7cb8d0acc7e3be94a05111c02cfd79b096e1e2072da27cab648aa9e6e2315af1e67b1d217e1199e0673b0b4c6a37421db26588ba7ab8f7119ec0ab421238122ca513dcf78898e2100ff3416cbddc2ba4238eaae43092d93131d3b7f409de2ea78ab32df9de9caefc53d0572b3e5806c65f1ffe661c8cd64bbf1c54e5f63dc1993bce73df41b20a1bee9f3575bc4646b5eb61433611e6dd0dd728f8a6c78caca55ce957bef323fd8ba47ebb3e19496c4870693100f4ce32ee06ff889de880b50d78c95710dc06d65c0d0a7717a91b43fb741ab16743ed17e1508fb12d722c242166e8d5f96a2cd0a4fcc5c65363faba256d2ec8f484b847b9be8b9aa37c85fc63f92bdb345a3b65ae86bc210d2ea06ee794aaed7baa505bbbbe190177b55289d235a95f47c8d1ebae4275686cf7bd7ae77ec657c965e0148b418e98ee542975e6e43d57c951fab08c79559daf6bd2354e0883aba987dcfe2e408ef332d2001db3740435a7c1fe9784db593da2cbeb1adceb9ee4404f7aeedfc0e0e817cb68aa03d30b264980ba76f845f10f4f1b314bbf4aea226a04bfb24fc33405b28feea57dc2fb0df9f6140f4d0ab246964203985935a560cda463f4369cdfbdc3beb4176457e98d6e26ed183c606d4a0f491d8c003a1ea10ad7ebf522fca18face13f629b9edff8cd94e2fb568a07919586eb2e246d54de8559057c4f82feaacf3eb82912c039d5fdfb9dfda3f28a48e664f2dc1511f3edcc688dff90755ee69e2ed7ecf26973914c855de3dabeef492c1d8c073ea0057cba0f2fb435df3ea97a000e3389383efde12ddbf126f76a4421f0cc49419844a2d3d7875e7c315ae18b8ea5c2a5406723d7a23500713d3cdc9dd63d5eb8107f5719e40045a29eb57814715a5f0fd0bd683bb2d980eeee67bb363f705c38852086d4588ba8b657575d1420f52975b128ba7b406cdeb5d6ef1e997f76c3f71c34516e3f0dd559767ba37d091aa9af7dd29c9b9577d0b49a8c999ae3eb726ad2305a9f7c5850ebfa5ef4778e1bdcb4903a9b61139f900144b080df3474afe3da646f8915422a2af8c50b218ec32952377bc73de50e07e904d242fee491f4e005abe19579bbe9a9c90d8c7b55c488014e3fa197c9e72c165d087537c8cfeb2d675843e532d5baa8162aaa3bc8818e54eff4aef1cb54c51abaf697c1e7f03880e8aab0075b121928ad3e593bfdd9997461f0898d9d7f23e6d890cf0a1f985ef40ce77bdd395cd91e67feab349bde5a943a7b707f8ee9a72911789d80abf5ab3aacfa618c6bf6fb240156e3df4d494ef7fa4e1dc6d55523359aeee1a70a5bcc1aefcd19f6c26d4c081e1396188c439c685b94e101173ef65d1803122cac071e431150a1d93f658ece2168610acea09cb125a3ef3fbfc6194a9ffeed57839b92305c77d585216c956e6b296052cab317b49f3dcb9ee5aba7af707e8556e3055f8cb36e70abc446cf28029c352baadcf1fa112600146c21c68927c1c5dc4b3b9f406974bc8eec88b413938fb67dd2ec6e80702b57c2eefbd9442ce98e80f13672d9e2e5f8ec6233cc86c46373de2eca42deb2b673fe109eb1f16d8e14b6e4e5a0029ea7a5e4a0bf6ed917a0e157ee765efb1846b447f8fcf81304aa1fc236bdac20a3a3fd939da8febae0aa4e3f27cc7d58b0265c27bf74749022ae5f6ac5c3c3fef8689c66c54bf54293e794ba382b5c3c9389b35264308163261e44328dc19a8bcde13d9088a6e722f9349a3a1ec362a8e4fa094e2ab9d5c0ad4ac2eda949fdeef072356bbf2a9a5e2627ee81f766896092a59406ff8504ac6baf72662cb9604222</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>blog上传文章</title>
    <url>/2021/03/12/%E5%86%99%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<iframe   src="https://carbon.now.sh/embed?bg=rgba%28212%2C223%2C223%2C1%29&t=seti&wt=sharp&l=auto&ds=true&dsyoff=20px&dsblur=96px&wc=true&wa=false&pv=0px&ph=0px&ln=false&fl=1&fm=Hack&fs=14px&lh=133%25&si=false&es=2x&wm=false&code=title%253A%2520%250Aauthor%253A%2520Alexander%250Adate%253A%2520%250Aupdated%253A%2520%250Atags%253A%2520%255B%252C%255D%250Acategories%253A%2520%250Adescription%253A%2520%250Acomments%253A%2520true%250Amath%253A%2520true%250A%250A%250A%250A%250A%253C%21--more--%253E"   style="width: 978px; height: 326px; border:0; transform: scale(1); overflow:hidden;"   sandbox="allow-scripts allow-same-origin"> </iframe>

]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>面向对象设计—动态建模</title>
    <url>/2021/03/12/%E5%8A%A8%E6%80%81%E5%BB%BA%E6%A8%A1/</url>
    <content><![CDATA[<h3 id="消息概述"><a href="#消息概述" class="headerlink" title="消息概述"></a>消息概述</h3><p>消息（Messages）: 从一个对象（发送者）向另一个或几个其他对象（接收者）发送信号，或由一个对象（发送者或调用者）调用另一个对象（接收者）的操作。</p>
<p>•消息定义的是对象之间某种形式的通信，它可以激发某个操作、唤起信号或导致目标对象的创建或撤销。</p>
<span id="more"></span>

<img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/%E6%B6%88%E6%81%AF%E6%A6%82%E8%BF%B0.png" alt="image-20210312163212533" style="zoom:33%;" />

<p>两种系统：<br>顺序系统中的消息（都是同步的）<br>并发系统中的消息:同步（阻断 ，限时），异步（不论是否准备好）</p>
<p>消息的接收者是否唯一<br>1）发消息定向发送给唯一的接受者，为<strong>定向消息</strong>，<br>2）把消息发送给某个范围内所有可能的接收者，为<strong>广播消息</strong></p>
<img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/%E6%B6%88%E6%81%AF%E7%AC%A6%E5%8F%B7%E8%A1%A8%E7%A4%BA.png" alt="image-20210312165153349" style="zoom:33%;" />

<h3 id="顺序图"><a href="#顺序图" class="headerlink" title="顺序图"></a>顺序图</h3><p>组成：</p>
<p>•活动者（actor）或者 对象（object）</p>
<p>•生命线（lifeline）</p>
<p>•激活(activation)/ 控制焦点（focus of control）</p>
<p>•消息（message）</p>
<p> <strong>顺序图用来描述对象间的交互行为。</strong>表现用例中的行为顺序，描述了如何一步步完成系统的某项功能</p>
<p>序列图将交互关系表示为一个二维图。其中，纵轴是时间轴，时间沿竖线向下延伸。横轴代表了在交互中各独立的对象。</p>
<img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%A1%A8%E7%A4%BA%E6%96%B9%E6%B3%95.png" alt="image-20210312165628621" style="zoom:33%;" />

<img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210312171501%E5%AF%B9%E8%B1%A1%E9%97%B4%E6%B6%88%E6%81%AF%E9%80%9A%E4%BF%A1.png" alt="image-20210312171500939" style="zoom:33%;" />

<p>复杂控制逻辑有活动图描述更清晰，但<strong>活动图不能表示消息</strong></p>
<h3 id="协作图"><a href="#协作图" class="headerlink" title="协作图"></a>协作图</h3><p>合作图可以用来描述系统<strong>对象之间的交互</strong>,表现对象协作关系的图，动态视图的另一种表现形式。强调这组<strong>对象之间的关系</strong>，强调发送和接受消息的对象之间的结构组织的交互图，显示对象、对象之间的链接以及对象之间的消息 。<br>  它表示了协作中作为各种类元角色的对象所处的位置，在图中主要显示了<strong>类元角色（Classifier Roles）和关联角色（Association Roles）。</strong></p>
<p>1 对象：系统中的对象可以参与一个或多个协作<br>2  链接：表示参与协作执行的<strong>关联</strong>的描述多重性、角色。<br><strong>当协作被实例化时，对象受限于类元角色，连接受限于关联角色</strong></p>
<h3 id="协作图与顺序图的区别与联系"><a href="#协作图与顺序图的区别与联系" class="headerlink" title="协作图与顺序图的区别与联系"></a>协作图与顺序图的区别与联系</h3><p>顺序图</p>
<img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210312195008%E9%A1%BA%E5%BA%8F%E5%9B%BE.png" alt="image-20210312195008385" style="zoom:33%;" />



<p>协作图</p>
<img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210312195032%E5%8D%8F%E4%BD%9C%E5%9B%BE.png" style="zoom:33%;" />]]></content>
      <categories>
        <category>系统分析与设计</category>
      </categories>
      <tags>
        <tag>面向对象的设计</tag>
        <tag>动态建模</tag>
      </tags>
  </entry>
  <entry>
    <title>测试使用</title>
    <url>/2020/07/30/%E5%9B%BE%E8%AE%BA/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>A</category>
      </categories>
      <tags>
        <tag>A</tag>
      </tags>
  </entry>
  <entry>
    <title>系统规划方法</title>
    <url>/2021/03/10/%E7%B3%BB%E7%BB%9F%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<h3 id="系统规划方法"><a href="#系统规划方法" class="headerlink" title="系统规划方法"></a>系统规划方法</h3><p>MIS：管理信息系统( Management Information System,简称MS)</p>
<h4 id="战略集合转换法（SST）"><a href="#战略集合转换法（SST）" class="headerlink" title="战略集合转换法（SST）"></a>战略集合转换法（SST）</h4><p>面向主题：决策信息</p>
<p>侧重范围：系统目标</p>
<span id="more"></span>

<p>战略目标看成信息集合</p>
<p>组织的战略目标转化为管理信息系统战略目标</p>
<p>步骤：</p>
<p>识别组织的战略集</p>
<ul>
<li>描绘出组织各类人员或实体结构</li>
<li>识别各类人员或实体结构的目标</li>
<li>对于各类人员或实体识别系统相应的使命</li>
</ul>
<p>将组织战略集转化为信息系统战略</p>
<ul>
<li>根据组织目标确定信息系统目标</li>
<li>对应组织战略集的元素识别相应信息系统战略的约束</li>
<li>根据信息系统目标和约束提出信息系统战略</li>
</ul>
<h4 id="关键成功因素法（CSF）"><a href="#关键成功因素法（CSF）" class="headerlink" title="关键成功因素法（CSF）"></a>关键成功因素法（CSF）</h4><p>面向主题：决策信息</p>
<p>侧重范围：系统总体结构、数据结构</p>
<p>通过分析找出使得企业成功 的关键因素，然后再围绕这些关键因素来确定系统的需求，并进行规划</p>
<p>步骤：</p>
<ul>
<li>了解企业或MIS的战略目标</li>
<li>识别所有的成功因素</li>
<li>确定关键成功因素</li>
<li>明确各关键成功因素的性能指标和评估标准</li>
</ul>
<p>识别目标 — 识别CSF — 识别性能指标 — 定义数据字典</p>
<h4 id="企业资源规划法（BSP）"><a href="#企业资源规划法（BSP）" class="headerlink" title="企业资源规划法（BSP）"></a>企业资源规划法（BSP）</h4><p>面向主题：底层数据</p>
<p>侧重范围：系统目标、系统总体结构、项目计划</p>
<p>为指导企业管理信息系统的开发而建立的规范方法，用于企业内部系统开发</p>
<p>先自上而下识别系统目标、识别企业的过程、识别数据，然后再自下而上的设计系统目标，最后把企业目标转化为信息系统规划的全过程</p>
<p>根据企业目标制定出MIS战略规划的结构化方法</p>
<p>BSP方法采用自上而下的分析和自下而上的实施策略</p>
<p>BSP是最早应用面向过程管理思想的方法</p>
<p>核心步骤：</p>
<p>定义企业目标 — 定义企业过程 — 业务过程重组 — 定义数据类 — 定义信息系统总体结构</p>
<p>企业活动一般由三个方面组成<br>（1）计划和控制<br>（2）产品和服务<br>（3）支持资源</p>
<p>定义业务过程</p>
<ol>
<li><p>识别计划和控制过程</p>
<p>企业计划和控制有关的业务过程一般分为战略规划和管理控制两大类</p>
</li>
<li><p>识别企业产品与服务业务过程</p>
<p>任何产品的生命周期，可分为需求、获取、服务、退出四阶段</p>
</li>
<li><p>识别企业支持资源业务过程</p>
</li>
<li><p>归纳与分析</p>
</li>
<li><p>结果与应用</p>
</li>
</ol>
<p>定义数据类</p>
<ul>
<li>实体法</li>
<li>功能法</li>
</ul>
<p>定义系统总体结构</p>
<p>划分子系统</p>
<p>过程/数据矩阵（U/C矩阵）</p>
<p>行代表数据类、列代表过程   字母U(use)和C(create)来表示过程对数据类的使用和产生。</p>
<p>U/C矩阵的主要功能</p>
<ol>
<li>通过U／C 矩阵的正确性检验，及时发现前段分析和调查工作的疏漏和错误；</li>
<li>通过U／C 矩阵的正确性检验，分析数据的正确性和完整性；</li>
<li>通过对U／C 矩阵的求解过程最终得到子系统的划分；</li>
<li>通过对子系统之间的联系（“U”）可以确定子系统间的共享数据</li>
</ol>
<p>可能的问题：<br>1 多功能生成同一数据类<br>2 数据类无C/U<br>3 C/U分布无规律</p>
<p>可能的解决途径：<br>1 功能合并或数据类分解</p>
<p>2 对功能进行核对</p>
<p>3 行、列的调序</p>
<p>正确性检验</p>
<p>完备性检验：每个数据类必须有一个产生者（C）和至少一个使用者（U），每个功能则必须有产生或使用（U或C）数据类型。</p>
<p>一致性检验：每个数据类型必有且仅有一个产生者（C）。</p>
<p>无冗余性检验：指 U／C矩阵中不允许有空行和空列。<br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/CDN/jpg/20210310184451.png" alt="image"></p>
]]></content>
      <categories>
        <category>系统分析与设计</category>
      </categories>
      <tags>
        <tag>系统规划</tag>
        <tag>规划方法</tag>
      </tags>
  </entry>
  <entry>
    <title>面向对象设计---静态建模</title>
    <url>/2021/03/12/%E9%9D%99%E6%80%81%E5%BB%BA%E6%A8%A1/</url>
    <content><![CDATA[<h4 id="类图建立"><a href="#类图建立" class="headerlink" title="类图建立"></a>类图建立</h4><ol>
<li>发现类</li>
<li>发现类的属性</li>
<li>发现类的操作</li>
<li>类之间的关系</li>
<li>调整类图结构<span id="more"></span>
<h4 id="类的分类"><a href="#类的分类" class="headerlink" title="类的分类"></a>类的分类</h4></li>
</ol>
<p>有形性：有形还是抽象</p>
<p>包含性：原子还是聚合</p>
<p>顺序性：并发还是顺序</p>
<p>持久性：短暂、临时、还是持久的</p>
<p>完整性：是易被外界影响，还是保护的</p>
<p>三个主要的类：</p>
<ul>
<li>边界类：系统及其参与者的边界</li>
<li>控制类：系统的控制逻辑</li>
<li>实体类：系统使用的信息</li>
</ul>
<h5 id="边界类"><a href="#边界类" class="headerlink" title="边界类"></a>边界类</h5><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/%E8%BE%B9%E7%95%8C%E7%B1%BB.png" alt="image-20210311215521409" style="zoom:33%;" />

<p>系统与参与者的边界，即信息或响应的事件</p>
<p>两类边界类</p>
<ul>
<li>用户边界类</li>
<li>系统和设备接口类</li>
</ul>
<p>识别边界类</p>
<p>每对参与者/用例定义一个边界类<br>不描述窗口组件等界面的组成元素。<br>若两个用例同时与一个参与者交互,可共用一个边界类</p>
<h5 id="控制类"><a href="#控制类" class="headerlink" title="控制类"></a>控制类</h5><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/%E6%8E%A7%E5%88%B6%E7%B1%BB.png" alt="image-20210311215650763" style="zoom:33%;" />

<p>控制类表示系统的控制逻辑</p>
<p>识别控制类</p>
<p>开发早期，为每个用例定义一个控制类，负责该用例的控制逻辑</p>
<p>针对复杂用例，可为备选路径分别定义不同控制类</p>
<p>随着分析的继续，一个复杂用例的控制类可以发展为多个</p>
<p>隔离和协调边界类和实体类。当用例复杂时(如有分支的事件流)，一个用例可以有控制类，本身不处理具体任务，而是调度其它类完成具体的任务。</p>
<p>当用例事件流逻辑结构简单，没必要用控制类，可用边界类实现用例的行为，如“登录”。 </p>
<h5 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h5><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/%E5%AE%9E%E4%BD%93%E7%B1%BB.png" alt="image-20210311215710974" style="zoom:33%;" />

<p>用例中参与对象，对应现实世界中的事物</p>
<p>实体类描述必须存储的信息及其相关行为</p>
<p>实体类的识别质量取决于文档的风格和质量</p>
<h4 id="类的属性"><a href="#类的属性" class="headerlink" title="类的属性"></a>类的属性</h4><p>类可有任意数目的属性，也可没属性。所有对象共享的属性是类属性，用下划线标识</p>
<p>尽可能将所有属性的可见性设置为private；<br>仅通过set方法更新属性；<br>仅通过get方法访问属性；</p>
<h4 id="类的操作"><a href="#类的操作" class="headerlink" title="类的操作"></a>类的操作</h4><p>一个类可有任意数量的操作或 没操作，且每个操作只应用于该类的对象。 </p>
<p>属性是描述类的对象特性的值，而操作用于操纵属性的值进行改变或执行其他动作。</p>
<p>操作有时 也叫  函数，方法。  </p>
<p>注:类操作:用下划线标识 </p>
<p>（1）寻找潜在的对象类操作<br>系统功能<br>问题域<br>对象状态<br>（2）筛选、确定操作<br>功能性<br>关联性<br>单一性<br>完整性</p>
<h4 id="类之间的关联"><a href="#类之间的关联" class="headerlink" title="类之间的关联"></a>类之间的关联</h4><p>（1）建立实例连接（对象间的静态联系）</p>
<p>​            对象之间的实例连接称为<strong>链接(Link)</strong></p>
<p>​            把类之间的实例连接称为<strong>关联(Association)</strong></p>
<p>（2）消息传递（动态）</p>
<p>​            对象之间的通信只能通过消息的传递和接收完成</p>
<p>（3）筛选对象间的关联</p>
<ul>
<li><p>原始性：删除衍生关联，即重复关联</p>
</li>
<li><p>单一性：删除多重关联关系</p>
</li>
<li><p>结构性：删除非结构的暂时性关系</p>
</li>
<li><p>相关性：删除与实际操作无关的关系</p>
</li>
</ul>
<p>关联（拥有， ASSOSATION，使用实例连接/单，双，自，弱）<br><strong>聚合（整体和部分关系，HAS A比关联 强，比组合 弱）</strong><br><strong>组合（整体和部分关系，合成关系， contains-a，部分不能离开整体）</strong></p>
<p>泛化（一般和特殊关系(区别），继承， GENERALIZATION ）<br>实现（拥有，类和接口的关系 Realization）<br>依赖（DEPENDENCY）</p>
<p>关联和聚合的区别：语义上，关联的两个对象之间一般是平等的<br>关联和泛化（类之间的语义关系）</p>
<img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/%E7%B1%BB%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E8%81%94%E7%AC%A6%E5%8F%B7.png" alt="image-20210311230746206" style="zoom: 33%;" />

<h4 id="关联"><a href="#关联" class="headerlink" title="关联"></a>关联</h4><p>程序中,关联常表示拥有对其他对象的引用的实例变量</p>
<p>==导航性==：若A指向B   则B为A的成员变量。 </p>
<ul>
<li>两个类之间有关联，其关联关系可以通过在自己类的属性和操作定义中将相关联的类作为对象成员使用而体现出来。</li>
</ul>
<ul>
<li>在操作定义中也体现了关联关系，将对象作为参数成员使用。</li>
</ul>
<ul>
<li>也可以通过发送消息调用相关联的类的操作。</li>
</ul>
<p>关联：单项关联，有约束的关联，限定关联，关联类</p>
<h5 id="单项关联："><a href="#单项关联：" class="headerlink" title="单项关联："></a>单项关联：</h5><ul>
<li>通过在自己类的属性和操作定义中将相关联的类作为对象成员使用而体现出来。</li>
<li>在操作定义中也体现了关联关系，将对象作为参数成员使用。</li>
<li>也可以通过发送消息调用相关联的类的操作。</li>
</ul>
<p>在系统中可能会存在一些类的属性对象类型为该类本身，这种特殊的关联关系称为<strong>自关联</strong>。例如：一个节点类(Node)的成员又是节点Node类型的对象</p>
<p><strong>多重性关联关系</strong>又称为重数性(Multiplicity)关联关系，表示两个关联对象在数量上的对应关系。在UML中，对象之间的多重性可以直接在关联直线上用一个数字或一个数字范围表示。</p>
<img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/%E5%A4%9A%E9%87%8D%E6%80%A7%E5%85%B3%E7%B3%BB.png" alt="image-20210311234025708" style="zoom:33%;" />

<h5 id="有约束的关联"><a href="#有约束的关联" class="headerlink" title="有约束的关联"></a>有约束的关联</h5><p>关联次序（对多关联的多端对象进行排序）</p>
<p>用继承表示有约束的关联</p>
<p>花括号表约束</p>
<h5 id="限定关联："><a href="#限定关联：" class="headerlink" title="限定关联："></a>限定关联：</h5><p>采用限定词把一对多关系简化成一对一关系</p>
<p>受限关联用于一对多或多对多的关联，一个小方块，内标限制内容，位于靠近受限制方的关联末端。</p>
<p>限制符号用来区分关联多端的对象集合，指明了在关联多端某个特殊对象受限制，利用限定词把一对多关系简化成了一对一关系，将多对多简化为多对一。</p>
<p>设计中的类图关联限定符用某种键值或者记号实现的，而不是用Java的引用实现的</p>
<h5 id="关联类："><a href="#关联类：" class="headerlink" title="关联类："></a>关联类：</h5><p><strong>任何时候有多对多的关联，应考虑是否需要一个关联类。</strong></p>
<p>OO语言不直接支持关联类,关联类变为具体类</p>
<p>一个关联类有两个多对一的关联，要创建一个关联类的实例，必须已经创建了它所关联的两个类的实例。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN//img/%E5%85%B3%E8%81%94%E7%B1%BB.png" alt="image-20210312001020791"></p>
<h5 id="多重（N元）关联："><a href="#多重（N元）关联：" class="headerlink" title="多重（N元）关联："></a>多重（N元）关联：</h5><p>解决多对多的关联是将其化简为二元关联</p>
<ul>
<li><p>用词组通过限定词方式 </p>
</li>
<li><p>建立链上的属性</p>
</li>
<li><p>增设具体的类</p>
</li>
</ul>
<h5 id="有子集的关联："><a href="#有子集的关联：" class="headerlink" title="有子集的关联："></a>有子集的关联：</h5><h5 id="关联的构造型："><a href="#关联的构造型：" class="headerlink" title="关联的构造型："></a>关联的构造型：</h5><p>丰富了表示法的含义，不改变结构，改变含义</p>
<p>《create》构造型表明源对象<strong>创建了目标对象</strong>,然后把它传递给系统其他部分</p>
<p>《local》构造型表明源类对象<strong>创建了目标类对象实例</strong>,并把这个实例包含在一个局部变量中。</p>
<h4 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h4><p>在聚合关系中，成员对象是整体对象的一部分，但是成员对象可以脱离整体对象独立存在。</p>
<h4 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h4><p>在组合关系中整体对象可以控制成员对象的生命周期，一旦整体对象不存在，成员对象也将不存在，成员对象与整体对象之间具有同生共死的关系。</p>
<h4 id="泛化"><a href="#泛化" class="headerlink" title="泛化"></a>泛化</h4><p>也就是继承关系，用于描述父类与子类之间的关系，父类又称作基类或超类，子类又称作派生类</p>
<h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><p>是一种使用关系，特定事物的改变有可能会影响到使用该事物的其他事物，在需要表示一个事物使用另一个事物时使用依赖关系。大多数情况下，依赖关系体现在某个类的方法使用另一个类的对象作为参数。</p>
<p>在系统实施阶段，依赖关系通常通过三种方式来实现：</p>
<p>1)第一种也是最常用的一种方式是将一个类的对象作为另一个类中方法的参数</p>
<p>2)第二种方式是在一个类的方法中将另一个类的对象作为其局部变量</p>
<p>3)第三种方式是在一个类的方法中调用另一个类的静态方法。</p>
<h4 id="接口与实现"><a href="#接口与实现" class="headerlink" title="接口与实现"></a>接口与实现</h4><p>在很多面向对象语言中都引入了接口的概念，在接口中，通常没有属性，而且所有的操作都是抽象的，只有操作的声明，没有操作的实现。</p>
<p>接口之间也可以有与类之间关系类似的继承关系和依赖关系，但是接口和类之间还存在一种实现(Realization)关系，在这种关系中，类实现了接口，类中的操作实现了接口中所声明的操作。</p>
<h4 id="类的结构和层次"><a href="#类的结构和层次" class="headerlink" title="类的结构和层次"></a>类的结构和层次</h4><ol>
<li><p>整体和部分结构</p>
</li>
<li><p>一般与特殊结构（分类关系、归纳关系、继承关系）</p>
<p>从特殊类发现一般类</p>
<p>通过增加属性简化一般-特殊结构</p>
<p>取消用途单一的一般类</p>
<img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/%E4%B8%80%E8%88%AC%E5%92%8C%E7%89%B9%E6%AE%8A.png" alt="image-20210312151126382" style="zoom: 33%;" />

<img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/%E4%B8%80%E8%88%AC%E7%89%B9%E6%AE%8A%E7%BB%93%E6%9E%84.png" alt="image-20210312151607041" style="zoom:33%;" />

<img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/%E5%8F%96%E6%B6%88%E7%94%A8%E9%80%94%E5%8D%95%E4%B8%80%E7%9A%84%E4%B8%80%E8%88%AC%E7%B1%BB.png" alt="image-20210312151707321" style="zoom:33%;" /></li>
<li><p>实例连接</p>
<ol>
<li>简单的实例连接<ol>
<li>一对多、多对多的实现</li>
<li>多对多的关联实现</li>
</ol>
<img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/%E5%A2%9E%E5%8A%A0%E4%B8%80%E4%B8%AA%E7%B1%BB.png" alt="image-20210312151909501" style="zoom:33%;" />

多对多变成一对多</li>
<li>复杂的实例连接<ol>
<li>采用复杂的实例连接</li>
<li>用对象表示其复杂性</li>
</ol>
</li>
<li>三元（N元）连接</li>
</ol>
</li>
</ol>
<h4 id="对象图"><a href="#对象图" class="headerlink" title="对象图"></a>对象图</h4><p>对象图中包含<strong>对象（Object）和链（Link）</strong>。其中对象是类的特定实例，链是类之间关系的实例，表示对象之间的特定关系。</p>
<p>可以被看作是类图在某一时刻的实例。类图的实例<br>对象图——描述系统在某个时刻的静态结构。</p>
<p>状态：对象的状态包括对象的所有属性和这些属性的当前值<br>行为：没有一个对象是孤立存在的，对象可以被操作，也可以操作别的对象，而行为就是一个对象根据它的状态改变和消息传送所采取的行动和所做出的反应 </p>
<table>
<thead>
<tr>
<th><strong>类图</strong></th>
<th><strong>对象图</strong></th>
</tr>
</thead>
<tbody><tr>
<td>类通常具有三个分栏：名称、属性和操作</td>
<td>对象通常只有两个分栏：名称和属性</td>
</tr>
<tr>
<td>在类的名称分栏中只有类名</td>
<td>对象名称形式为“对象名：类名”，匿名对象名称形式为“：类名”；有下划线</td>
</tr>
<tr>
<td>类中列出了操作</td>
<td>对象图中不包含操作，因为对于属于同一个类的对象而言，其操作是相同的</td>
</tr>
<tr>
<td>类使用关联连接，关联使用名称、角色、多重性以及约束等特征定义。</td>
<td>对象使用链连接，链拥有名称、角色，但是没有多重性。对象代表的是单独的实体，所有的链都是一对一的，因此不涉及到多重性</td>
</tr>
<tr>
<td>类的属性分栏定义了所有属性的特征</td>
<td>对象则只定义了属性的<strong>当前值</strong></td>
</tr>
</tbody></table>
<h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><p>特殊的抽象类</p>
<p>属性：无（定义属性但不能实现）</p>
<p>操作：抽象操作（只有操作名，没有具体实现）</p>
<p>接口常用来定义或限制软件构件的对外运算</p>
<p><strong>接口是在没有给出对象的实现和状态的情况下对对象行为的描述。接口是一种特殊的类，所有接口都是有构造型&lt;&lt; interface &gt;&gt;的类。在UML中，接口使用一个带有名称的小圆圈来进行表示，并且可以通过一条Realize（实现关系）线与实现它的类相连接。</strong></p>
<img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN//img/%E5%AE%9E%E7%8E%B0%E6%8E%A5%E5%8F%A3%E7%9A%84%E7%B1%BB%E5%9B%BE.png" alt="image-20210311201146189" style="zoom: 33%;" />

<p>箭头指向接口</p>
<p>接口是引用类型的，和抽象类的相似之处有三点：<br>不能实例化；<br>包含未实现的方法声明；<br>位于继承层次的上层<br>派生类必须实现未实现的方法，抽象类是抽象方法，接口是所有成员</p>
<h4 id="接口与抽象类的区别"><a href="#接口与抽象类的区别" class="headerlink" title="接口与抽象类的区别"></a>接口与抽象类的区别</h4><table>
<thead>
<tr>
<th></th>
<th><strong>接口</strong></th>
<th><strong>抽象类</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>概念</strong></td>
<td><strong>定义行为规范，子类是“行为需要按照接口来完成”如“叫”</strong>  <strong>是抽象类的变体，特殊的抽象类</strong></td>
<td>事物的高度聚合，子类对于抽象类是“是”的关系  不’完全’的类**,相当于是接口和具体类的一个中间层.即满足接口的抽象,也满足具体的实现**</td>
</tr>
<tr>
<td><strong>可定义的成员</strong></td>
<td><strong>方法（但不实现）、属性（不包括字段），索引，事件（不包含委托）</strong></td>
<td><strong>可有构造方法，成员变量（可以用不同的修饰符修饰）</strong></td>
</tr>
<tr>
<td><strong>不能包含的</strong></td>
<td>常数，字段，运算符，委托，内部类，析构函数，构造函数，静态成员**(C#)**  JAVA<strong>：变量（除</strong> public static final<strong>成员变量）</strong></td>
<td><strong>不能出现抽象构造函数，抽象静态方法</strong></td>
</tr>
<tr>
<td>抽象<strong>abstract方法</strong></td>
<td>全部（<strong>public权限）</strong></td>
<td><strong>部分。一个抽象类有一个或多个抽象方法</strong></td>
</tr>
<tr>
<td><strong>定义类型方法</strong></td>
<td><strong>不给</strong></td>
<td><strong>可以给出实现也可不给</strong></td>
</tr>
<tr>
<td></td>
<td><strong>一种行为规范</strong></td>
<td><strong>对  对象的抽象</strong></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th></th>
<th><strong>接口</strong></th>
<th><strong>抽象类</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>具体属性</strong></td>
<td><strong>无</strong></td>
<td><strong>可有</strong></td>
</tr>
<tr>
<td><strong>继承类对两者涉及方法的实现</strong></td>
<td><strong>与子类相似，除了该实现类不能从接口定义中继承行为</strong>    <strong>要给出相应的方法和属性实现（都要重写）</strong></td>
<td>对抽象类定义的方法可以不重写（非抽象方法，或是子类也为抽象类）  如果一个非抽象类是某个抽象类的子类，那么它必须重写父类的<strong>abstract方法，即在子类中将abstract方法重新声明，但必须去掉abstract修饰符。同时要保证声明的方法名字、返回类型、参数个数和接口中的方法完全相同</strong></td>
</tr>
<tr>
<td><strong>新增方法</strong></td>
<td><strong>修改继承类，提供新定义方法（一旦公布不应改变</strong></td>
<td><strong>继承类可不做任何处理（不会对子类影响）</strong></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th></th>
<th><strong>接口</strong></th>
<th><strong>抽象类</strong></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>一个类可以实现多个接口</td>
<td>一个类只能继承一个直接的父类，这个父类可能是抽象类</td>
</tr>
<tr>
<td></td>
<td>在抽象类没有可供继承的默认实现时，一般用接口代替该抽象类</td>
<td>定义一个类时不打算给他创建对象，只想作为基类，可将其声明为抽象类</td>
</tr>
<tr>
<td></td>
<td>根本不知道类的存在</td>
<td>子类—父类</td>
</tr>
<tr>
<td></td>
<td>如果行为跨越不同的类，可用接口</td>
<td>对相似类的对象—使用继承类</td>
</tr>
</tbody></table>
<p>接口的优势：</p>
<p>1 不只可以作用于引用类型还可以用于值类型，抽象类只能用于引用类型<br>2 通过接口实现多继承<br>3 可以被多个类型重用<br>4 减少暴露的属性和方法，保护类型对象</p>
<p>缺点：</p>
<p>定义的方法，属性只能相对于继承它的类型。多层继承关系很难。</p>
<h4 id="包图"><a href="#包图" class="headerlink" title="包图"></a>包图</h4><p>包拥有的元素：类、接口、组件、结点、协作（对象类之间的关联）、用例、图以及其他包。<br>一个模型元素不能被一个以上的包所拥有。<br>如果包被撤销，其中的元素也要被撤销。<br>一个包形成了一个命名空间。<br>每个包必须有一个与其他包相区别的名称。<br>两种形式：简单名和路径名。</p>
<p>可见性：包对自身所包含的内部元素的可见性也有定义，<strong>私有元素对包外部元素完全不可见</strong>；protected定义的被保护的元素只对那些与包含这些元素的包有<strong>泛化关系</strong>的包可见；public定义的公共元素对所有引入的包以及它们的后代都可见。</p>
<p>包嵌套的两种表示：<br>（1）内嵌式表示法<br>（2）树形层次结构表示法</p>
<p>包之间可以有<strong>依赖和继承</strong>等关系。</p>
<p>依赖：两个包中的==对象类==之间有依赖，则两个包有依赖；<br>在一个包中==引入==另一个包输出的元素<br>继承：包之间的继承关系描述了系统的接口。</p>
]]></content>
      <categories>
        <category>系统分析与设计</category>
      </categories>
      <tags>
        <tag>面向对象的设计</tag>
        <tag>静态建模</tag>
      </tags>
  </entry>
  <entry>
    <title>A01答疑总结</title>
    <url>/2021/03/18/A01%E7%AD%94%E7%96%91%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="e272aae7efda7835d83ca3e1dd3b8164ff727c4eb3a032aa18c5cf999034da43"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 内部资料需要密码，只允许我们看.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>Mac上使用VSCode编辑Latex+Skim跳转预览</title>
    <url>/2021/03/18/Mac%E4%B8%8A%E4%BD%BF%E7%94%A8VSCode%E7%BC%96%E8%BE%91Latex+Skim%E8%B7%B3%E8%BD%AC%E9%A2%84%E8%A7%88/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="57054eaab5aec90ff016b74580c15d1293880db314b675c79b253f3e1a8cc541">fa609df12acca9fd5a65b3cc320f972365657f851aefd155068797416e9e2762534e67a2ab0a0ca180cd7d6c320bcd590d1ec98a850d57bec49e9dd089004e6a2c2172ab83c3a615ff7b8d34ab16788d7ae4f6bae6d4b2bb69b25db6fa4204d9403fcdf7ee6e0690f22c8fe3e9b0603a13cf3f22a4682f66800879c3cea746b2febd3e9cc8883c522a46e929c02bf28126db4dece4c9ef5840389909aef07b766d43d00afbeb8d92011ec943450b9b43f546b39d346dd99eb3680588ecd2781c3e5c4f46d9c548a53f00ebfe9b171ad7f173b7f27598ecaa6a89c81008fbcd7e0fc73efbfcfc85b1dd1310a0b88286c5eb1ba0c03257dfa4a7b0e71c74ef3c16c9395322ef63d85a8cde686bf08594fc729c88fdc73ac186b28111a58573283831c689cc2cd9c8e73f5ee38ca7370a974b3bd302f49db7c89ee22120a4d299c9a575b5a5bee074eacb7950417f90972f0a8237f159c61f7dd311a95a724beaec5f4ad059fc1b74bf3bfde41c61a8aae5fae88b0ead1994ccc41e5822b9c718f53faf8d3cb4c2c490f18658d0070d77b97a34f7559277206b6d9ca1d3d65875ff5af3372b036e4794d8436c8961c16eb35bda9a1983596af81e78d8dfe8b6fe4e84d5425330f9c50c829be722b68bc08dacca09ceb0dedb31e2f60fda99e809901e6c997602f426d3d867559ab2eb4461795a8dc2f867cf46a19180d80894a0c8822006f464bd60decb4e01b9fce55c30e0a088cac162be5f3620da407924b7bb054a165d333eec8e5ea704502eb657ad</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 内部资料需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>论文</category>
        <category>Latex</category>
      </categories>
      <tags>
        <tag>Latex</tag>
        <tag>技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>给原来的hexo要装新的插件</title>
    <url>/2021/03/18/%E7%BB%99%E5%8E%9F%E6%9D%A5%E7%9A%84hexo%E8%A6%81%E8%A3%85%E6%96%B0%E7%9A%84%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<p>1.把原来的source克隆下来，在本地装好插件                                                                                                                  </p>
<p>2.然后传到新的仓库例如A11     </p>
<span id="more"></span>                                                                                                                                        

<p>3.需要给A11，添加秘钥（Repository secrets  HEXO_DEPLOY_PRI），秘钥存在blogSourceCodeFinal仓库的github-deploy-key文件里</p>
<p>4.还需修改A11里的.github/workflows/deploy.yml文件的第11行</p>
<p>5.然后修改A11里的themes/next/_config.yml文件的第300行</p>
<p>6.然后就完事了</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>设计原则</title>
    <url>/2021/03/23/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</url>
    <content><![CDATA[<p><a name="teaqH"></a></p>
<h3 id="总的原则"><a href="#总的原则" class="headerlink" title="总的原则"></a>总的原则</h3><p>抽象与复用<br />松耦合<br><a name="jYbyJ"></a></p>
<span id="more"></span>
<h3 id="1、单一设计原则"><a href="#1、单一设计原则" class="headerlink" title="1、单一设计原则"></a>1、单一设计原则</h3><p><a name="LZwGq"></a></p>
<h3 id="2、开闭原则（OCP）"><a href="#2、开闭原则（OCP）" class="headerlink" title="2、开闭原则（OCP）"></a>2、开闭原则（OCP）</h3><p>模块和函数应该对扩展开放，对修改封闭<br />通过扩展实现变化，而不是修改<br><a name="0ei0B"></a></p>
<h3 id="3、里氏代换原则（LSP）"><a href="#3、里氏代换原则（LSP）" class="headerlink" title="3、里氏代换原则（LSP）"></a>3、里氏代换原则（LSP）</h3><p>子类型必须能够替换掉它们的基类型<br />是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化<br /><br><br />LSP是多态顺利实现的保证，从而使OCP成为可能。<br />正是子类型的可替代性才使得使用基类的模块在无需修改的情况下就可以扩展。<br />增加或修改任何一个子类型，基类不用修改（封闭）<br />基类的使用者（客户程序）通过多态得到扩展或修改过的行为（开放）<br><a name="xxRN7"></a></p>
<h3 id="4、依赖倒置原则"><a href="#4、依赖倒置原则" class="headerlink" title="4、依赖倒置原则"></a>4、依赖倒置原则</h3><p>改掉过程化的高层依赖底层，变成细节依赖抽象。即针对接口编程，不针对实现编程。使用接口和抽象类对返回值和变量说明<br />设计时，尽量从抽象类继承，而不是从具体类继承。继承等级树的所有叶子节点应当是具体类，而所有的树枝节点应当是抽象类或者接口。</p>
<ul>
<li>可减少类间的耦合，提高系统的稳定性，减少并行开发引起的风险，提高代码的可读性和可维护性。</li>
<li>大型项目中体现明显。规避非技术性因素引起的问题。以轻松扩展</li>
<li>是几个设计原则中最难实现的。是实现开闭原则的重要途径</li>
</ul>
<p>A.高层模块不应该依赖于底层模块，二者都应该依赖于抽象（针对抽象编程）<br />B.抽象不应该依赖于细节，细节应该依赖于抽象</p>
<ul>
<li>高层使用低层的对象及其服务</li>
<li>设计抽象接口，上层类使用接口，下层类实现接口<br><a name="F7Sus"></a><h3 id="5、接口分离原则（ISP）"><a href="#5、接口分离原则（ISP）" class="headerlink" title="5、接口分离原则（ISP）"></a>5、接口分离原则（ISP）</h3>尽量提供小接口。简单设计会过大。因为每个客户程序并不依赖于接口里的很多<br><a name="xXjFd"></a><h3 id="6、多用组合少用继承"><a href="#6、多用组合少用继承" class="headerlink" title="6、多用组合少用继承"></a>6、多用组合少用继承</h3>希望类之间<strong>尽量是低耦合</strong>的关系，而不希望是强耦合关系<br />即在许多情况下需要避开继承的缺点，而需要组合的优点<br><a name="zH5XO"></a><h3 id="7、迪米特法则"><a href="#7、迪米特法则" class="headerlink" title="7、迪米特法则"></a>7、迪米特法则</h3>知识最少原则，不要和陌生人说话。熟人好办事<br />即 一个对象应该对其他对象有尽可能少的了解。即 <strong>两个类不必彼此直接通信</strong>。通过第三者调用对方的方法。</li>
</ul>
]]></content>
      <categories>
        <category>系统分析与设计</category>
      </categories>
      <tags>
        <tag>系统分析与设计</tag>
        <tag>设计原则</tag>
      </tags>
  </entry>
  <entry>
    <title>Ms</title>
    <url>/2021/03/24/Ms/</url>
    <content><![CDATA[<h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><h4 id="OSI的体系结构（7层）介绍每一层的作用"><a href="#OSI的体系结构（7层）介绍每一层的作用" class="headerlink" title="OSI的体系结构（7层）介绍每一层的作用"></a>OSI的体系结构（7层）介绍每一层的作用</h4><p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210324182703.png" alt="五层体系结构"></p>
<p><a href="https://snailclimb.gitee.io/javaguide-interview/#/./docs/c-1%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C?id=_311-osi%e4%b8%8etcpip%e5%90%84%e5%b1%82%e7%9a%84%e7%bb%93%e6%9e%84%e4%b8%8e%e5%8a%9f%e8%83%bd%e9%83%bd%e6%9c%89%e5%93%aa%e4%ba%9b%e5%8d%8f%e8%ae%ae">各层作用</a></p>
<span id="more"></span>
<p>1). 物理层</p>
<p>　　参考模型的最低层，也是OSI模型的第一层，实现了相邻计算机节点之间比特流的透明传送，并尽可能地屏蔽掉具体传输介质和物理设备的差异，使其上层(数据链路层)不必关心网络的具体传输介质。</p>
<p>2). 数据链路层（data link layer）</p>
<p>　　接收来自物理层的位流形式的数据，并封装成帧，传送到上一层；同样，也将来自上层的数据帧，拆装为位流形式的数据转发到物理层。这一层在物理层提供的比特流的基础上，通过差错控制、流量控制方法，使有差错的物理线路变为无差错的数据链路，即提供可靠的通过物理介质传输数据的方法。</p>
<p>3). 网络层</p>
<p>　　将网络地址翻译成对应的物理地址，并通过路由选择算法为分组通过通信子网选择最适当的路径。　　　　　　　　</p>
<p>4). 传输层（transport layer）</p>
<p>　　在源端与目的端之间提供可靠的透明数据传输，使上层服务用户不必关系通信子网的实现细节。在协议栈中，传输层位于网络层之上，传输层协议为不同主机上运行的进程提供逻辑通信，而网络层协议为不同主机提供逻辑通信，如下图所示。</p>
<p>　　实际上，网络层可以看作是传输层的一部分，其为传输层提供服务。但对于终端系统而言，网络层对它们而言是透明的，它们知道传输层的存在，也就是说，在逻辑上它们认为是传输层为它们提供了端对端的通信，这也是分层思想的妙处。</p>
<p>5). 会话层（Session Layer）</p>
<p>　　会话层是OSI模型的第五层，是用户应用程序和网络之间的接口，负责在网络中的两节点之间建立、维持和终止通信。</p>
<p>6). 表示层（Presentation Layer）：数据的编码，压缩和解压缩，数据的加密和解密</p>
<p>　　表示层是OSI模型的第六层，它对来自应用层的命令和数据进行解释，以确保一个系统的应用层所发送的信息可以被另一个系统的应用层读取。</p>
<p>7). 应用层（Application layer）：为用户的应用进程提供网络通信服务\</p>
<h4 id="Http和Https的区别"><a href="#Http和Https的区别" class="headerlink" title="Http和Https的区别"></a>Http和Https的区别</h4><p>Http协议运行在TCP之上，明文传输，客户端与服务器端都无法验证对方的身份；Https是身披SSL(Secure Socket Layer)外壳的Http，运行于SSL上，SSL运行于TCP之上，是添加了加密和认证机制的HTTP。二者之间存在如下不同：</p>
<p>端口不同：Http与Http使用不同的连接方式，用的端口也不一样，前者是80，后者是443；</p>
<p>资源消耗：和HTTP通信相比，Https通信会由于加减密处理消耗更多的CPU和内存资源；</p>
<p>开销：Https通信需要证书，而证书一般需要向认证机构购买；<br>　<br>Https的加密机制是一种共享密钥加密和公开密钥加密并用的混合加密机制。</p>
<h4 id="三次握手和四次握手"><a href="#三次握手和四次握手" class="headerlink" title="三次握手和四次握手"></a>三次握手和四次握手</h4><p><a href="https://snailclimb.gitee.io/javaguide-interview/#/./docs/c-1%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C?id=_312-tcp-%e4%b8%89%e6%ac%a1%e6%8f%a1%e6%89%8b%e5%92%8c%e5%9b%9b%e6%ac%a1%e6%8c%a5%e6%89%8b%e9%9d%a2%e8%af%95%e5%b8%b8%e5%ae%a2">包括为什么要这样</a></p>
<h4 id="TCP、UDP协议"><a href="#TCP、UDP协议" class="headerlink" title="TCP、UDP协议"></a>TCP、UDP协议</h4><p><a href="https://snailclimb.gitee.io/javaguide-interview/#/./docs/c-1%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C?id=_312-tcpudp-%e5%8d%8f%e8%ae%ae%e7%9a%84%e5%8c%ba%e5%88%ab">区别</a></p>
<p>TCP是面向连接的，UDP是无连接的；</p>
<p>TCP是可靠的，UDP是不可靠的；</p>
<p>TCP只支持点对点通信，UDP支持一对一、一对多、多对一、多对多的通信模式；</p>
<p>TCP是面向字节流的，UDP是面向报文的；</p>
<p>TCP有拥塞控制机制;UDP没有拥塞控制，适合媒体通信；</p>
<p>TCP首部开销(20个字节)比UDP的首部开销(8个字节)要大；</p>
<h4 id="TCP-协议如何保证可靠传输-（校验和、流量控制、拥塞控制、）"><a href="#TCP-协议如何保证可靠传输-（校验和、流量控制、拥塞控制、）" class="headerlink" title="TCP 协议如何保证可靠传输 （校验和、流量控制、拥塞控制、）"></a>TCP 协议如何保证可靠传输 （校验和、流量控制、拥塞控制、）</h4><p>TCP提供一种面向连接的、可靠的字节流服务。其中，面向连接意味着两个使用TCP的应用（通常是一个客户和一个服务器）在彼此交换数据之前必须先建立一个TCP连接。在一个TCP连接中，仅有两方进行彼此通信；而字节流服务意味着两个应用程序通过TCP链接交换8bit字节构成的字节流，TCP不在字节流中插入记录标识符。</p>
<p>对于可靠性，TCP通过以下方式进行保证：</p>
<p>数据包校验：目的是检测数据在传输过程中的任何变化，若校验出包有错，则丢弃报文段并且不给出响应，这时TCP发送数据端超时后会重发数据；</p>
<p>对失序数据包重排序：既然TCP报文段作为IP数据报来传输，而IP数据报的到达可能会失序，因此TCP报文段的到达也可能会失序。TCP将对失序数据进行重新排序，然后才交给应用层；</p>
<p>丢弃重复数据：对于重复数据，能够丢弃重复数据；</p>
<p>应答机制：当TCP收到发自TCP连接另一端的数据，它将发送一个确认。这个确认不是立即发送，通常将推迟几分之一秒；</p>
<p>超时重发：当TCP发出一个段后，它启动一个定时器，等待目的端确认收到这个报文段。如果不能及时收到一个确认，将重发这个报文段；</p>
<p>流量控制：TCP连接的每一方都有固定大小的缓冲空间。TCP的接收端只允许另一端发送接收端缓冲区所能接纳的数据，这可以防止较快主机致使较慢主机的缓冲区溢出，这就是流量控制。TCP使用的流量控制协议是可变大小的滑动窗口协议。</p>
<h4 id="url"><a href="#url" class="headerlink" title="url"></a>url</h4><p>域名解析——》TCP三次握手建立连接——》发起http请求——》服务端接受请求并作出响应——》浏览      器收到响应并解析html代码——》TCP四次挥手断开连接——》浏览器渲染页面呈现给用户</p>
<p><a href="https://snailclimb.gitee.io/javaguide-interview/#/./docs/c-1%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C?id=_317-%e5%9c%a8%e6%b5%8f%e8%a7%88%e5%99%a8%e4%b8%ad%e8%be%93%e5%85%a5url%e5%9c%b0%e5%9d%80-gtgt-%e6%98%be%e7%a4%ba%e4%b8%bb%e9%a1%b5%e7%9a%84%e8%bf%87%e7%a8%8b%e9%9d%a2%e8%af%95%e5%b8%b8%e5%ae%a2">详细过程及使用的协议</a></p>
<h4 id="get与post请求的区别，post的安全性体现在那里，是否可以发现他的请求内容"><a href="#get与post请求的区别，post的安全性体现在那里，是否可以发现他的请求内容" class="headerlink" title="get与post请求的区别，post的安全性体现在那里，是否可以发现他的请求内容"></a>get与post请求的区别，post的安全性体现在那里，是否可以发现他的请求内容</h4><p>区别</p>
<ol>
<li>GET把 参数包含在URL中，POST通过request body传递参数</li>
<li>GET请求会被 浏览器主动cache，而POST 不会，除非手动设置。</li>
<li>GET产生 一个TCP 数据包；POST产生 两个TCP数据包。</li>
<li>GET比POST更不安全，因为参数 直接暴露在URL上，所以不能用来传递敏感信息。</li>
<li>GET请求只能进行 url编码，而POST支持 多种编码方式。</li>
<li>GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。</li>
<li>GET产生的URL地址可以被 Bookmark，而POST不可以</li>
<li>GET在浏览器回退时是无害的，而POST会再次提交请求。</li>
<li>由于（主流） 浏览器的一些 限制，导致get请求所传输的数据长度和字符编码(ASCII)受到一些限制，但是post请求一般未对其进行限制，所以支持更多的编码和数据长度<br>post的安全性主要体现在上面的2，4，5，6点。可以通过抓包的形式获取到他的请求内容，不过，可能需要进行转码，解密。</li>
</ol>
<p>GET与POST是我们常用的两种HTTP Method，二者之间的区别主要包括如下五个方面：</p>
<p>(1). 从功能上讲，GET一般用来从服务器上获取资源，POST一般用来更新服务器上的资源；</p>
<p>(2). 从REST服务角度上说，GET是幂等的，即读取同一个资源，总是得到相同的数据，而POST不是幂等的，因为每次请求对资源的改变并不是相同的；进一步地，GET不会改变服务器上的资源，而POST会对服务器资源进行改变；</p>
<p>(3). 从请求参数形式上看，GET请求的数据会附在URL之后，即将请求数据放置在HTTP报文的 请求头 中，以?分割URL和传输数据，参数之间以&amp;相连。特别地，如果数据是英文字母/数字，原样发送；否则，会将其编码为 application/x-www-form-urlencoded MIME 字符串(如果是空格，转换为+，如果是中文/其他字符，则直接把字符串用BASE64加密，得出如：%E4%BD%A0%E5%A5%BD，其中％XX中的XX为该符号以16进制表示的ASCII)；而POST请求会把提交的数据则放置在是HTTP请求报文的 请求体 中。</p>
<p>(4). 就安全性而言，POST的安全性要比GET的安全性高，因为GET请求提交的数据将明文出现在URL上，而且POST请求参数则被包装到请求体中，相对更安全。</p>
<p>(5). 从请求的大小看，GET请求的长度受限于浏览器或服务器对URL长度的限制，允许发送的数据量比较小，而POST请求则是没有大小限制的。</p>
<h4 id="Session、Cookie-与-Application"><a href="#Session、Cookie-与-Application" class="headerlink" title="Session、Cookie 与 Application"></a>Session、Cookie 与 Application</h4><p>　　Cookie和Session都是客户端与服务器之间保持状态的解决方案，具体来说，cookie机制采用的是在客户端保持状态的方案，而session机制采用的是在服务器端保持状态的方案。</p>
<p>(1). Cookie及其相关API</p>
<p>　　Cookie实际上是一小段的文本信息。客户端请求服务器，如果服务器需要记录该用户状态，就使用response向客户端浏览器颁发一个Cookie，而客户端浏览器会把Cookie保存起来。当浏览器再请求该网站时，浏览器把请求的网址连同该Cookie一同提交给服务器，服务器检查该Cookie，以此来辨认用户状态。服务器还可以根据需要修改Cookie的内容。</p>
<p>(2). Session及其相关API</p>
<p>　　同样地，会话状态也可以保存在服务器端。客户端请求服务器，如果服务器记录该用户状态，就获取Session来保存状态，这时，如果服务器已经为此客户端创建过session，服务器就按照sessionid把这个session检索出来使用；如果客户端请求不包含sessionid，则为此客户端创建一个session并且生成一个与此session相关联的sessionid，并将这个sessionid在本次响应中返回给客户端保存。保存这个sessionid的方式可以采用 cookie机制 ，这样在交互过程中浏览器可以自动的按照规则把这个标识发挥给服务器；若浏览器禁用Cookie的话，可以通过 URL重写机制 将sessionid传回服务器。</p>
<p>(3). Session 与 Cookie 的对比</p>
<p>实现机制：Session的实现常常依赖于Cookie机制，通过Cookie机制回传SessionID；</p>
<p>大小限制：Cookie有大小限制并且浏览器对每个站点也有cookie的个数限制，Session没有大小限制，理论上只与服务器的内存大小有关；</p>
<p>安全性：Cookie存在安全隐患，通过拦截或本地文件找得到cookie后可以进行攻击，而Session由于保存在服务器端，相对更加安全；</p>
<p>服务器资源消耗：Session是保存在服务器端上会存在一段时间才会消失，如果session过多会增加服务器的压力。</p>
<p>Application（ServletContext）：与一个Web应用程序相对应，为应用程序提供了一个全局的状态，所有客户都可以使用该状态。</p>
<p>(4). Application</p>
<p>　　Application（Java Web中的ServletContext）：与一个Web应用程序相对应，为应用程序提供了一个全局的状态，所有客户都可以使用该状态。</p>
<h4 id="常见状态码及原因短语"><a href="#常见状态码及原因短语" class="headerlink" title="常见状态码及原因短语"></a>常见状态码及原因短语</h4><p>　　HTTP请求结构： 请求方式 + 请求URI + 协议及其版本<br>　　HTTP响应结构： 状态码 + 原因短语 + 协议及其版本</p>
<p>1×× : 请求处理中，请求已被接受，正在处理<br>2×× : 请求成功，请求被成功处理</p>
<p>200 OK</p>
<p>3×× : 重定向，要完成请求必须进行进一步处理<br>301 : 永久性转移<br>302 ：暂时性转移<br>304 ： 已缓存</p>
<p>4×× : 客户端错误，请求不合法<br>400：Bad Request,请求有语法问题<br>403：拒绝请求<br>404：客户端所访问的页面不存在</p>
<p>5×× : 服务器端错误，服务器不能处理合法请求<br>500 ：服务器内部错误<br>503 ： 服务不可用，稍等</p>
<h3 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h3><p><a href="https://www.cnblogs.com/onepixel/p/7674659.html">九种排序</a></p>
<h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><h4 id="数据库事务ACID"><a href="#数据库事务ACID" class="headerlink" title="数据库事务ACID"></a>数据库事务ACID</h4><p>事务是一个不可分割的数据库操作序列，也是数据库并发控制的基本单位，其执行的结果必须使数据库从一种一致性状态变到另一种一致性状态。</p>
<p>ACID，是指数据库管理系统（DBMS）在写入或更新资料的过程中，为保证事务（transaction）是正确可靠的，所必须具备的四个特性：原子性（atomicity，或称不可分割性）、一致性（consistency）、隔离性（isolation，又称独立性）、持久性（durability）。</p>
<p>Atomicity（原子性）：一个事务（transaction）中的所有操作，或者全部完成，或者全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。即，事务不可分割、不可约简。<br>Consistency（一致性）：在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设约束、触发器、级联回滚等。<br>Isolation（隔离性）：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括未提交读（Read uncommitted）、提交读（read committed）、可重复读（repeatable read）和串行化（Serializable）。<br>Durability（持久性）：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</p>
<h4 id="数据库锁的分类（乐观锁、悲观锁，s锁，x锁，死锁，如何解决死锁）"><a href="#数据库锁的分类（乐观锁、悲观锁，s锁，x锁，死锁，如何解决死锁）" class="headerlink" title="数据库锁的分类（乐观锁、悲观锁，s锁，x锁，死锁，如何解决死锁）"></a>数据库锁的分类（乐观锁、悲观锁，s锁，x锁，死锁，如何解决死锁）</h4><p><a href="https://blog.csdn.net/weixin_39651041/article/details/79985715">链接</a></p>
<h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><p><a href="https://blog.csdn.net/justloveyou_/article/details/78308460">参考</a></p>
<p>索引分为聚簇索引和非聚簇索引两种;</p>
<p>聚簇索引 是按照数据存放的物理位置为顺序的，而非聚簇索引就不一样了；聚簇索引能提高多行检索的速度，而非聚簇索引对于单行的检索很快。</p>
<h5 id="索引的概念"><a href="#索引的概念" class="headerlink" title="索引的概念"></a>索引的概念</h5><p><strong>索引是对数据库表中一个或多个列的值进行排序的数据结构，以协助快速查询、更新数据库表中数据。</strong>索引的实现通常使用B_TREE及其变种。索引加速了数据访问，因为存储引擎不会再去扫描整张表得到需要的数据；相反，它从根节点开始，根节点保存了子节点的指针，存储引擎会根据指针快速寻找数据。</p>
<p>在数据结构中，我们最为常见的搜索结构就是二叉搜索树和AVL树(高度平衡的二叉搜索树，为了提高二叉搜索树的效率，减少树的平均搜索长度)了。然而，无论二叉搜索树还是AVL树，当数据量比较大时，都会由于树的深度过大而造成I/O读写过于频繁，进而导致查询效率低下，因此对于索引而言，多叉树结构成为不二选择。特别地，B-Tree的各种操作能使B树保持较低的高度，从而保证高效的查找效率。</p>
<h5 id="索引的分类"><a href="#索引的分类" class="headerlink" title="索引的分类"></a>索引的分类</h5><p>普通索引和唯一性索引：索引列的值的唯一性</p>
<p>单个索引和复合索引：索引列所包含的列数</p>
<p>聚簇索引与非聚簇索引：聚簇索引按照数据的物理存储进行划分的。对于一堆记录来说，使用聚集索引就是对这堆记录进行堆划分，即主要描述的是物理上的存储。正是因为这种划分方法，导致聚簇索引必须是唯一的。聚集索引可以帮助把很大的范围，迅速减小范围。但是查找该记录，就要从这个小范围中Scan了；而非聚集索引是把一个很大的范围，转换成一个小的地图，然后你需要在这个小地图中找你要寻找的信息的位置，最后通过这个位置，再去找你所需要的记录。</p>
<h5 id="主键、自增主键、主键索引与唯一索引概念区别"><a href="#主键、自增主键、主键索引与唯一索引概念区别" class="headerlink" title="主键、自增主键、主键索引与唯一索引概念区别"></a>主键、自增主键、主键索引与唯一索引概念区别</h5><p>主键：指字段 唯一、不为空值 的列；</p>
<p>主键索引：指的就是主键，主键是索引的一种，是唯一索引的特殊类型。创建主键的时候，数据库默认会为主键创建一个唯一索引；</p>
<p>自增主键：字段类型为数字、自增、并且是主键；</p>
<p>唯一索引：索引列的值必须唯一，但允许有空值。主键是唯一索引，这样说没错；但反过来说，唯一索引也是主键就错误了，因为唯一索引允许空值，主键不允许有空值，所以不能说唯一索引也是主键。</p>
<h5 id="主键就是聚集索引吗？主键和索引有什么区别？"><a href="#主键就是聚集索引吗？主键和索引有什么区别？" class="headerlink" title="主键就是聚集索引吗？主键和索引有什么区别？"></a>主键就是聚集索引吗？主键和索引有什么区别？</h5><p>主键是一种特殊的唯一性索引，其可以是聚集索引，也可以是非聚集索引。在SQLServer中，主键的创建必须依赖于索引，默认创建的是聚集索引，但也可以显式指定为非聚集索引。InnoDB作为MySQL存储引擎时，默认按照主键进行聚集，如果没有定义主键，InnoDB会试着使用唯一的非空索引来代替。如果没有这种索引，InnoDB就会定义隐藏的主键然后在上面进行聚集。所以，对于聚集索引来说，你创建主键的时候，自动就创建了主键的聚集索引。</p>
<h5 id="B-Tree-平衡多路查找树"><a href="#B-Tree-平衡多路查找树" class="headerlink" title="B-Tree(平衡多路查找树)"></a>B-Tree(平衡多路查找树)</h5><p>B_TREE是一种平衡多路查找树，是一种动态查找效率很高的树形结构。B_TREE中所有结点的孩子结点的最大值称为B_TREE的阶，B_TREE的阶通常用m表示，简称为m叉树。一般来说，应该是m&gt;=3。一颗m阶的B_TREE或是一颗空树，或者是满足下列条件的m叉树：</p>
<p>树中每个结点最多有m个孩子结点；</p>
<p>若根结点不是叶子节点，则根结点至少有2个孩子结点；</p>
<p>除根结点外，其它结点至少有(m/2的上界)个孩子结点；</p>
<p>结点的结构如下图所示，其中，n为结点中关键字个数，(m/2的上界)-1 &lt;= n &lt;= m-1；di(1&lt;=i&lt;=n)为该结点的n个关键字值的第i个，且di&lt; d(i+1)；ci(0&lt;=i&lt;=n)为该结点孩子结点的指针，且ci所指向的节点的关键字均大于或等于di且小于d(i+1)；</p>
<p>所有的叶结点都在同一层上，并且不带信息（可以看作是外部结点或查找失败的结点，实际上这些结点不存在，指向这些结点的指针为空）。</p>
<h5 id="B-Tree-：-InnoDB存储引擎的索引实现"><a href="#B-Tree-：-InnoDB存储引擎的索引实现" class="headerlink" title="B+Tree ： InnoDB存储引擎的索引实现"></a>B+Tree ： InnoDB存储引擎的索引实现</h5><p>B+Tree是应文件系统所需而产生的一种B_TREE树的变形树。一棵m阶的B+树和m阶的B_TREE的差异在于以下三点：</p>
<p>n 棵子树的结点中含有n个关键码；</p>
<p>所有的叶子结点中包含了全部关键码的信息，及指向含有这些关键码记录的指针，且叶子结点本身依关键码的大小自小而大的顺序链接；</p>
<p>非终端结点可以看成是索引部分，结点中仅含有其子树根结点中最大（或最小）关键码。</p>
<h5 id="为什么说B-tree比B-树更适合实际应用中操作系统的文件索引和数据库索引？"><a href="#为什么说B-tree比B-树更适合实际应用中操作系统的文件索引和数据库索引？" class="headerlink" title="为什么说B+-tree比B 树更适合实际应用中操作系统的文件索引和数据库索引？"></a>为什么说B+-tree比B 树更适合实际应用中操作系统的文件索引和数据库索引？</h5><p>B+tree的磁盘读写代价更低：B+tree的内部结点并没有指向关键字具体信息的指针(红色部分)，因此其内部结点相对B 树更小。如果把所有同一内部结点的关键字存放在同一盘块中，那么盘块所能容纳的关键字数量也越多。一次性读入内存中的需要查找的关键字也就越多，相对来说IO读写次数也就降低了；</p>
<p>B+tree的查询效率更加稳定：由于内部结点并不是最终指向文件内容的结点，而只是叶子结点中关键字的索引，所以，任何关键字的查找必须走一条从根结点到叶子结点的路。所有关键字查询的路径长度相同，导致每一个数据的查询效率相当；</p>
<p>数据库索引采用B+树而不是B树的<strong>主要原因</strong>：B+树只要遍历叶子节点就可以实现整棵树的遍历，而且在数据库中基于范围的查询是非常频繁的，而B树只能中序遍历所有节点，效率太低。</p>
<h5 id="文件索引和数据库索引为什么使用B-树"><a href="#文件索引和数据库索引为什么使用B-树" class="headerlink" title="文件索引和数据库索引为什么使用B+树?"></a>文件索引和数据库索引为什么使用B+树?</h5><p>　　文件与数据库都是需要较大的存储，也就是说，它们都不可能全部存储在内存中，故需要存储到磁盘上。而所谓索引，则为了数据的快速定位与查找，那么索引的结构组织要尽量减少查找过程中磁盘I/O的存取次数，因此B+树相比B树更为合适。数据库系统巧妙利用了局部性原理与磁盘预读原理，将一个节点的大小设为等于一个页，这样每个节点只需要一次I/O就可以完全载入，而红黑树这种结构，高度明显要深的多，并且由于逻辑上很近的节点(父子)物理上可能很远，无法利用局部性。最重要的是，B+树还有一个最大的好处：方便扫库。B树必须用中序遍历的方法按序扫库，而B+树直接从叶子结点挨个扫一遍就完了，B+树支持range-query非常方便，而B树不支持，这是数据库选用B+树的最主要原因。</p>
<h5 id="索引的优点"><a href="#索引的优点" class="headerlink" title="索引的优点"></a>索引的优点</h5><p>大大加快数据的检索速度，这也是创建索引的最主要的原因；</p>
<p>加速表和表之间的连接；</p>
<p>在使用分组和排序子句进行数据检索时，同样可以显著减少查询中分组和排序的时间；</p>
<p>通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性；</p>
<h5 id="什么样的字段适合创建索引？"><a href="#什么样的字段适合创建索引？" class="headerlink" title="什么样的字段适合创建索引？"></a>什么样的字段适合创建索引？</h5><ul>
<li>经常作查询选择的字段</li>
<li>经常作表连接的字段</li>
<li>经常出现在order by, group by, distinct 后面的字段</li>
</ul>
<h5 id="索引的缺点"><a href="#索引的缺点" class="headerlink" title="索引的缺点"></a>索引的缺点</h5><ul>
<li>时间方面：创建索引和维护索引要耗费时间，具体地，当对表中的数据进行增加、删除和修改的时候，索引也要动态的维护，这样就降低了数据的维护速度；</li>
<li>空间方面：索引需要占物理空间。</li>
</ul>
<h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><h4 id="java锁机制"><a href="#java锁机制" class="headerlink" title="java锁机制"></a>java锁机制</h4><p><a href="https://blog.csdn.net/qq_35181209/article/details/77652278">点击</a></p>
<p><a href="https://blog.csdn.net/justloveyou_/article/details/78303617">参考1</a></p>
]]></content>
  </entry>
</search>
