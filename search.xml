<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>算法刷题笔记</title>
    <url>/2021/03/23/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="点击进入"><a href="#点击进入" class="headerlink" title="点击进入"></a><a href="https://zzl-alexander.github.io/algorithm/">点击进入</a></h1>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>黑盒测试与测试用例设计</title>
    <url>/2021/06/11/%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E4%BF%9D%E8%AF%81%E4%B8%8E%E6%B5%8B%E8%AF%95/%E7%AC%AC3%E7%AB%A0/</url>
    <content><![CDATA[<p>测试用例现在没有标准的定义，比较常见的说法是：<strong>为某个特殊目标而编制的一组测试输入、执行条件以及预期结果，以便测试某个程序路径或核实是否满足某个特定需求。</strong>测试用例将软件测试的行为活动做了一个科学化的组织归纳，以便能够把软件测试的行为<strong>转化为可管理</strong>的模式。同时，测试用例也是将测试具体量化的方法之一；对于不同类别的软件，测试用例也是不同的。</p>
<span id="more"></span>
<p>对于一个测试过程来说，测试用例起到了<strong>很重要的作用</strong>，它构成了设计和制定测试过程的基础。而从某种角度来说，测试的“深度”与测试用例的数量成比例，判断测试是否完全的一个主要评测方法是基于需求的覆盖。</p>
<h1 id="测试用例设计概述"><a href="#测试用例设计概述" class="headerlink" title="测试用例设计概述"></a>测试用例设计概述</h1><h2 id="影响软件测试要素（过程、对象）"><a href="#影响软件测试要素（过程、对象）" class="headerlink" title="影响软件测试要素（过程、对象）"></a>影响软件测试要素（过程、对象）</h2><p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210611090425.png" alt="20210611090425"><br>软件工程的总目标是充分利用<strong>有限的人力和物力资源，高效率、高质量地完成测试</strong>。为了降低测试成本，选择测试用例时应注意遵守“经济性”的原则。<br>    第一，要根据程序的重要性和一旦发生故障将造成的损失来确定它的测试等级；<br>    第二，要认真研究测试策略，以便能使用尽可能少的测试集（数据），发现尽可能多的程序错误。<br>“不充分的测试是愚蠢的，而过度的测试是一种罪孽”。测试不足意味着让用户承担隐藏错误带来的危险，过度测试则会浪费许多宝贵的资源。</p>
<h2 id="什么是测试用例"><a href="#什么是测试用例" class="headerlink" title="什么是测试用例"></a>什么是测试用例</h2><p>测试用例，英文TestCase，缩写TC，指的是在测试执行之前设计的一套<strong>详细的测试方案，包括测试环境、测试步骤、测试数据和预期的结果。</strong><br>是对一项特定的<strong>软件产品进行测试任务的描述</strong>，体现<strong>测试方案、方法、技术和策略</strong>。为特定的目的而设计的一组测试输入、执行条件和预期的结果。测试用例是执行的<strong>最小实体</strong>。<br>简单讲，就是一个文档，描述输入、动作、或者时间和一个期望的结果，其目的是确定应用程序的某个特性是否正常的工作。 测试用例设计的好坏直接决定了测试的效果和结果，所以说在软件测试活动中最关键的步骤就是<strong>设计有效的测试用例</strong>。</p>
<h2 id="测试用例的作用"><a href="#测试用例的作用" class="headerlink" title="测试用例的作用"></a>测试用例的作用</h2><p>通过软件用例测试可以将软件测试的行为转换为<strong>可管理的、具体量化</strong>的模式，使得软件测试是<strong>有组织性、步骤性和计划性</strong>的。<br>（1）根据测试用例的多少和执行难度，<strong>估算测试工作量</strong>，便于测试项目的时间和资源管理与跟踪，避免盲目测试，从而提高测试效率；<br>（2）减少回归测试的<strong>复杂程度</strong>；<br>（3）在软件版本更新后只需修正少量的测试用例便可展开测试工作，降低<strong>工作强度、缩短项目周期</strong>；<br>（4）根据测试用例的操作步骤和执行结果，可以方便地书写<strong>软件测试缺陷报告</strong>；<br>（5）可以根据测试用例的执行等级，实施<strong>不同级别的测试</strong>。</p>
<h2 id="什么是好的测试用例（特征）？"><a href="#什么是好的测试用例（特征）？" class="headerlink" title="什么是好的测试用例（特征）？"></a>什么是好的测试用例（特征）？</h2><p>（1）可以最大程度地找出软件隐藏的缺陷。<br>（2）可以最高效率的找找出软件缺陷。<br>（3）可以最大程度的满足覆盖要求。<br>（4）即不过分复杂、也不能过分简单.<br>（5）使软件缺陷的表现可以清楚的判定：</p>
<ul>
<li>测试用例包含期望的正确的结果。</li>
<li>待查的输出的结果或文件必须尽量简单明了，不包含重复的测试用例；</li>
</ul>
<p>（6）不包含重复的测试用例。<br>（7）测试用例内容清新、格式一致、分类组织。</p>
<h2 id="软件测用例试的特性"><a href="#软件测用例试的特性" class="headerlink" title="软件测用例试的特性"></a>软件测用例试的特性</h2><ul>
<li>有效性：测试用例是测试人员测试过程中的重要参考依据，不同的测试人员根据</li>
<li>相同的测试用例所得到的输出应该是一致的。</li>
<li>有代表性：能够代表并覆盖各种合理的不合理的、合法的和不合法的、边界的和</li>
<li>越界的以及极限输入数据、操作等。</li>
<li>可复用性：良好的测试用例具有重复使用的功能，这样就可以大大地节约测试的时间，提高测试的效率。</li>
<li>易组织性：测试用例可能有成千上万个，有效地组织这些测试用例，分门别类地提供给测试人员参考和使用，才是一个好的测试计划。</li>
<li>可评估性：从测试管理的角度，测试用例的通过率和软件缺陷的数目是软件产品质量好坏的测试标准。</li>
<li>可管理性：测试用例可以作为检验测试人员进度、工作量以及跟踪/管理测试人员工作效率的因素。</li>
</ul>
<h2 id="影响软件测试用例要素"><a href="#影响软件测试用例要素" class="headerlink" title="影响软件测试用例要素"></a>影响软件测试用例要素</h2><p>1.需求目标，是功能性的需求目标也是非功能性的需求目标。功能性测试比较清楚，正确与否一目了然，而非功能性测试，其相对性比较强，需要从不同角度比照。<br>2.用户实际使用场景。从用户的角度来模拟程序的输入，包括用户的操作习惯，使产品更能贴近用户的需求。<br>3.软件规格的需求说明，和设计文档。<br>4.测试方法对测试用例的设计影响很大。<br>5.测试对象。客户端软件和服务器端系统、分布式系统和集中式系统等。</p>
<h2 id="设计软件测试用例的原则"><a href="#设计软件测试用例的原则" class="headerlink" title="设计软件测试用例的原则"></a>设计软件测试用例的原则</h2><p><strong>保证测试用例的明确性</strong>。测试人员要尽量避免测试用例存在含糊的因素，否则会影响测试工作进行与测试结果的准确性（模棱两可）。<br><strong>保证测试用例的代表性</strong>。尽量将具有相似功能的测试用例抽象合并，使一个测试用例具有测试一类或一系列的系统需求<br><strong>保证测试用例的简洁性</strong>。冗长与复杂的测试用例是不应该出现的，否则可读性差、不利于测试人员理解和操作。简洁的测试用例可以让测试过程目的明确，让测试结果具有唯一性。</p>
<p>1、利用成熟的测试用例方法指导设计。<br>2、测试用例的针对性。<br>3、测试用例的代表性。<br>4、测试用例的可判断性。<br>5、测试用例的可重现性。<br>6、测试用例必须规范、详细、清晰的步骤。</p>
<h2 id="测试用例的度量标准"><a href="#测试用例的度量标准" class="headerlink" title="测试用例的度量标准"></a>测试用例的度量标准</h2><p>有效性：测试用例是否能够发现缺陷或者至少可能发现缺陷。能够发现缺陷的测试用例比不能够发现缺陷的测试用例有效性要高<br>仿效性：测试用例的代表程度，可测试多项内容，因而减少测试用例数量。<br>经济性：实现、调试和运行测试用例的成本。<br>修改性：修改和维护测试用例的难易程度</p>
<h2 id="软件测用例试设计的指导思想"><a href="#软件测用例试设计的指导思想" class="headerlink" title="软件测用例试设计的指导思想"></a>软件测用例试设计的指导思想</h2><p>软件测试需求和测试计划是测试用例的设计基础。（<strong>依据</strong>）<br>按照测试用例框架设计和详细设计进行分布式的测试。（<strong>方法</strong>）<br>根据测试质量目标、测试用例、测试成本、测试者技能，确定合适的测试用例数量和测试内容的详细程度。（<strong>指导</strong>）<br>分析用户的实际使用场景，被测试软件的典型特征和测试方法。（<strong>针对</strong>）<br>寻求系统设计、功能设计的弱点设计测试用例，以寻求软件存在的缺陷，而不是简单复制软件规格说明文档。（<strong>侧重</strong>）<br>正面的测试用例，也要设计负面的测试用例。（<strong>代表</strong>）</p>
<h2 id="测试用例的组成元素"><a href="#测试用例的组成元素" class="headerlink" title="测试用例的组成元素"></a>测试用例的组成元素</h2><p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210611110400.png" alt="20210611110400"><br>测试用例模板<br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210611110434.png" alt="20210611110434"><br>用例编号：每个测试用例都有唯一的标识号，用以区别其他测试用例。测试用例的编号有一定的规则：项目名称＋测试阶段类型（系统测试阶段）＋编号，如PROJECT1-ST-001，定义测试用例编号，是为了便于查找与跟踪测试用例。<br>测试标题：测试用例标题应清楚表达测试用例的用途，如“测试用户登录时输入错误密码时，软件的响应情况 ” 。<br>测试模块：指明并简单描述测试用例是用来测试哪些项目、子项目或软件特性的。<br>用例级别：测试用例的优先级别，可以粗略地分为 “高”和“低”两个级别，也可以分为“高”、“中”、“低”三个级别。一般来说，软件需求的优先级和测试用例的优先级一致，即如果软件需求的优先级为“高”，该需求的测试用例的优先级也为“高”；反之亦然。<br>测试环境：执行测试用例所需的硬软件环境。在整个测试模块中需要对应说明整个测试的特殊环境要求，在单个测试用例的测试环境需要表述该测试用例所单独需要的特殊环境要求。<br>测试输入：用来执行测试用例的输入要求。输入可以是数据、文件或具体操作。根据需求中的输入条件，确定测试用例的输入，测试用例的输入对软件需求当中的输入有很大的依赖性，如果软件需求中没有很好的定义需求的输入，那么测试用例设计中会遇到很大的障碍。<br>执行操作：执行测试用例所需的每一步操作。对于复杂的测试用例，测试用例的输入需要分为几个步骤完成，这部分内容在操作步骤中详细列出。</p>
<h2 id="测试用例分类"><a href="#测试用例分类" class="headerlink" title="测试用例分类"></a>测试用例分类</h2><ul>
<li>接口测试用例</li>
<li>路径测试用例</li>
<li>功能测试用例</li>
<li>容错能力测试用例</li>
<li>性能测试用例</li>
<li>界面测试用列</li>
<li>安全性测试用例</li>
<li>压力测试用例</li>
<li>可靠性测试用例</li>
<li>安装/反安装测试用例<h1 id="测试用例设计步骤"><a href="#测试用例设计步骤" class="headerlink" title="测试用例设计步骤"></a>测试用例设计步骤</h1></li>
<li>测试需求分析</li>
<li>业务流程分析</li>
<li>测试用例设计</li>
<li>测试用例评审</li>
<li>测试用例更新完善</li>
</ul>
<p>测试需求的特点是：<strong>包含软件需求，具有可测试性。</strong></p>
<p>从业务流程上，应得到这些信息:</p>
<ul>
<li>基本流是什么</li>
<li>备选流程是什么</li>
<li>数据流向是什么</li>
<li>关键的判断条件是什么.</li>
</ul>
<p> 基本流: 按照正确的业务流程来实现的一条操作路径（模拟正确的操作流程）<br> 备选流: 导致程序出现错误的操作流程（模拟错误的操作流程）</p>
<h2 id="设计测试用例的关键点："><a href="#设计测试用例的关键点：" class="headerlink" title="设计测试用例的关键点："></a>设计测试用例的关键点：</h2><p>（1）确定测试套件<br>测试套件是功能上的划分，是相似测试场景的组合，而非技术划分。做功能测试划分模块时，还是要从用户的角度出发，按照用户场景划分测试的“模块”。<br>（2）对每一个测试套件，确定一个或多个基本流程和可选流程<br>针对每一个测试套件，确定一个或多个基本流程（basic flow）和可选流程（alternative flow），即测试场景（Test Scenario）：可以借助scenario matrix来清晰地对可能出现的场景进行排列组合。<br>（3）针对每一个测试场景，确定一到多个测试用例<br>这仍然可以借助Matrix来清晰地规划测试用例，每一个测试用例都有其对应的预置条件、输入和期望结果。测试用例分为Positive Test Case和Negative Test Case两种，分别用来测试产品是否完成应当完成的工作和不执行不应当完成的操作。<br>（4）增加测试数据，完成测试用例<br>测试数据是测试用例中很重要的内容，一个用例可能对应多套测试数据，测试工程师根据某种测试技术，将尽可能的设计较少的测试数据完成“足够”的测试。</p>
<h1 id="测试用例评审"><a href="#测试用例评审" class="headerlink" title="测试用例评审"></a>测试用例评审</h1><p>测试用例设计完成后，为了确保测试过程和方法的正确性，以及是否有遗漏的测试点，需要进行测试用例的评审。评审活动一般由测试主管来主导，参与的人员有测试用例设计者、测试主管、项目经理、开发工程师、其它相关开发测试工程师。测试用例评审完毕，测试工程师根据评审结果，对测试用例进行修改，并记录修改日志。<br>测试用例完成后并不是这一阶段的终止，而是需要进行不断的更新、完善。软件产品新增功能或者更新需求后，测试用例也必须进行同步更新。在软件交付并进行使用后，客户也会反馈一部分的软件缺陷，而缺陷又是因为测试用例存在漏洞而造成的，因此从这个角度来看，也需要对测试用例进行完善。一般小的修改完善可在原测试用例文档上修改，但文档要有更改记录。软件的版本升级更新，测试用例一般也应随之编制升级更新版本。<strong>测试用例是“活”的，在软件的生命周期中不断更新与完善。</strong></p>
<h1 id="等价类划分"><a href="#等价类划分" class="headerlink" title="等价类划分"></a>等价类划分</h1><h2 id="黑盒测试概念"><a href="#黑盒测试概念" class="headerlink" title="黑盒测试概念"></a>黑盒测试概念</h2><p>黑盒测试被称为<strong>功能测试或数据驱动</strong>测试。在测试时，把被测程序视为一个不能打开的黑盒子，在完全不考虑程序<strong>内部结构和内部特性</strong>的情况下进行。</p>
<p>采用黑盒测试的目的:<br>主要是在已知软件产品所<strong>应具有的功能的基础上</strong>，进行：<br>（1）检查程序功能否按需求规格说明书的规定正常使用，测试各个功能是否有遗漏，检测性能等特性要求是否满足。<br>（2）检测人机交互是否错误，检测数据结构或外部数据库访问是否错误，程序是否能适当地接收输入数据而产生正确的输出结果，并保持外部信息（如数据库或文件）的完整性。<br>（3）检测程序初始化和终止方面的错误。</p>
<p>由于黑盒测试不需要了解程序内部结构，所以许多高层测试，如<strong>确认测试、系统测试、验收测试都采用黑盒测试。</strong></p>
<h3 id="黑盒测试的优点"><a href="#黑盒测试的优点" class="headerlink" title="黑盒测试的优点"></a>黑盒测试的优点</h3><p>1、有针对性的找问题，并且定位问题很准确。<br>2、黑盒测试可以证明产品是否达到用户的功能，是否符合用户的工作要求。<br>3、能重复执行相同的操作，测试中最枯燥的部分可用自动化测试完成。</p>
<h3 id="黑盒测试的缺点"><a href="#黑盒测试的缺点" class="headerlink" title="黑盒测试的缺点"></a>黑盒测试的缺点</h3><p>1、需要充分了解产品用到的技术，测试人员需要具有较多的经验。<br>2、在测试过程中很多事手工操作。<br>3、测试人员需要负责大量的文档。</p>
<h3 id="黑盒测试测试用例设计的方法："><a href="#黑盒测试测试用例设计的方法：" class="headerlink" title="黑盒测试测试用例设计的方法："></a>黑盒测试测试用例设计的方法：</h3><p>1、等价类划分。<br>2、边界值划分。<br>3、错误推测法。<br>4、因果图法。<br>5、正交表实验法。<br>6、场景图。<br>7、功能图。</p>
<h2 id="等价类划分思想"><a href="#等价类划分思想" class="headerlink" title="等价类划分思想"></a>等价类划分思想</h2><p>（1）划分<br>指互不相交的一组子集，这些子集的并是整个集合。<br>    设：A1,A2,…,An是集合A的子集。<br>    A1,A2,…,An是集合A的一个划分，则：<br>A1∪A2∪…∪An=A 且  Ai∩Aj= Φ (i！=j）<br>（2）等价类<br>等价类是指某个输入域的子集合。在该子集合中，<strong>各个输入数据对于揭示程序中的错误都是等效的，或者进行相同的处理。</strong></p>
<p><strong>等价类划分设计方法</strong>是把所有可能的输入数据，即程序的输入域划分成若干部分（子集），然后从每一个子集中选取少量具有<strong>代表性的数据作为测试用例。</strong></p>
<p>定义：将程序的输入域划分为若干部分，然后从每个部分中选取少数代表性数据当作测试用例。<br>原因：由于实现穷举测试的不可能性，只有从大量的可能数据中选取一部分作为测试用例。<br>效果：经过类别划分后，每一类的代表性数据在测试中的作用都等价于这一类中的其他值。<br>手段：在设计测试用例时，<strong>在需求说明的基础上划分等价类，列出等价表，从而确定测试用例。</strong></p>
<h3 id="有效等价类"><a href="#有效等价类" class="headerlink" title="有效等价类"></a><strong>有效等价类</strong></h3><ul>
<li>对规格说明而言，有意义、合理的输入数据所组成的集合；</li>
<li>检验程序是否<strong>实现</strong>了规格说明预先规定的功能和性能。<h3 id="无效等价类"><a href="#无效等价类" class="headerlink" title="无效等价类"></a><strong>无效等价类</strong></h3></li>
<li>对规格说明而言，无意义的、不合理的输入数据所组成的集合；</li>
<li>检查被测对象的功能和性能的实现是否有<strong>不符合</strong>规格说明要求的地方。<h3 id="如何划分"><a href="#如何划分" class="headerlink" title="如何划分"></a>如何划分</h3>先从程序的规格说明书中找出各个输入条件，再为每个输入条件划分两个或多个等价类，形成若干的互不相交的子集。<h3 id="划分等价类的标准"><a href="#划分等价类的标准" class="headerlink" title="划分等价类的标准"></a>划分等价类的标准</h3>1、<strong>完备测试、避免冗余</strong>；划分等价类重要的是集合的划分，将整个集合划分为互不相交的一组子集（无冗余性），而子集的并是整个集合（完备性）；<br>2、<strong>同一类标识（选择）选择一个测试用例</strong>，同一等价类中，往往处理相同，相同处理映射到“相同的执行路径”。</li>
</ul>
<p>划分等价类时，<strong>将所有可能的输入数据，即程序的输入域，划分为若干部分</strong>，然后从每一部分中<strong>选取少数有代表性的数据</strong>作为测试用例。<strong>使用这一方法设计测试用例要经历划分等价类（列出等价类表）和选取测试用例两步</strong>。等价类是指某个输入域的子集合。在该子集合中，各个输入数据对于揭露程序中的错误都是等效的。测试某等价类的代表值，就等价于对这一类其他值的测试。<br>因此，根据测试输入条件识别一组等价类需要一种系统化的方法。每个等价类代表一组可能的测试输入，这时不用为每个等价类中的一种元素生成一个测试用例，而是根据等价类的属性选择一个代表性的测试用例。<strong>在选择等价类时要格外谨慎，必须确保一个等价类中的所有元素行为相似。</strong></p>
<h2 id="等价类划分的步骤"><a href="#等价类划分的步骤" class="headerlink" title="等价类划分的步骤"></a>等价类划分的步骤</h2><p>（1）先考虑输入数据的<strong>类型</strong>（合法型和非法型）<br>（2）再考虑数据<strong>范围</strong>（合法型中的合法区间和非法区间）<br>（3）画出示意图，区分等价类（<strong>有效、无效</strong>）<br>（4）为每一个等价类编号。<br>（5）考虑输出，进行补充</p>
]]></content>
      <categories>
        <category>软件质量保证与测试</category>
      </categories>
      <tags>
        <tag>软件质量保证与测试</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Selenium+Python的自动化测试</title>
    <url>/2021/06/10/%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E4%BF%9D%E8%AF%81%E4%B8%8E%E6%B5%8B%E8%AF%95/%E5%AE%9E%E9%AA%8C/%E5%9F%BA%E4%BA%8ESelenium+Python%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h1 id="配置准备"><a href="#配置准备" class="headerlink" title="配置准备"></a>配置准备</h1><ol>
<li>下载chrome版本的webdriver<br>看一下chrome版本<br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210610102741.png" alt="20210610102741"><span id="more"></span>
<a href="https://sites.google.com/a/chromium.org/chromedriver/downloads">点击相应版本下载</a><br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210610102936.png" alt="20210610102936"><br>下载解压好的chromediver.exe文件放进python安装路径下的scripts文件夹里(或者你用的是anaconda,放进anaconda安装路径下的scripts文件夹里)<br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210610103406.png" alt="20210610103406"></li>
<li>安装selenium<br>pip install selenium</li>
</ol>
<h1 id="在控制台打印出网页源代码"><a href="#在控制台打印出网页源代码" class="headerlink" title="在控制台打印出网页源代码"></a>在控制台打印出网页源代码</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Google Chrome 已是最新版本</span></span><br><span class="line"><span class="comment"># 版本 91.0.4472.101（正式版本） （64 位）</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">chrome_options = webdriver.ChromeOptions()</span><br><span class="line"><span class="comment"># 使用headless无界面浏览器模式</span></span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;--disable-gpu&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动浏览器，获取网页源代码</span></span><br><span class="line">browser = webdriver.Chrome(chrome_options=chrome_options)</span><br><span class="line"></span><br><span class="line">mainUrl = <span class="string">&quot;https://www.taobao.com/&quot;</span></span><br><span class="line"><span class="comment"># 开始请求</span></span><br><span class="line">browser.get(mainUrl)</span><br><span class="line"><span class="comment"># 打印网页源代码</span></span><br><span class="line">print(<span class="string">f&quot;browser text = <span class="subst">&#123;browser.page_source&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># 关闭浏览器</span></span><br><span class="line">browser.quit()</span><br></pre></td></tr></table></figure>
<p>运行后看控制台提示<br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210610104725.png" alt="20210610104725"><br>需要把第11行的chrome_options改成options即可</p>
<h1 id="基于Selenium自动登QQ邮箱并发送邮件"><a href="#基于Selenium自动登QQ邮箱并发送邮件" class="headerlink" title="基于Selenium自动登QQ邮箱并发送邮件"></a>基于Selenium自动登QQ邮箱并发送邮件</h1><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><p>获取到网页源代码或者直接在浏览器按F12查看，找到输出框账号、密码对应的id,name属性</p>
<p>由于控件输入框和密码框都在iframe框架内。在定位这些元素之前要转到这个frame。<br>qq.switch_to.frame(‘login_frame’)<br>qq.find_element_by_xpath(“//*[@id=’switcher_plogin’]”).click()</p>
<p>选择最通用的xpath方法来定位，id=‘u’，并用send事件输入QQ账号（也可以find_element_by_id(‘u’)来定位，代码更清晰，）<br>qq.find_element_by_xpath(‘//<em>[@id=”u”]’).send_keys(“XXXXXXXXX”)<br>QQ密码元素属性id=‘p’，同样定位方法<br>qq.find_element_by_xpath(‘//</em>[@id=”p”]’).send_keys(“XXXXXXXX”)<br>定位登录按钮<br>qq.find_element_by_xpath(‘//*[@id=”login_button”]’).click()</p>
<p>这样就登录成功了</p>
<h2 id="发邮件"><a href="#发邮件" class="headerlink" title="发邮件"></a>发邮件</h2><p>bjl老师的提示</p>
<blockquote>
<p>邮件内容编辑有四个部分，收件人、主题、正文，以及最后点击发送按钮。通过之前踩的坑，到了这一步，我对iframe嵌套变得格外小心，准备定位的每个元素都去观察是否被iframe嵌套。果不其然，“收件人”、“主题”和“发送”被主文档下的mainFrame嵌套了，而“正文”又被mainFrame的子frame嵌套了。</p>
</blockquote>
<p>这一步的逻辑为：<br>①先切换到mainFrame，<br>②分别定位 收件人 和 主题 ，调用发送事件<br>③继续切换到子frame<br>④定位正文，调用发送事件<br>⑤从子frame，返回到它的父frame，也即是mainFrame中<br>⑥定位发送按钮，调用点击事件</p>
<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span>  time</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动chrome浏览器</span></span><br><span class="line">qq = webdriver.Chrome()</span><br><span class="line">qq.get(<span class="string">&#x27;https://mail.qq.com/&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定位login_frame 切换到账号密码登录</span></span><br><span class="line">qq.switch_to.frame(<span class="string">&quot;login_frame&quot;</span>)</span><br><span class="line">qq.find_element_by_xpath(<span class="string">&quot;//*[@id=&#x27;switcher_plogin&#x27;]&quot;</span>).click()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定位账号、密码，并输入</span></span><br><span class="line">qq.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;u&quot;]&#x27;</span>).send_keys(<span class="string">&quot;****&quot;</span>) <span class="comment">#****为账号</span></span><br><span class="line">qq.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;p&quot;]&#x27;</span>).send_keys(<span class="string">&quot;****&quot;</span>) <span class="comment">#****为密码</span></span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 定位登录按钮</span></span><br><span class="line">qq.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;login_button&quot;]&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">15</span>)</span><br><span class="line"><span class="comment"># 发邮件</span></span><br><span class="line"><span class="comment"># 单击写信按钮</span></span><br><span class="line">qq.find_element_by_link_text(<span class="string">&quot;写信&quot;</span>).click()</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到mainFrame</span></span><br><span class="line">qq.switch_to.frame(<span class="string">&#x27;mainFrame&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定位收件人，并输入</span></span><br><span class="line">qq.find_element_by_xpath(<span class="string">&quot;//*[@id=&#x27;toAreaCtrl&#x27;]/div[2]/input&quot;</span>).send_keys(<span class="string">&quot;****@qq.com&quot;</span>) <span class="comment">#接收人的邮箱</span></span><br><span class="line"><span class="comment"># 定位主题，并输入</span></span><br><span class="line">qq.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;subject&quot;]&#x27;</span>).send_keys(<span class="string">&quot;来自Alex的邮件&quot;</span>)</span><br><span class="line"><span class="comment"># 定位邮件正文，先进入到iframe</span></span><br><span class="line">qq.switch_to.frame(qq.find_element_by_xpath(<span class="string">&#x27;//*[@class=&quot;qmEditorIfrmEditArea&quot;]&#x27;</span>))</span><br><span class="line"><span class="comment"># 必须先点击正文，再send_keys</span></span><br><span class="line">qq.find_element_by_xpath(<span class="string">&#x27;/html/body&#x27;</span>).click()</span><br><span class="line">qq.find_element_by_xpath(<span class="string">&#x27;/html/body&#x27;</span>).send_keys(<span class="string">&quot;自动化测试&quot;</span>)</span><br><span class="line"><span class="comment"># 返回到mainframe</span></span><br><span class="line">qq.switch_to.parent_frame()</span><br><span class="line"><span class="comment"># 定位发送按钮</span></span><br><span class="line">qq.find_element_by_xpath(<span class="string">&#x27;//*[@name=&quot;sendbtn&quot;]&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line">qq.quit()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>软件质量保证与测试</category>
      </categories>
      <tags>
        <tag>软件质量保证与测试</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Pandas中的函数</title>
    <url>/2021/06/09/Python%E5%BA%93%E5%87%BD%E6%95%B0/Pandas/</url>
    <content><![CDATA[<p>pandas 是基于numpy构建的含有更高级数据结构和工具的数据分析包，提供了高效地操作大型数据集所需的工具。pandas有两个核心数据结构 Series和DataFrame，分别对应了一维的序列和二维的表结构。</p>
<span id="more"></span>
<h1 id="describe-函数"><a href="#describe-函数" class="headerlink" title="describe()函数"></a>describe()函数</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">s = pd.Series([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line">print(s.describe())</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210609220450.png" alt="20210609220450"><br>统计值变量说明：<br>count：数量统计，此列共有多少有效值<br>unipue：不同的值有多少个<br>std：标准差<br>min：最小值<br>25%：四分之一分位数<br>50%：二分之一分位数<br>75%：四分之三分位数<br>max：最大值<br>mean：均值</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Pandas</tag>
      </tags>
  </entry>
  <entry>
    <title>blog文章置顶</title>
    <url>/2021/06/01/blog/%E6%96%87%E7%AB%A0%E7%BD%AE%E9%A1%B6/</url>
    <content><![CDATA[<h2 id="设置文章置顶"><a href="#设置文章置顶" class="headerlink" title="设置文章置顶"></a>设置文章置顶</h2><p>卸载 hexo-generator-index</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">npm r hexo-generator-index</span><br></pre></td></tr></table></figure>
<p>安装 hexo-generator-index-pin-top</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">npm i hexo-generator-index-pin-top -S</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>在文章中添加置顶信息<br>   添加 top</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">title: 文章置顶</span><br><span class="line">tags:</span><br><span class="line"></span><br><span class="line">top:<span class="number">10</span></span><br></pre></td></tr></table></figure>

<p>然后在文章标题下面添加一个置顶标签样式<br>打开：themes\hexo-theme-next\layout_partials\post\post-meta.njk文件，定位到div class=”post-meta”标签下，插入如下代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> post.top %&#125;</span><br><span class="line">  &lt;i class=&quot;fa fa-thumb-tack&quot;&gt;&lt;/i&gt;</span><br><span class="line">  &lt;font color=red&gt;置顶&lt;/font&gt;</span><br><span class="line">  &lt;span class=<span class="string">&quot;post-meta-divider&quot;</span>&gt;|&lt;/span&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>第 6 章 概念描述</title>
    <url>/2021/05/15/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/%E7%AC%AC6%E7%AB%A0/</url>
    <content><![CDATA[<p>从数据分析角度，DM可分为两类：</p>
<blockquote>
<p>数据概化与基于汇总的特征化<br>属性相关分析<br>挖掘类比较：区分不同的类<br>常见的统计度量指标</p>
</blockquote>
<span id="more"></span>
<ul>
<li>描述式数据挖掘：以简洁、概要的方式描述数据，并提供数据的有趣的一般性质；</li>
<li>预测式数据挖掘：分析数据，建立一个或一组模型，并试图预测新数据集的行为。 </li>
</ul>
<p>概念描述：</p>
<p>描述性数据挖掘的最简单类型；是以简洁的形式在更<strong>一般的</strong>（而不是较低层的）抽象层描述数据。</p>
<p>概念：指一类数据的集合，如研究生、大客户等。</p>
<p>概念描述用以产生数据的特征化和比较描述：</p>
<ul>
<li><p><strong>特征化</strong>：提供给定数据集的简洁汇总；</p>
</li>
<li><p><strong>比较（区分）</strong>：提供两个或多个数据集的比较描述。</p>
</li>
</ul>
<h1 id="数据概化与基于汇总的特征化"><a href="#数据概化与基于汇总的特征化" class="headerlink" title="数据概化与基于汇总的特征化"></a>数据概化与基于汇总的特征化</h1><p>数据概化：     </p>
<ul>
<li>给定存放在数据库中的大量数据，如果能以简洁的形式在<strong>更一般的</strong>（而不是较低的）抽象层描述数据，这非常有利于用户考察数据的一般行为。</li>
<li>如，一个商场数据库中，销售主管不用对每个顾客的购买记录进行检查，而只需要对更高抽象层次的数据进行研究即可。例如：对按地理位置进行划分的顾客购买总额、每组顾客的购买频率以及顾客收入情况进行更高层次的研究分析。</li>
<li><strong>数据概化可以将大量的相关数据从一个较低的概念层次转化到一个比较高的层次</strong>。如从南京转换到江苏，江苏转换到华东地区等。<br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210523215053.png" alt="20210523215053"></li>
</ul>
<h2 id="方法一-数据立方体（或OLAP）方法"><a href="#方法一-数据立方体（或OLAP）方法" class="headerlink" title="方法一  数据立方体（或OLAP）方法"></a>方法一  数据立方体（或OLAP）方法</h2><h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><ul>
<li>数据概化的一种有效实现；</li>
<li>效率高，能够计算多种不同的度量值，如：count, average, sum, min, max；</li>
<li>概化和特征分析通过一系列的数据立方体操作完成，如roll-down和roll-up操作。<br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210523215353.png" alt="20210523215353"><h3 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h3></li>
<li>维和度量的数据类型有限，数据立方体和OLAP只能处理非数值类型（离散类型）的维和简单聚集数值类型的度量值；</li>
<li>大部分现有商业系统中，只能为<strong>非数值类型</strong>的维产生概念分层；</li>
<li><strong>缺乏智能分析</strong>，不能自动确定分析中该使用哪些维，应该概化到哪个层次。</li>
</ul>
<h2 id="方法二-面向属性的归纳（Attribute-Oriented-Induction-AOI）"><a href="#方法二-面向属性的归纳（Attribute-Oriented-Induction-AOI）" class="headerlink" title="方法二 面向属性的归纳（Attribute-Oriented Induction, AOI）"></a>方法二 面向属性的归纳（Attribute-Oriented Induction, AOI）</h2><p>基本思想：<br>（1）首先使用关系数据库查询收集任务相关的数据；<br>（2）然后，通过考察任务相关数据中每个属性的不同值的个数，进行概化 <strong>（属性删除；属性概化）</strong>；<br>（3）通过合并相等的、概化的广义元组，并累计它们对应的计数值进行聚集操作。<br>（4）通过与用户交互，将广义关系以图表或规则等形式，提交给用户。</p>
<h3 id="（1）属性删除"><a href="#（1）属性删除" class="headerlink" title="（1）属性删除"></a>（1）属性删除</h3><p>属性删除基本原则：<br>   若一个属性（在初始数据集中）有许多不同数值，且：<br>a) 该属性上没有定义概化操作符（如：没有定义相应的概念层次）；<br>b) 它的较高层概念可用其他属性表示；<br>    则，该属性从数据集中删除。<br>解释：<br>   a) 没有定义概化操作符：一个属性拥有许多不同的数值但却没有定义对它的泛化操作，该属性应被删除；因为如果保留，则会产生过多的规则；<br>   b) 较高层概念可用其他属性表示：如街道属性street，它的更高层次概念是利用(city, province, country)三个属性表示的，此时删除street相当于应用于了概化操作。</p>
<h3 id="（2）属性概化"><a href="#（2）属性概化" class="headerlink" title="（2）属性概化"></a>（2）属性概化</h3><p>属性概化基本原则：<br>   若一个属性（在初始数据集中）有许多不同数值，且：在该属性上存在概化操作符，则应当选择该概化操作符。<br>解释：<br>    在一个数据集中对一个属性进行概化操作，将会使得所产生的规则覆盖更多的数据行，实现了对其所表示的概念的概化。     </p>
<p>属性删除和属性概化都表明：如果某属性有大量的不同值，应进一步进行概化。<br>问题是：多大才算“属性具有大量不同值？”<br>两种方法：<br>1）属性概化阈值控制；<br>2）概化关系阈值控制。</p>
<h3 id="属性概化阈值控制"><a href="#属性概化阈值控制" class="headerlink" title="属性概化阈值控制"></a>属性概化阈值控制</h3><p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210524085034.png" alt="20210524085034"></p>
<ul>
<li>如果属性的不同值的个数大于属性概化阈值，则应当进一步进行属性删除或概化。</li>
<li>如果用户感到一个属性概化达到的层次太高，可以加大阈值（属性下钻）；反之，可减小阈值（属性上卷）。 <h3 id="概化关系阈值控制"><a href="#概化关系阈值控制" class="headerlink" title="概化关系阈值控制"></a>概化关系阈值控制</h3><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210524085155.png" alt="20210524085155"></li>
<li>为概化关系设置一个阈值，如果概化关系中不同元组的个数超过该阈值，则应进一步概化；否则，不再概化。</li>
<li>阈值可在数据挖掘系统中预先设定（通常为10~30），或由用户或专家设置、调整。</li>
<li>如果用户感到概化的关系太少，可以加大阈值（属性下钻）；反之，可减小阈值（属性上卷）。 </li>
</ul>
<blockquote>
<p>对于每个属性，概化讨论如下：<br>1）姓名、电话：该属性的值有许多，并且无概化操作符，属性删除<br>2）性别：属性可取的值2个，属性保留不概化<br>3）专业：假定我们事先已定义了一个概念分层，可以将专业概化到{艺术、<br>                 化学、机械、通信、信息、…..}，所以可被概化<br>4）籍贯：此表以城市为单位，已无法概化，值不算太多，保留<br>5）出生日期：假定存在概念分层，首先概化到年龄，再到年龄段<br>6）信用：假定有{优、良、中、一般、差}的分层，可以概化<br>7）学历：可以按{博士生、硕士生、本科生}概化<br>概化过程将产生相同的元组，相同的元组归为一类并给出计数</p>
</blockquote>
<h3 id="面向属性归纳结果的表示"><a href="#面向属性归纳结果的表示" class="headerlink" title="面向属性归纳结果的表示"></a>面向属性归纳结果的表示</h3><p>AOI方法的挖掘结果可以通过多种形式来输出表示：</p>
<ul>
<li>表格</li>
<li>组合表（交叉表）</li>
<li>图表 如：棒图、饼图、曲线</li>
</ul>
<h2 id="定量描述规则"><a href="#定量描述规则" class="headerlink" title="定量描述规则"></a>定量描述规则</h2><p>概化关系用逻辑规则的形式表示。通常，每个概化后的数据行代表规则中的一个析取项（并集）。由于一个大型数据库中的数据通常具有多种不同的分布，因此一个概化后的数据行不可能覆盖或表达所有（100%）的初始数据集中的数据行。<br>因此需要为每条规则带上量化的信息。如，<strong>满足规则条件前件和后件的数据行数目与初始数据集中总行数之比，作为度量规则客观价值的参量。</strong><br>将这种带参量的规则称为：<strong>定量描述规则。</strong></p>
<p>t-weight（t-权）：规则兴趣度度量指标</p>
<ul>
<li>表示规则中一个析取项具有的代表性。</li>
<li>将需要进行归纳描述的对象集合称为目标集合，设$q_a$是描述目标集合的一个概化数据行，则$q_a$的t-weight 是该数据行所涵盖的数据行数与初始数据集中数据行数之比，定义如下：<br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210524091521.png" alt="20210524091521"></li>
</ul>
<p>其中，N是概化后目标集合中的数据行个数；$q_1, q_2,…,q_N$是概化后目标集合中的数据行。<br>    显然， $q_a$是其中的一行，且t_weight的值在[0,1]区间中</p>
<p>一个定量描述规则可表示为：<br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210524091701.png" alt="20210524091701"></p>
<p> 其中，$w_i$是$condition_i$的t_weight。给出了目标集合X中，各个条件出现的兴趣度。<br>    如设定目标集合为{电脑}，查看电脑在各个地域的销售情况。</p>
<h1 id="属性相关分析"><a href="#属性相关分析" class="headerlink" title="属性相关分析"></a>属性相关分析</h1><p>对于分类数据挖掘，对给定的类，如果某属性或维的值可用于<strong>区分该类与其他类</strong>，则该属性被认为是任务高度相关的。</p>
<p>此外，在同一维内，不同层的概念也可能具有不相同的分类能力。</p>
<p>因此，必须引入一些方法进行属性或维上的相关性分析，以过滤掉统计上不相关或弱相关的属性，而仅保留对手头挖掘任务最相关的属性：</p>
<h2 id="属性相关分析的方法"><a href="#属性相关分析的方法" class="headerlink" title="属性相关分析的方法"></a>属性相关分析的方法</h2><p><strong>基本思想</strong>：对给定的数据集，计算某种度量，用于量化属性与给定的类或概念间的相关性。<br>     常用的度量包括<strong>信息增益</strong>、GINI索引、不确定性和<strong>相关系数</strong>等。</p>
<h3 id="信息增益法："><a href="#信息增益法：" class="headerlink" title="信息增益法："></a>信息增益法：</h3><p>决策树归纳学习算法（如ID3, C4.5）中普遍采用的一种方法，该方法可以删除信息量较少的属性，而保留信息含量较大的属性，以帮助进行概念描述分析。</p>
<h4 id="ID3算法"><a href="#ID3算法" class="headerlink" title="ID3算法"></a>ID3算法</h4><ul>
<li>在ID3算法中，决策节点属性的选择运用了信息论中的<strong>熵</strong>概念作为启发式函数。</li>
<li>在这种属性选择方法中，选择具有最大<strong>信息增益</strong>（information gain）的属性作为当前划分节点。</li>
<li>通过这种方式选择的节点属性可以保证决策树具有最小的分枝数量，使得到的决策树冗余最小。</li>
</ul>
<p><strong>ID3算法的基本原理</strong></p>
<ol>
<li>ID3算法根据一组<strong>类别已知</strong>的训练数据集来构造一棵决策树；然后利用构造的决策树<strong>对类别未知的数据对象</strong>进行分类。</li>
<li>在归纳学习过程中，利用一个称为<strong>信息增益</strong>的参量对属性的重要性进行评估。认为：具有<strong>最大信息增益</strong>的属性为当前数据集中具有<strong>最大分辨能力</strong>的属性。利用该属性构造决策树的一个节点，并根据该属性取值的个数确定该节点的各个分支，这些分支将原有数据集分为若干子数据集。若一个节点所包含的数据行均为同一类别，则将该节点标记为决策树的<strong>叶节点</strong>，并标记为所有数据行对应的类别。</li>
<li>不断重复这一过程，直至所有节点都无需继续分支为止</li>
</ol>
<h4 id="基于信息增益的属性选择过程"><a href="#基于信息增益的属性选择过程" class="headerlink" title="基于信息增益的属性选择过程"></a>基于信息增益的属性选择过程</h4><p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210524103056.png" alt="20210524103056"></p>
<p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210524103123.png" alt="20210524103123"></p>
<p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210524103149.png" alt="20210524103149"></p>
<p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210524103220.png" alt="20210524103220"></p>
<h2 id="属性相关分析的步骤"><a href="#属性相关分析的步骤" class="headerlink" title="属性相关分析的步骤"></a>属性相关分析的步骤</h2><p>（1）<strong>数据收集</strong>：通过查询处理，建立目标数据集，以及对比数据集（如需要进行比较概念描述的话），对比数据集与目标数据集互不相交。<br>（2）<strong>利用保守的<font color='red'>AOI方法</font>进行属性相关分析</strong>：利用AOI方法进行初步的属性相关分析工作，删除数据集中取不同值个数过多的属性或对可概化数据进行概化。保险起见，这里属性概化控制阈值都设置的较大，以便留下较多属性供稍后属性相关分析用。<br>     <strong>利用AOI方法所获得的数据集被称为数据挖掘任务的候选数据集。</strong><br>3）<strong>使用选定的相关分析度量删除不相关和弱相关的属性</strong>：使用选定的相关分析度量（如上面介绍的<font color='red'>信息增益度量</font>），评估候选关系中的每个属性。可以设置一个阈值来定义“弱相关”。<br>（4）<strong>使用AOI产生概念描述</strong>：利用更严格的属性概化控制阈值来进行基于属性的归纳操作。若描述性挖掘任务是概念描述，仅涉及初始目标数据集；若描述挖掘任务是比较概念描述，则需包括初始目标数据集，及相应的对比数据集。</p>
<h1 id="挖掘类比较：区分不同的类"><a href="#挖掘类比较：区分不同的类" class="headerlink" title="挖掘类比较：区分不同的类"></a>挖掘类比较：区分不同的类</h1><p>在许多实际应用中，用户可能需要对多个不同的数据集进行对比归纳，以获得比较概念描述。即，基于对比数据集挖掘出目标数据集的概念描述。</p>
<p>注意：<br>    目标数据集与对比数据集应包含相同的属性（维），以确保它们是可比的。</p>
<p>在比较概念描述中，面向属性归纳仍是一个重要的处理操作。<br>注意：<br>    面向属性归纳应在所有比较类上同步进行，以确保数据集中属性均被概化到同一抽象层次。</p>
<h2 id="比较概念描述的步骤"><a href="#比较概念描述的步骤" class="headerlink" title="比较概念描述的步骤"></a>比较概念描述的步骤</h2><p>（1）数据收集：通过查询处理收集数据库中与挖掘任务相关的数据集，并将它们分为目标数据集和对比数据集。<br>（2）属性相关分析：如果数据集中包含的属性个数过多，需要进行属性相关分析，以保留强相关的属性，供稍后分析；<br>（3）同步概化：依据用户或专家所设置的阈值，同步概化目标数据集和对比数据集，得到主目标数据集以及主对比数据集。<br>（4）挖掘结果表示：根据用户的要求，对主目标数据集以及主对比数据集进行某个或某些属性（维）上的比较，将结果用表格、图形、或规则等的形式表示。如需要，用户还可以在目标数据集和对比数据集上进行上钻、下钻或其他的OLAP操作。</p>
<h2 id="比较概念描述结果的表示"><a href="#比较概念描述结果的表示" class="headerlink" title="比较概念描述结果的表示"></a>比较概念描述结果的表示</h2><p>与特征化概念描述类似，比较概念描述也可采用多种形式，如：关系表、组合表、棒图、曲线和规则的形式加以表示。<br>      在上述表示方式中，除规则表示外，其他表示方法与特征化中的表示方法相同。因此，这里着重介绍基于<strong>规则</strong>的表示方法。</p>
<h3 id="基于规则的表示方法"><a href="#基于规则的表示方法" class="headerlink" title="基于规则的表示方法"></a>基于规则的表示方法</h3><p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210524111116.png" alt="20210524111116"><br>目标数据集中一个较大的d_weight值意味着相应的概念（概化后某一数据行）涵盖较多的目标数据集中的初始数据行；反之，则意味着该概念涵盖较多的非目标（对比）数据集中的初始数据行。</p>
<h1 id="在大型数据库中挖掘描述统计度量"><a href="#在大型数据库中挖掘描述统计度量" class="headerlink" title="在大型数据库中挖掘描述统计度量"></a>在大型数据库中挖掘描述统计度量</h1><p>关系数据库系统通常提供了5个内置的合计函数：count(), sum(), avg(), max() 和 min()。这些函数可以对数据进行高效运算，仍可用于多维数据的统计度量。<br>除此之外，在许多挖掘任务中，需要了解更多有关数据的中心趋势（central tendency)和数据分布（data  dispersion）等数据特点。</p>
<ul>
<li>中心趋势：均值（average）、中位数(median)、模(mode) ；</li>
<li>数据分布：四分位数（quartiles）、方差、标准差等。<h2 id="中心趋势度量指标"><a href="#中心趋势度量指标" class="headerlink" title="中心趋势度量指标"></a>中心趋势度量指标</h2></li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210524111521.png" alt="20210524111521"><br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210524111536.png" alt="20210524111536"></p>
<h2 id="离散趋势度量指标"><a href="#离散趋势度量指标" class="headerlink" title="离散趋势度量指标"></a>离散趋势度量指标</h2><p>数值数据趋向于离散的程度称为数据的离散度或方差。数据离散度的最常用度量是四分位数和标准差。<br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210524115527.png" alt="20210524115527"><br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210524115600.png" alt="20210524115600"><br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210524115625.png" alt="20210524115625"><br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210524115639.png" alt="20210524115639"></p>
]]></content>
      <categories>
        <category>大数据开发</category>
      </categories>
      <tags>
        <tag>大数据开发</tag>
        <tag>数据挖掘</tag>
      </tags>
  </entry>
  <entry>
    <title>Python文件使用</title>
    <url>/2021/05/13/Python/%E7%AC%AC5%E7%AB%A0/</url>
    <content><![CDATA[<p>按文件中数据的组织形式把文件分为文本文件和二进制文件两类。<br>文本文件：文本文件存储的是常规字符串，由若干文本行组成，通常每行以换行符’\n’结尾。<strong>常规字符串是指记事本或其他文本编辑器能正常显示、编辑并且人类能够直接阅读和理解的字符串</strong>，如英文字母、汉字、数字字符串。文本文件可以使用字处理软件如gedit、记事本进行编辑。</p>
<span id="more"></span>
<p>二进制文件：<strong>二进制文件把对象内容以字节串(bytes)进行存储</strong>，无法用记事本或其他普通字处理软件直接进行编辑，通常也无法被人类直接阅读和理解，<strong>需要使用专门的软件</strong>进行解码后读取、显示、修改或执行。常见的如图形图像文件、音视频文件、可执行文件、资源文件、各种数据库文件、各类office文档等都属于二进制文件。</p>
<h1 id="文件操作基本知识"><a href="#文件操作基本知识" class="headerlink" title="文件操作基本知识"></a>文件操作基本知识</h1><h2 id="内置函数open"><a href="#内置函数open" class="headerlink" title="内置函数open()"></a>内置函数open()</h2><p>open(file, mode=’r’, buffering=-1, encoding=None, errors=None,<br>     newline=None, closefd=True, opener=None)<br>file参数指定了被打开的文件名称。<br>mode参数指定了打开文件后的处理方式。<br>buffering参数指定了读写文件的缓存模式。0表示不缓存，1表示缓存，如大于1则表示缓冲区的大小。默认值是缓存模式。<br>encoding参数指定对文本进行编码和解码的方式，只适用于文本模式，可以使用Python支持的任何格式，如GBK、utf8、CP936等等。<br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210621214804.png" alt="20210621214804"></p>
<p>如果执行正常，open()函数返回1个文件对象，通过该文件对象可以对文件进行读写操作。如果指定<strong>文件不存在、访问权限不够、磁盘空间不足</strong>或其他原因导致创建文件对象失败则抛出异常。</p>
<p>f1 = open( ‘file1.txt’, ‘r’ )     # 以读模式打开文件<br>f2 = open( ‘file2.txt’, ‘w’)      # 以写模式打开文件</p>
<p>当对文件内容操作完以后，<strong>一定要关闭文件对象</strong>，这样才能保证所做的任何修改都确实被保存到文件中。<br>f1.close()</p>
<h2 id="文件对象属性与常用方法"><a href="#文件对象属性与常用方法" class="headerlink" title="文件对象属性与常用方法"></a>文件对象属性与常用方法</h2><p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210621214911.png" alt="20210621214911"></p>
<h2 id="上下文管理语句with"><a href="#上下文管理语句with" class="headerlink" title="上下文管理语句with"></a>上下文管理语句with</h2><p>在实际开发中，读写文件应优先考虑使用上下文管理语句with，关键字with可以自动管理资源，不论因为什么原因（哪怕是代码引发了异常）跳出with块，<strong>总能保证文件被正确关闭</strong>，并且可以在代码块执行完毕后自动还原进入该代码块时的上下文，常用于<strong>文件操作、数据库连接、网络连接、多线程与多进程同步时的锁对象管理</strong>等场合。<br>with open(filename, mode, encoding) as fp:<br>    #这里写通过文件对象fp读写文件内容的语句</p>
<p>上下文管理语句with还支持下面的用法：<br>with open(‘test.txt’, ‘r’) as src, open(‘test_new.txt’, ‘w’) as dst:<br>    dst.write(src.read())</p>
]]></content>
      <categories>
        <category>Python基础</category>
      </categories>
      <tags>
        <tag>Python基础</tag>
      </tags>
  </entry>
  <entry>
    <title>数据规范化(Matlab)</title>
    <url>/2021/05/12/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%AE%9E%E9%AA%8C1/</url>
    <content><![CDATA[<p>数据规范化处理是数据挖掘的一项基础工作。不同的属性变量往往具有不同的取值范围，数值间的差别可能很大，不进行处理可能会影响到数据分析的结果。为了消除指标之间由于取值范围带来的差异，需要进行标准化处理。将数据按照比例进行缩放，使之落入一个特定的区域，便于进行综合分析。</p>
<span id="more"></span>
<p>（1）最小-最大规范化<br>假定minA和maxA分别为属性A的最小和最大值，则通过下面公式将A的值映射到区间[new_min, new_max]中的v’：<br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210515223018.png" alt="20210515223018"><br>将data规范化到[0,1]之间</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"> A=data;</span><br><span class="line">[m,n]=size(A);</span><br><span class="line">&gt;&gt; jizhi=zeros(n,<span class="number">2</span>);  %% 将data中每个变量的最大值和最小值存放到数组jizhi中</span><br><span class="line"><span class="keyword">for</span> i=<span class="number">1</span>:n</span><br><span class="line">	jizhi(i,<span class="number">1</span>)=min(A(:,i));</span><br><span class="line">    jizhi(i,<span class="number">2</span>)=max(A(:,i)); </span><br><span class="line">end</span><br><span class="line">&gt;&gt; <span class="keyword">for</span> i=<span class="number">1</span>:m   %%对矩阵B中的每一个元素按照公式进行标准化为[<span class="number">0</span>,<span class="number">1</span>]区间的数。</span><br><span class="line">    <span class="keyword">for</span> j=<span class="number">1</span>:n</span><br><span class="line">        C(i,j)=(A(i,j)-jizhi(j,<span class="number">1</span>))/(jizhi(j,<span class="number">2</span>)-jizhi(j,<span class="number">1</span>));</span><br><span class="line">    end</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p>（2）零-均值规范化<br>将属性A的值根据其平均值和标准差进行规范化：<br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210515223045.png" alt="20210515223045"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">&gt;&gt; A1=data;</span><br><span class="line">&gt;&gt; A1_mean=mean(A1,<span class="number">1</span>); %%对矩阵A的每一列求均值，如果参数为<span class="number">2</span>，则是对矩阵A每一行的均值</span><br><span class="line">&gt;&gt; A1_std=<span class="built_in">std</span>(A1); %% 求矩阵每一列的方差</span><br><span class="line">&gt;&gt; B1=(A1-repmat(A1_mean,size(A1,<span class="number">1</span>),<span class="number">1</span>))./repmat(A1_std,size(A1,<span class="number">1</span>),<span class="number">1</span>);</span><br><span class="line">或：</span><br><span class="line">[m,n]=size(A1);</span><br><span class="line"><span class="keyword">for</span> i=<span class="number">1</span>:m</span><br><span class="line"><span class="keyword">for</span> j=<span class="number">1</span>:n</span><br><span class="line">B1(i,j)=(A1(i,j)-A1_mean(<span class="number">1</span>,j))/A1_std(<span class="number">1</span>,j);</span><br><span class="line">end</span><br><span class="line">end</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>注意，该程序中又用到了一个新的函数repmat，该函数是在处理大矩阵且内容有重复时使用的函数，其功能是通过重复某矩阵X的内容，生成新的矩阵Y。新矩阵Y的规模由矩阵X的规模和相应的参数决定，如：如果X是一个2x2的矩阵，则Y = repmat(X,2,3)，是将矩阵X的规模变成4 x 6而得到的。<br>如：X=[1 2 ; 3 4]; Y=repmat(X,2,3);<br>则：Y =[ 1     2     1     2     1     2<br>        3     4     3     4     3     4<br>        1     2     1     2     1     2<br>        3     4     3     4     3     4]；<br>在B=(A-repmat(A_mean,size(A,1),1))./repmat(A_std,size(A,1),1)中，size(A,1)表示A的行数。分子中，通过repmat函数将A的均值矩阵重复变成一个2x3列的矩阵。</p>
<p>（3）小数定标规范化<br>通过移动属性A的小数点位置进行规范化，小数点的移动依赖于A的最大绝对值：<br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210515223103.png" alt="20210515223103"><br>其中，j是使 Max(| v’ |)&lt;1的最小整数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">A2=data;  </span><br><span class="line">[m,n]=size(A2);</span><br><span class="line"> B2=max(<span class="built_in">abs</span>(A2));  %%% B2存放A2每列的绝对值的最大值</span><br><span class="line"> x1=<span class="built_in">log10</span>(B2);  %% 看最大值是<span class="number">10</span>的多少倍数</span><br><span class="line"> x2=<span class="built_in">ceil</span>(x1);  %% 利用<span class="built_in">ceil</span>函数向上取整。即得到j的值。</span><br><span class="line"> C=zeros(m,n); %% 用C存储最终小数定标后的结果</span><br><span class="line"><span class="keyword">for</span> i=<span class="number">1</span>:m</span><br><span class="line">    <span class="keyword">for</span> j=<span class="number">1</span>:n</span><br><span class="line">        C(i,j)=A2(i,j)/<span class="number">10</span>^x2(:,j); %% 对A2中的每个元素进行小数定标规范化；其中每一列的数据除以<span class="number">10</span>的j次方。j的数值为x2中对应列的数据</span><br><span class="line">    end</span><br><span class="line">end</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>大数据开发</category>
      </categories>
      <tags>
        <tag>Matlab</tag>
        <tag>大数据开发</tag>
      </tags>
  </entry>
  <entry>
    <title>软件测试策略</title>
    <url>/2021/05/12/%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E4%BF%9D%E8%AF%81%E4%B8%8E%E6%B5%8B%E8%AF%95/%E7%AC%AC2%E7%AB%A0/</url>
    <content><![CDATA[<h1 id="软件开发过程"><a href="#软件开发过程" class="headerlink" title="软件开发过程"></a>软件开发过程</h1><p>用以开发和维护软件及其相关产品（项目计划、设计文档、代码、测试用例、用户手册等）的一组活动、方法、实践和变换。<br><strong>软件开发过程</strong>是软件开发与维护的工作流程和工艺流程，是软件工程的重要组成部分。</p>
<span id="more"></span>
<p><strong>软件开发过程</strong>是指软件设计思路和方法的一般过程，包括设计软件的功能和实现的算法和方法、软件的总体结构设计和模块设计、编程和调试、程序联调和测试以及编写、提交程序。</p>
<h2 id="软件开发过程所涉及的阶段"><a href="#软件开发过程所涉及的阶段" class="headerlink" title="软件开发过程所涉及的阶段"></a>软件开发过程所涉及的阶段</h2><p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210530112509.png" alt="20210530112509"></p>
<h1 id="软件开发过程模型"><a href="#软件开发过程模型" class="headerlink" title="软件开发过程模型"></a>软件开发过程模型</h1><p>软件开发模型则描述阶段如何组合到一起，是软件开发活动以及它们之间关系的<strong>结构框架</strong>。</p>
<p>这种模型通过以下属性刻画：</p>
<ul>
<li>所执行的活动</li>
<li>每种活动的可交付产品</li>
<li>可交付产品的确认方法</li>
<li>活动序列</li>
<li>每种活动的验证方法，包括活动之间的沟通机制</li>
</ul>
<p>软件开发模型的种类：<br>瀑布模型、原型模型、快速原型模型,<br>增量模型、螺旋模型、V字模型,<br>W模型、X模型、H模型,<br>喷泉模型、XP开发模型等等。</p>
<h2 id="瀑布模型"><a href="#瀑布模型" class="headerlink" title="瀑布模型"></a>瀑布模型</h2><p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210530112643.png" alt="20210530112643"><br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210530201345.png" alt="20210530201345"></p>
<h3 id="瀑布模型三个特征："><a href="#瀑布模型三个特征：" class="headerlink" title="瀑布模型三个特征："></a>瀑布模型三个特征：</h3><ol>
<li>项目分解为独立的不同阶段</li>
<li>阶段之间具有顺序性和依赖性，每个阶段通过预先定义的输出与下一个阶段发生联系</li>
<li>如果发现错误，则返回到上一阶段，一次跳一个阶段，直到在某个较早阶段改正该错误</li>
</ol>
<h3 id="瀑布模型优点："><a href="#瀑布模型优点：" class="headerlink" title="瀑布模型优点："></a>瀑布模型优点：</h3><ul>
<li>简单：如果项目可以实际划分为独立部分，那么瀑布模型会非常有用。</li>
<li>易于组织，易于管理：因为可以预先完成所有计划。</li>
<li>质量保证：每个阶段必须完成规定的文档；每个阶段结束前完成文档审查，及早改正错误。</li>
</ul>
<h3 id="瀑布模型不足："><a href="#瀑布模型不足：" class="headerlink" title="瀑布模型不足："></a>瀑布模型不足：</h3><ul>
<li>各个阶段的划分完全固定，阶段之间产生大量的文档，极大地增加了工作量。</li>
<li>由于开发模型是线性的，用户只有等到整个过程的末期才能见到开发成果，从而增加了开发的风险。</li>
<li>早期的错误可能要等到开发后期的测试阶段才能发现，进而带来严重的后果。</li>
</ul>
<h3 id="通常使用的场合"><a href="#通常使用的场合" class="headerlink" title="通常使用的场合"></a>通常使用的场合</h3><ul>
<li>需求分析做的比较好的系统</li>
<li>二次开发的系统</li>
</ul>
<h2 id="快速原型模型"><a href="#快速原型模型" class="headerlink" title="快速原型模型"></a>快速原型模型</h2><ol>
<li>第一步是建造一个快速原型，实现客户或未来的用户与系统的交互，用户或客户对原型进行评价，进一步细化待开发软件的需求；</li>
<li>第二步则在第一步的基础上开发客户满意的软件产品。<br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210530112327.png" alt="20210530112327"></li>
</ol>
<h3 id="不足："><a href="#不足：" class="headerlink" title="不足："></a>不足：</h3><ul>
<li>不能支持风险分析</li>
<li>开发者为了使一个原型快速运行起来，往往在实现过程中采用折衷的手段。软件系统的组成部分可能会打折扣</li>
</ul>
<h3 id="通常使用的场合："><a href="#通常使用的场合：" class="headerlink" title="通常使用的场合："></a>通常使用的场合：</h3><p>开发者在不了解的应用领域开发。<br>客户不清楚其所开发的软件项目的最终目标。</p>
<h2 id="增量模型"><a href="#增量模型" class="headerlink" title="增量模型"></a>增量模型</h2><p><strong>增量模型</strong>又称演化模型，在增量模型中，软件被作为一系列的增量构件来设计、实现、集成和测试，每一个构件是由多种相互作用的模块所形成的提供特定功能的代码片段构成。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210530201535.png" alt="20210530201535"></p>
<h3 id="增量模型的优点："><a href="#增量模型的优点：" class="headerlink" title="增量模型的优点："></a>增量模型的优点：</h3><ul>
<li>有助于获取用户需求，加强对需求的理解。</li>
<li>尽早发现软件中的错误，降低开发风险。</li>
<li>支持需求的动态变化。</li>
</ul>
<h3 id="不足：-1"><a href="#不足：-1" class="headerlink" title="不足："></a>不足：</h3><ul>
<li>加入的各个构件不能破坏已构造好的系统部分，这要求软件具备开放式的体系结构。</li>
<li>易退化为边做边改模型，从而使软件过程的控制失去整体性。</li>
</ul>
<h3 id="通常使用的场合：-1"><a href="#通常使用的场合：-1" class="headerlink" title="通常使用的场合："></a>通常使用的场合：</h3><p>技术风险较大、用户需求较为稳定的软件系统。</p>
<h2 id="螺旋模型"><a href="#螺旋模型" class="headerlink" title="螺旋模型"></a>螺旋模型</h2><p>模型融合了瀑布模型、快速原型模型，它最大的特点是引入了其他模型所忽略的风险分析，如果项目不能排除重大风险，就停止项目从而减小损失。这种模型比较适合开发复杂的大型软件。</p>
<p>螺旋模型基本思想</p>
<ul>
<li>迭代地进行;</li>
<li>需求获取、设计、编码和测试活动之间会有大量重叠;</li>
<li>如果给定需求的任何阶段出现缺陷，会使该需求返回到前面的阶段;</li>
<li>开发人员能够在任何时候演示当时产品所具有的功能，还可以向客户提供增量版本以得到认可;</li>
<li>可以降低在项目后期发现重大缺陷的风险。<br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210530151513.png" alt="20210530151513"></li>
</ul>
<h3 id="螺旋模型的优点："><a href="#螺旋模型的优点：" class="headerlink" title="螺旋模型的优点："></a>螺旋模型的优点：</h3><ul>
<li>有助于获取用户需求，加强对需求的理解。</li>
<li>尽早发现软件中的错误。</li>
<li>支持需求的动态变化。</li>
<li>支持风险分析，可降低或者消除软件开发风险。</li>
<li>适合于需求动态变化，事先难以确定并且开发风险较大的系统。</li>
</ul>
<h3 id="不足：-2"><a href="#不足：-2" class="headerlink" title="不足："></a>不足：</h3><p>螺旋模型开发的成败，很大程度上依赖于风险评估的成败。需要开发人员具有相当丰富的风险评估经验和专门知识。</p>
<h3 id="通常使用的场合：-2"><a href="#通常使用的场合：-2" class="headerlink" title="通常使用的场合："></a>通常使用的场合：</h3><p>需求不能完全确定，同时又存在技术、资金或开发时间等风险因素的大型开发项目。</p>
<h1 id="单元测试方法"><a href="#单元测试方法" class="headerlink" title="单元测试方法"></a>单元测试方法</h1><p>测试的基本阶段</p>
<p>测试的4个阶段：<br>     单元测试-&gt;集成测试-&gt;系统测试-&gt;验收测试</p>
<p>按阶段进行测试是一种基本的<strong>测试策略</strong></p>
<h2 id="什么是单元测试"><a href="#什么是单元测试" class="headerlink" title="什么是单元测试"></a>什么是单元测试</h2><p><strong>定义:</strong></p>
<pre><code>单元测试是对软件基本组成单元进行的测试。
</code></pre>
<p><strong>时机:</strong></p>
<pre><code>一般在代码完成后由开发人员完成,QA人员辅助.
</code></pre>
<p><strong>对象:</strong></p>
<pre><code> 类、模块, 组件, 单元　
</code></pre>
<ol>
<li>单元测试是对软件组成的基本单元测试。<br>在传统的结构化编程语言如C语言中，单元一般是模块，也就是函数或子过程；<br>在象C++中， 单元是类或类的方法；<br>在Ada语言中，单元可为独立的过程、函数或Ada包；<br>在第四代语言(4GL)中，单元对应为一个菜单或显示界面。</li>
<li>多个被测模块之间的单元测试可同时进行，以提高单元测试效率。</li>
<li>单元测试一般应该由编程人员完成，有时测试人员也加入进来，但编程人员仍会起到主要作用。</li>
<li>单元测试的依据是软件的<strong>详细设计描述、源程序清单、编码标准等。</strong></li>
</ol>
<h2 id="单元测试的目的"><a href="#单元测试的目的" class="headerlink" title="单元测试的目的"></a>单元测试的目的</h2><ul>
<li>验证<strong>代码</strong>能否达到详细设计的预期要求。</li>
<li>发现代码中不符合<strong>编码规范</strong>的地方。</li>
<li>准确定位发现的错误，以便排除错误。<h2 id="单元测试的优点"><a href="#单元测试的优点" class="headerlink" title="单元测试的优点"></a>单元测试的优点</h2></li>
<li>由于单元测试是在编码过程中进行的（<strong>在所有测试前</strong>），若发现了一个错误，不管是从做回归测试的角度，还是对错误原因理解的深刻性的角度，修复错误的成本远小于集成测试阶段，更是小于系统测试阶段（<strong>效益更优</strong>）。</li>
<li>在编码的过程中考虑单元测试问题，有助于编程人员养成良好的编程习惯（<strong>规范</strong>），提高源代码质量。<h2 id="单元测试的步骤"><a href="#单元测试的步骤" class="headerlink" title="单元测试的步骤"></a>单元测试的步骤</h2>单元测试的实施应遵循一定的步骤，力争做到<strong>有计划、可重用。</strong><br>单元测试的步骤如下：<br>① 计划单元测试<br>② 设计单元测试<br>③ 实现单元测试<br>④ 执行单元测试<br>⑤ 单元测试结果分析并提交<strong>测试报告</strong></li>
</ul>
<h2 id="单元测试的环境构成"><a href="#单元测试的环境构成" class="headerlink" title="单元测试的环境构成"></a>单元测试的环境构成</h2><p>在单元测试时，单元测试<strong>一般为编码步骤的附属部分，模块不是独立的程序,自己不能运行,要靠其它部分来调用和驱动</strong>,要为每个单元测试开发两个软件:<br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210607093355.png" alt="20210607093355"><br><strong>驱动模块（Driver）</strong><br>   用来代替被测单元的上层模块的。<strong>驱动模块能接收测试数据，调用被测单元，也就是将数据传递给被测单元</strong>，最后打印测试的执行结果。可将驱动模块理解为被测单元的主程序。<br><strong>桩模块（Stub）</strong><br>   又称为存根模块，它用来代替被测单元的子模块。<strong>设计桩模块的目的是模拟实现被测单元的接口</strong>。桩模块不需要包括子模块的全部功能，但应做少量的数据操作，并打印接口处的信息。<br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210607094023.png" alt="20210607094023"></p>
<ul>
<li>人们在进行单元测试时尽量避免开发驱动模块和桩模块。尤其应避免开发桩模块，因为驱动模块开发的工作量一般少于桩模块。</li>
<li>若采用自底向上的方式进行开发，底层的单元先开发并先测试，可以避免开发桩模块，采用这种方法测试上层单元时，也是对下层单元的间接测试，但当下层单元被改动后，则需要执行回归测试判断其上层单元是否需要修改。</li>
<li>当不得不开发驱动模块及桩模块时，人们力求它们的简单以提高工作效率。但过于简单的驱动模块和桩模块会影响单元测试的有效性，因而，对被测单元的彻底测试有时会被推迟到集成测试阶段完成。<h2 id="如何构建单元测试的环境："><a href="#如何构建单元测试的环境：" class="headerlink" title="如何构建单元测试的环境："></a>如何构建单元测试的环境：</h2></li>
<li>构造最小<strong>运行</strong>调度系统，即构造被测单元的驱动模块。</li>
<li>模拟被测单元的<strong>接口</strong>，即构造被被测单元调用的桩模块。</li>
<li><strong>模拟生成测试数据及状态</strong>，为被测单元运行准备动态环境。<h1 id="单元测试内容"><a href="#单元测试内容" class="headerlink" title="单元测试内容"></a>单元测试内容</h1>单元测试的对象是软件设计的最小单位——模块或函数，单元测试的依据是<strong>详细设计描述。</strong><br>单元测试的内容</li>
<li>模块接口 </li>
<li>局部数据结构测试 </li>
<li>路径测试 </li>
<li>错误处理测试 </li>
<li>边界测试 <h2 id="模块接口测试"><a href="#模块接口测试" class="headerlink" title="模块接口测试"></a>模块接口测试</h2></li>
<li>调用所测模块的输入参数与模块的<strong>形式参数在个数、属性、顺序上是否匹配</strong>；</li>
<li>所测模块调用子模块时，它输入个子模块的参数与子模块的形式参数在个数、属性、顺序上是否匹配；</li>
<li>是否修改了只做输入用的<strong>形式参数</strong>；</li>
<li>输出给标准函数的参数在个数、属性、顺序上是否匹配；</li>
<li>全局变量的定义在各模块中是否一致；</li>
<li>限制是否通过形式参数来传送。<h2 id="局部数据结构测试"><a href="#局部数据结构测试" class="headerlink" title="局部数据结构测试"></a>局部数据结构测试</h2></li>
<li>检查不正确或不一致的数据类型说明；</li>
<li>使用尚未赋值或尚未初始化的变量；</li>
<li>错误的初始值或错误的默认值；</li>
<li>变量名拼写错误或书写错误；</li>
<li>不一致的数据类型。 <h2 id="路径测试（基本）"><a href="#路径测试（基本）" class="headerlink" title="路径测试（基本）"></a>路径测试（基本）</h2>1、常见的不正确的计算有：</li>
<li>运算的优先次序不正确或误解了运算的优先次序；</li>
<li>运算的方式错误（运算的对象彼此在类型上不相容）；</li>
<li>算法错误；</li>
<li>初始化不正确；</li>
<li>运算精度不够；</li>
<li>表达式的符号表示不正确等。<br>2、常见的比较和控制流错误有： </li>
<li>不同数据类型的比较；</li>
<li>不正确的逻辑运算符或优先次序；</li>
<li>因浮点运算精度问题而造成的两值比较不等；</li>
<li>关系表达式中不正确的变量和比较符；</li>
<li>“差1错”，即不正确地多循环或少循环一次；</li>
<li>错误的或不可能的循环终止条件；</li>
<li>当遇到发散的迭代时不能终止循环；</li>
<li>不适当地修改了循环变量等。 <h2 id="错误处理测试-容错"><a href="#错误处理测试-容错" class="headerlink" title="错误处理测试(容错)"></a>错误处理测试(容错)</h2></li>
<li>出错的描述难以理解；</li>
<li>出错的描述不足以对错误定位和确定出错的原因；</li>
<li>显示的错误与实际的错误不符；</li>
<li>对错误条件的处理不正确；</li>
<li>在对错误进行处理之前，错误条件已经引起系统的干预；</li>
<li>如果出错情况不予考虑，那么检查恢复正常后模块可否正常工作。<h2 id="边界测试"><a href="#边界测试" class="headerlink" title="边界测试"></a>边界测试</h2></li>
<li>在n次循环的第0次、1次、n次是否有错误；</li>
<li>运算或判断中取最大最小值时是否有错误；</li>
<li>数据流、控制流中刚好等于、大于、小于确定的比较值时是否出现错误。<h1 id="单元测试类型"><a href="#单元测试类型" class="headerlink" title="单元测试类型"></a>单元测试类型</h1></li>
<li>逻辑单元测试；</li>
<li>集成单元测试；</li>
<li>功能单元测试。</li>
</ul>
<p>单元测试应试应从<strong>各个层次</strong>来对单元<strong>内部算法、外部功能</strong>实现等进行检验，包括对<strong>程序代码的评审</strong>和通过运行单元程序来验证其<strong>功能特性</strong>等内容。</p>
<p>一般单元测试应紧接在编码之后，当源程序编制完成并通过复审和编译检查，便可开始单元测试。测试用例的设计应与复审工作相结合，根据设计信息选取测试数据，将增大发现上述各类错误的可能性。在确定测试用例的同时，应给出期望结果。<br>   进行单元测试时，常用的方法是<strong>采用白盒测试，辅之以黑盒测试。</strong></p>
<p>根据测试对象的其内部结构的逻辑关系、测试的方法，按照由小到大、由单一到组合、又简单到复杂，单元测试可以逻辑单元测试、集成单元测试和功能单元测试。<br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210614211414.png" alt="20210614211414"></p>
<h1 id="断言（-Assertion-）"><a href="#断言（-Assertion-）" class="headerlink" title="断言（ Assertion ）"></a>断言（ Assertion ）</h1><p>定义:</p>
<pre><code>简单的方法调用，判断一个语句、一个函数或对象的一个方法所产生的结果是
</code></pre>
<p>否符合你期望的那个结果（为真）。</p>
<p>时机:</p>
<pre><code>1、用错误处理代码来处理预期会发生的状况，用断言来处理绝不应该发生的状况。
2、用断言来注解并验证前（置）条件和后（置）条件
3、对于高健壮性的代码，应该先使用断言再处理错误
</code></pre>
<p>应用场景:</p>
<pre><code>1、在功能代码开发阶段，可以逐步添加断言测试是否获取自己想要的数据结果
2、写单元测试时，可用到断言，主要目的：测试这个功能片段的代码能否返回预期的结果。
3、自己提供接口供他人使用时，可先断言使用者传递过来的参数是否符合要求，如果不符合要求，将以AssertionError的方式告知使用者。
</code></pre>
<p>　<br>assertion(断言)是软件开发中一种常用的调试方式，很多开发语言中都支持这种<strong>机制。</strong><br>assertion就是在程序中的<strong>一条语句</strong>，它对一个布尔表达式进行检查，必须保证这个表达式的值为true；如果为false，则说明程序已经处于不正确的状态，系统将给出警告或退出。<br>assertion用于保证程序最基本、关键的<strong>正确性</strong>。<br>assertion 通常在开发和测试时<strong>开启</strong>。为了提高性能，在软件发布后，assertion 通常是<strong>关闭</strong>的。</p>
<p><strong>断言的语法格式</strong><br>assert( b_exp1 );或   assert( b_exp1 ): info;</p>
<p><strong>注意</strong><br>若断言为假，将抛出AssertionError异常。<br>与if 判断不同，assert为假则报错。</p>
<h1 id="单元测试的作用"><a href="#单元测试的作用" class="headerlink" title="单元测试的作用"></a>单元测试的作用</h1><h2 id="单元测试的目的-1"><a href="#单元测试的目的-1" class="headerlink" title="单元测试的目的"></a>单元测试的目的</h2><ul>
<li>验证代码能否达到详细设计的预期要求。</li>
<li>发现代码中不符合编码规范的地方。</li>
<li>准确定位发现的错误，以便排除错误。</li>
</ul>
<h2 id="单元测试的作用-1"><a href="#单元测试的作用-1" class="headerlink" title="单元测试的作用"></a>单元测试的作用</h2><ul>
<li>编写单元测试可以帮助开发人员书写高质量的代码。</li>
<li>编写单元测试可以使开发人员更有信心重构应用程序 ，去拥抱变化。</li>
</ul>
<h1 id="集成测试目的"><a href="#集成测试目的" class="headerlink" title="集成测试目的"></a>集成测试目的</h1><h2 id="什么是集成测试"><a href="#什么是集成测试" class="headerlink" title="什么是集成测试"></a>什么是集成测试</h2><p>定义:<br>是在单元测试的基础上，将所有模块按照概要设计要求组装成子系统或系统，进行集中测试。又称组装测试、联合测试、子系统测试或部件测试。</p>
<p>时机:<br>单元测试完成后便进入集成测试阶段。</p>
<p>对象:<br>模块间的接口，接口之间的关系。　</p>
<h2 id="集成测试的特点"><a href="#集成测试的特点" class="headerlink" title="集成测试的特点"></a><strong>集成测试的特点</strong></h2><ul>
<li>单元测试具有不彻底性，对于模块间接口信息内容的正确性、相互调用关系是否符合设计无能为力。只能依靠集成测试来进行保障。</li>
<li>同系统测试相比，集成测试用例是从程序结构出发的，目的性、针对性更强，测试项发现问题的效率更高，定位问题的效率也较高。</li>
<li>能够较容易地测试到系统测试用例难以模拟的特殊异常流程，从纯理论的角度来讲，集成测试能够模拟所有实际情况。</li>
<li>定位问题较快。</li>
</ul>
<h2 id="集成测试的关注点"><a href="#集成测试的关注点" class="headerlink" title="集成测试的关注点"></a><strong>集成测试的关注点</strong></h2><ul>
<li>在把各个模块连接起来时，穿越模块接口的数据是否会丢失。</li>
<li>各个子功能组合起来，能否达到预期要求的功能。</li>
<li>一个模块的功能是否会对另一个模块的功能产生不利的影响。</li>
<li>全局数据结构是否有问题，会不会被异常修改。</li>
<li>单个模块的误差积累起来，是否会放大，从而达不到可以接受的程度。</li>
</ul>
<h2 id="集成测试范围"><a href="#集成测试范围" class="headerlink" title="集成测试范围"></a>集成测试范围</h2><p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210614213006.png" alt="20210614213006"></p>
<h2 id="集成测试层次"><a href="#集成测试层次" class="headerlink" title="集成测试层次"></a>集成测试层次</h2><p>子系统内集成测试(模块)<br>子系统间集成测试 (可执行程序)</p>
<h2 id="集成测试策略"><a href="#集成测试策略" class="headerlink" title="集成测试策略"></a>集成测试策略</h2><ul>
<li>那些模块是集成测试的重点。</li>
<li>模块接口应该以什么样的顺序进行检测。</li>
<li>应该使用哪种测试设计技术检测每个接口。</li>
</ul>
<p>集成策略就是在测试对象分析的基础上，描述软件模块集成（组装）的<strong>方式、方法。</strong>集成的基本策略比较多，分类比较复杂，但不管怎样分，所有分类的方法都可以归结为<strong>非增值式和增值式</strong>两大类，其余的很多方法都是在此基础上的细分。</p>
<h1 id="集成测试方法"><a href="#集成测试方法" class="headerlink" title="集成测试方法"></a>集成测试方法</h1><h2 id="非增试测试"><a href="#非增试测试" class="headerlink" title="非增试测试"></a>非增试测试</h2><p>定义:<br>分别测试每个模块，再把所有模块按设计要求放在一起结合成所要的<br>程序。</p>
<p>优点:<br>一是方法简单，二是允许多个测试人员并行工作，对人力、物力资源<br>利用率较高。</p>
<p>缺点:<br>必须为每个模块准备相应的驱动模块和辅助桩模块，故测试成本<br>较高；其次，一旦集成后的系统包含多种错误，难以对错误定位和纠正。 
　</p>
<h3 id="大爆炸集成"><a href="#大爆炸集成" class="headerlink" title="大爆炸集成"></a>大爆炸集成</h3><p>大爆炸集成是属于非增值式集成的一种方法，它把所有的系统组件<strong>一次性集合</strong>到被测试系统中，不考虑组件之间的相互依赖性或者可能存在的风险。</p>
<p>优点：<br>可以迅速完成集成测试，并且只要极少数的驱动和桩模块。<br>多个测试人员可以并行工作，对人力、物力资源利用率较高。<br>缺点：<br>发现错误时，定位和修改比较困难。<br>许多接口错误很容易躲过测试而进入系统测试。</p>
<h2 id="增试测试"><a href="#增试测试" class="headerlink" title="增试测试"></a>增试测试</h2><p>定义:<br>这种集成方式又称<strong>渐增式组装</strong>。首先对<strong>一个个模块</strong>进行模块测试，然后将这些模块逐步组装成<strong>较大的系统</strong>，在组装的过程中<strong>边连接边测试</strong>，以发现连接过程中产生的问题。通过增值逐步组装成为要求的软件系统。</p>
<p>优点:<br>相对非增值式策略，可以较早发现模块间的接口错误；发现问题也<br>易于定位。 </p>
<p>缺点:<br>测试周期比较长，可以同时投入的人力物力受限。  </p>
<h3 id="自顶向下（Top-Down-Testing）"><a href="#自顶向下（Top-Down-Testing）" class="headerlink" title="自顶向下（Top Down Testing）"></a>自顶向下（Top Down Testing）</h3><p><strong>特点：</strong><br>从主控模块（“主程序”）开始，沿着软件的控制层次向下移动，从而逐渐把各个模块结合起来。<br>这种测试方法不需要驱动模块 。<br>在组装过程中，可以使用深度优先的策略，或宽度优先的策略。</p>
<p><strong>步骤：</strong><br>1、从主控模块（“主程序”）为测试驱动，把对主控模块进行单元测试时引入的所有<strong>桩模块</strong>用实际模块替代。<br>2、依据所选的集成策略（深度优先或广度优先），每次<strong>只替代一个桩模块</strong>。<br>3、每集成一个模块即<strong>测试一遍</strong>。<br>4、只有每组测试完成后，才着手替换<strong>下一个模块</strong>。</p>
<p>自顶向下-深度优先<br>自顶向下-广度（宽度）优先</p>
<p><strong>自顶向下适应范围</strong><br>产品的控制结构比较清晰和稳定。<br>产品的高层接口变化比较小。<br>产品的底层接口未定义或经常可能被修改。<br>产品的控制模块具有较大的技术风险，需要尽早被验证。</p>
<p><strong>自顶向下的优缺点</strong><br>优点：<br>较早的验证了主要的控制和判断。<br>如果按深度方向组装，可以首先实现和验证一个完整的软件功能。<br>最多只需一个驱动模块。<br>支持故障隔离。<br>缺点<br>桩的开发和维护成本较大。<br>底层组件的无法预计的需求可能会导致许多顶层组件的修改。</p>
<p><strong>自顶向下集成策略：</strong><br>当桩模块不能正确的向上传递有用信息，可以采用一些解决办法：</p>
<ul>
<li>将很多测试推迟到装模块用实际模块代替了之后进行。</li>
<li>进一步开发能模拟实际模块功能的桩模块。</li>
<li>自底向上集成和测试软件。</li>
</ul>
<h3 id="自底向上（Bottom-Up-Testing-）"><a href="#自底向上（Bottom-Up-Testing-）" class="headerlink" title="自底向上（Bottom Up Testing ）"></a>自底向上（Bottom Up Testing ）</h3><p>特点：<br>从具有最小依赖性的底层组件开始，按照依赖关系的结构，逐层向上集成，以检测整个系统的稳定性。<br>步骤：<br>1、把底层模块组织成实现某个子功能的<strong>模块簇</strong>。<br>2、开发一个<strong>测试驱动模块</strong>，控制测试数据的输入和测试结果的输出。<br>3、每模块簇进行测试。<br>4、删除测试使用的模块驱动，用较高层模块把模块组织成为<strong>更大功能的新模块群</strong>。</p>
<p><strong>自顶向下适应范围</strong><br>底层接口比较稳定，高层接口变化比较频繁的产品。</p>
<p><strong>自底向上的优缺点</strong><br>优点：<br>允许对底层模块行为进行早期验证，可以在任何一个叶子节点已经就绪的情况下进行集成测试。<br>减少了桩模块的工作量。<br>支持故障隔离。<br>缺点：<br>驱动模块的开发工作量比较庞大。<br>对高层的验证被推迟到了最后，设计上的错误不能被及时发现。<br>底层的异常比较难覆盖。</p>
<p><strong>自底向上集成策略：</strong><br>对软件结构中较上层，使用的是“自顶向下”法；对软件结构中较下层，使用的是“自底向上”法，两者相结合。</p>
<h3 id="自顶向下和自底向上的比较："><a href="#自顶向下和自底向上的比较：" class="headerlink" title="自顶向下和自底向上的比较："></a>自顶向下和自底向上的比较：</h3><ul>
<li>“自顶向下”法的主要优点：不需要测试驱动程序，能够在测试阶段的早期实现并验证系统的主要功能，而且能在早期发现上层模块的接口错误。</li>
<li>“自顶向下”法的主要缺点：需要存根程序，可能遇到与此相联系的测试困难，低层关键模块中的错误发现较晚，而且用这种方法在早期不能充分展开人力。</li>
<li>“自底向上”法的优缺点与“自顶向下”法刚好相反。</li>
</ul>
<h1 id="软件测试与软件开发过程关系概述"><a href="#软件测试与软件开发过程关系概述" class="headerlink" title="软件测试与软件开发过程关系概述"></a>软件测试与软件开发过程关系概述</h1><p>软件的开发和测试都是软件过程中重要的活动，是软件生命周期中重要的组成部分；软件开发是一个自顶向下、逐步细化的过程，软件计划阶段定义软件作用域；而测试过程是以相反顺序自底向上，逐步集成的过程。</p>
<p><strong>软件测试</strong>是软件工程（Software Engineering）的一个重要分支，随着软件工程学科的发展，现在的软件测试与传统的软件测试相比有了很大的发展，它与<strong>软件开发过程和软件质量保证（Quality Assurance，QA）密切相关</strong>。</p>
<p><strong>软件开发过程</strong>是生产软件产品所用的<strong>工具、方法和实践过程的集合</strong>。在商业上软件开发通常是由一组协同工作的人来完成的，我们把这组人称为开发团队。开发团队里有各种角色，一个人可以充当不止一个角色，特别是在许多小公司，有时一个人身上集中了几个角色。</p>
<p><strong>生命周期</strong> 一个软件产品是由上述多种角色的团队协同工作而完成的。从策划、定义、开发、使用与维护直到最后，要经过一个<strong>漫长的时期</strong>，通常把这个时期称为软件的生命周期（Software Life Cycle），很多人也把它称为软件开发生命周（Software Development Life Cycle）。</p>
<h2 id="软件开发过程-1"><a href="#软件开发过程-1" class="headerlink" title="软件开发过程"></a>软件开发过程</h2><h3 id="软件产品的组成："><a href="#软件产品的组成：" class="headerlink" title="软件产品的组成："></a>软件产品的组成：</h3><p>1、软件产品需要各种开发投入；<br>2、客户需求；<br>3、产品说明；<br>4、设计文档；<br>5、测试文档；<br>6、开发进度；<br>7、软件产品的其他组成部分。</p>
<h3 id="软件开发项目组："><a href="#软件开发项目组：" class="headerlink" title="软件开发项目组："></a>软件开发项目组：</h3><p>1、项目经理（程序经理）：负责管理产品的质量，以及项目的进度和预算。<br>2、商业分析师（软件分析师）：分析客户的真正需求，用能被程序员或其他设计人员理解的术语来定义客户的需求。<br>3、架构师（系统工程师）：是产品小组的专家，负责系统的总体内部设计（定义代码，数据结构，数据通信和开发策略等）。<br>4、程序员（开发人员）：设计、编写程序并编写内部设计规格说明。<br>5、测试员（质量保证员）：负责找出并报告软件产品的问题。<br>6、产品经理（产品营销经理）：负责符合公司长期战略和形象的产品的交付，并在产品发布后负责市场营销活动。对产品的盈利负责。<br>7、技术支持代表：负责处理客户投诉和服务的小组的成员。在产品开发期间他们会尽力对产品的设计和手册的内容施加影响，以减少客户的投诉。<br>8、技术文档编写员：制作用户手册和在线帮助。</p>
<h3 id="软件生命周期的模型："><a href="#软件生命周期的模型：" class="headerlink" title="软件生命周期的模型："></a>软件生命周期的模型：</h3><p>瀑布模型、原型模型、快速应用开发模型、增量模型、螺旋模型、V模型、形式方法模型、RUP（Rational Unified Process）模型、敏捷过程模型、构件组装模型、并发开发模型等。</p>
<p>几种比较流行的模型<br>1、传统的瀑布模型（Waterfall Model）<br>2、原型模型（Prototyping Model）<br>3、螺旋模型（Spiral Model）</p>
<h2 id="软件测试与软件开发概念"><a href="#软件测试与软件开发概念" class="headerlink" title="软件测试与软件开发概念"></a>软件测试与软件开发概念</h2><p>狭义定义测试：<br>比如“程序设计”与“测试”之间的关系，传统上总以为程序设计在先，测试在后。这种专指测试程序代码，定义在编码之后的“测试”是一种狭义定义的测试。<br>广义定义测试：<br>这种测试活动可以在软件开发生命周期的任何阶段进行。但是，随着开发不断地进行，越到后续阶段，找出错误并改正它的代价会越大<br>全新的软件开发模式：<br><strong>以测试驱动软件开发。</strong>软件测试贯穿了整个软件开发过程，软件开发生命周期的各个阶段中都少不了相应的测试，这种思想与软件质量保证的出发点是一致的。</p>
<h1 id="软件测试在软件开发生命周期的位置"><a href="#软件测试在软件开发生命周期的位置" class="headerlink" title="软件测试在软件开发生命周期的位置"></a>软件测试在软件开发生命周期的位置</h1><h2 id="一、软件生命周期的三阶段："><a href="#一、软件生命周期的三阶段：" class="headerlink" title="一、软件生命周期的三阶段："></a>一、软件生命周期的三阶段：</h2><p>在<strong>软件规划</strong>阶段中，主要进行软件目标的策划、可行性研究和软件的需求分析工作。<br>软件被定义之后，进入<strong>开发</strong>阶段，主要对软件的体系架构、数据结构和主要算法进行设计；将设计用程序语言编码实现，并进行测试。<br>软件的<strong>运行与维护</strong>阶段在软件生命周期中占据的比例最大。针对不同的需求，维护工作一般可以分为纠错性维护、适应性维护、扩充性维护和预防性维护等不同类型。</p>
<p>软件开发阶段还可细分为软件设计、编码和测试阶段</p>
<h3 id="1、软件规划阶段测试："><a href="#1、软件规划阶段测试：" class="headerlink" title="1、软件规划阶段测试："></a>1、软件规划阶段测试：</h3><ul>
<li>产品策划  由项目经理确定进度计划、项目范围和开发产品所需的资源</li>
<li>需求分析  由产品市场开发团队根据客户提出的要求来描述产品的需求</li>
</ul>
<p>对象：需求规格文档<br>内容：审核通过，编写测试文档</p>
<h3 id="2、软件设计阶段测试："><a href="#2、软件设计阶段测试：" class="headerlink" title="2、软件设计阶段测试："></a>2、软件设计阶段测试：</h3><p>定义：<br>软件设计阶段是设计人员将软件需求转换为<strong>语言文字和图表的集合</strong>，用来描述系统结构、数据结构、算法和用户界面。根据不同的设计方法和模式，设计分为外部设计和内部设计，或者分为高层设计（或概要设计）和低层设计（或详细设计）。<br>设计描述：<br>外部设计主要从用户的角度对产品进行描述，内部设计则描述产品的内部工作机制。它们是并行展开，相互制约，相互要求。概要设计描述了总体上系统架构应该包含的组成元素，各个模块之间的关联。详细设计主要描述各个模块如何实现以及所用的算法和数据结构。</p>
<p>对象：设计文档<br>内容：评审设计文档是否满足需求、完备、可行</p>
<p>由于设计依赖于需求文档，如果文档不存在、不完善或者始终处于变更之中，设计人员就需要与需求分析人员沟通，以确定软件产品应该具备什么能力。<strong>因此设计阶段也是对软件需求的深化理解和完善阶段。</strong></p>
<h3 id="3、软件开发阶段测试："><a href="#3、软件开发阶段测试：" class="headerlink" title="3、软件开发阶段测试："></a>3、软件开发阶段测试：</h3><p>1）软件开发编码阶段测试：<br>在编码阶段程序员通过白盒测试对编写代码、程序进行测试。主要结构测试、集成测试等。<br>2）软件测试阶段测试：<br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210615091226.png" alt="20210615091226"></p>
<h2 id="二、软件测试与软件开发的关系："><a href="#二、软件测试与软件开发的关系：" class="headerlink" title="二、软件测试与软件开发的关系："></a>二、软件测试与软件开发的关系：</h2><p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210615091257.png" alt="20210615091257"></p>
<p><strong>软件测试方法在软件开发过程的运用</strong><br>1、<strong>在软件需求分析与建模阶段中</strong>，主要进行软件目标的定义，可行性研究和软件需求分析工作。这时<strong>测试的对象是相关文档资料</strong>，如：需求规格说明书等。从需求的完备、可实现、是否合理、是否可测试等方面<strong>进行评审，采用的静态测试方法。</strong><br>2、<strong>在概要设计与详细设计阶段</strong>。概要设计描述总体系统架构中各个模块的划分及相互之间的关系；详细设计则描述各个模块具体的算法和数据结构。这些都是用文字、图表的形式进行描述的，<strong>测试时也是用静态测试的方法，对文字、图表进行评审。</strong><br>3、<strong>在编码工作阶段</strong>，主要是采用高级语言对已详细设计的模块进行编程。这时的测试工作主要是对已有的程序代码进行白盒测试，可以是<strong>静态与动态相结合，采用各种覆盖方法进行测试（白盒测试）</strong>，此时主要由程序员进行测试。<br>4、<strong>在测试阶段中</strong>，此时进行的集成与系统测试。<strong>集成测试采用灰盒测试方法</strong>（白盒测试与黑盒测试相结合），主要测试产品的接口以及各模块之间的关系。而<strong>系统测试一般采用黑盒测试方法</strong>，主要测试系统的功能、性能等；由测试人员来完成测试。<br>5、<strong>在检验交付与维护阶段</strong>，模拟或实际客户环境，对系统进行验收测试。大多采用<strong>自动化测试工具进行测试验收</strong>。包括功能测试、性能测试、回归测试、发布测试等。</p>
<p>对于软件测试与软件开发过程之间的关系，套用固定的模型不是聪明之举。比如“程序设计”与“测试”之间的关系，习惯上总以为程序设计在先，测试在后，如下图（a）所示。而对于一些复杂的程序，将测试分为同步测试与总测试更有效，如下图（b）所示。<br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210615092007.png" alt="20210615092007"></p>
<p>软件测试过程模型：<br>单元测试：是基于代码测试，最初由开发人员执行，已验证其可执行代码的各个部分是否已达到预期的功能要求。<br>集成测试：是为了验证2个或多个单元之间的集成是否正确，并有针对性地对详细设计中所定义的各个单元之间的接口进行检查。<br>系统测试：在所有的单元测试和集成测试完成后，系统测试开始完整的模拟客户环境，运行系统进行测试，以验证系统是否到达了在概要设计中所定义的功能和性能。<br>验收测试：当技术部门完成了所有的测试工作后，有业务专家或用户进行验收测试，以确保产品能真正符合用户业务上的需要。</p>
<h1 id="常见的软件测试模型"><a href="#常见的软件测试模型" class="headerlink" title="常见的软件测试模型"></a>常见的软件测试模型</h1><h2 id="V模型"><a href="#V模型" class="headerlink" title="V模型"></a>V模型</h2><p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210530153326.png" alt="20210530153326"><br>V_model的特点：<br>（1）V模型是软件开发瀑布模型的变种；<br>（2）它反映了测试活动与分析和设计的关系；<br>（3）V模型的软件测试策略包括：<br>-低层测试，是为了源代码的正确性；<br>-高层测试，高层测试是为了使整个系统满足用户。的需求。<br>V_model的局限性：<br>仅仅把测试过程作为在需求分析、系统设计及编码之后的一个阶段，忽视了测试对需求分析、系统设计的验证，一直到后期的验收测试才被发现。</p>
<ul>
<li>非常明确地标明了测试过程中存在的不同级别。</li>
<li>清楚地描述了测试阶段和开发过程期间各阶段的对应关系。</li>
</ul>
<h2 id="W模型"><a href="#W模型" class="headerlink" title="W模型"></a>W模型</h2><p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210530153400.png" alt="20210530153400"><br>W_model的特点：<br>（1） W模型由两个V字形模型做成，分别代表测试与开发过程；<br>（2） W模型强调，测试伴随着整个软件开发周期，而且测试的对象不仅仅是程序，需求、功能和设计同样要测试；<br>（3）测试与开发是同步进行的。</p>
<p>W_model的局限性：<br>（1）把软件的开发视为需求、设计、编码等一系列串行的活动;<br>（2）软件开发和测试保持一种线性的前后关系，需要有严格的指令表示上一阶段完全结束，才可以正式开始下一个阶段。<br>（3）无法支持迭代开发模型.</p>
<ul>
<li>W模型强调“测试伴随着整个软件开发周期”。</li>
<li>测试的对象不仅仅是程序，需求、功能和设计同样要测试。</li>
<li>有利于尽早地发现问题。</li>
<li>W模型有利于即时了解项目的测试风险，及早制定应对方案，加快项目进度。</li>
</ul>
<h2 id="H模型"><a href="#H模型" class="headerlink" title="H模型"></a>H模型</h2><p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210615092421.png" alt="20210615092421"><br>H_model的特点：<br>（1） H模型将测试活动完全独立出来，形成一个完全独立的流程，贯穿于整个产品周期，与其他流程并发地进行;<br>（2）尽早准备，尽早执行；<br>（3）测试准备与测试执行分离，有利于资源调配、减低成本，提高效率;<br>（4）充分体现测试过程）的复杂性。</p>
<h2 id="X模型"><a href="#X模型" class="headerlink" title="X模型"></a>X模型</h2><p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210530164202.png" alt="20210530164202"><br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210615092531.png" alt="20210615092531"><br>X_model的特点：<br>（1） X模型左边描述的是针对单独程序片段所进行的相互分离的编码和测试，此后，将进行频繁的交接，通过集成最终合成为可执行的程序；<br>（2） x模型还定位了探索性测试，这是不进行事先计划的特殊类型的测试，这一方式往往能帮助有经验的测试人员在测试计划之外发现更多的软件错误。 </p>
<p>X_model的局限性：<br>（1）提出了测试设计，却没有指出在软件测试的各个阶段都应该进行测试设计;<br>（2）过于关注低级别即程序级别的行为，而没有抽象成一个系统的模型<br>（3）可能对测试造成人力、物力和财力的浪费，对测试员的熟练程度要求比较高型.</p>
<h2 id="前置测试模型"><a href="#前置测试模型" class="headerlink" title="前置测试模型"></a>前置测试模型</h2><p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210615092704.png" alt="20210615092704"><br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210530164252.png" alt="20210530164252"><br>pretest-model，它是将测试和开发紧密结合的模型，该模型提供了轻松的方式，可以使你的项目加快速度。</p>
<ul>
<li>非常明确地将测试和开发紧密联系在一起。</li>
<li>清楚地描述了测试阶段，减少了大量的重复工作。<h2 id="测试模型的使用："><a href="#测试模型的使用：" class="headerlink" title="测试模型的使用："></a>测试模型的使用：</h2>V-model强调了在整个软件项目开发中需要经历的若干个测试级别，而且每一个级别都与一个开发级别相对应，但它忽略了测试对象不仅仅包括程序，或者说它没有明确地指出应该对软件的需求、设计进行测试。<br>W-model强调了测试计划等工作的先行和对系统需求和系统设计的测试，但W-model和V-model一样也没有专门对软件测试流程予以说明，因为事实上，随着软件质量要求越来越为大家所重视，软件测试也逐步发展成为一个独立于软件开发部的组织，就每一个软件测试的细节而言，它都有一个独立的操作流程。比如，现在的第三方测试，就包含了从测试计划和测试案例编写，到测试实施以及测试报告编写的全过程，<br>H-model强调测试是独立的，只要测试准备完成，就可以执行测试了。<br>X-model和Pretest-model又在此基础上增加了许多不确定因素的处理情况，因为在真实项目中，经常会有变更的发生，例如需要重新访问前一阶段的内容，或者跟踪并纠正以前提交的内容，修复错误，排除多余的成分，以及增加新发现的功能等。</li>
</ul>
<h1 id="黑盒测试"><a href="#黑盒测试" class="headerlink" title="黑盒测试"></a>黑盒测试</h1><p>黑盒测试：是一种从软件外部对软件实施的测试，也称功能测试或基于规格说明的测试。无需考虑程序的内部结构，仅仅靠输入输出之间的关系和程序的功能来设计测试用例，推断测试结果的正确性，以程序的外部特性来判断是否正确运行。</p>
<p>黑盒测试的基本观点是：任何程序都可以看作是从输入定义域到输出值域的映射。</p>
<p>黑盒测试有两个重要的优点：</p>
<ul>
<li>黑盒测试与<strong>软件的具体实现方式无关</strong>，因此软件实现方式如果发生了变更、修改但功能测试不变的话，仍可以使用原来的测试用例。</li>
<li>在进行软件开发的同时，也可以进行软件黑盒测试用例的设计，这样可以节省一部分时间成本，减少总开发时间。</li>
</ul>
<p>黑盒测试常用工具：</p>
<ul>
<li>QACenter主要包括功能测试工具QARun、性能测试工具QALoad、应用可用性管理工具EcoTools、应用性能优化工具EcoScope。</li>
<li>WinRunner具有以下几个显著的功能：创建测试、插入检查点、检验数据、增强测试、运行测试、分析结果与维护测试。</li>
</ul>
<h1 id="白盒测试"><a href="#白盒测试" class="headerlink" title="白盒测试"></a>白盒测试</h1><p>白盒测试：白盒测试又称结构测试、透明盒测试、逻辑驱动测试或基于代码的测试。白盒测试是一种测试用例设计方法，盒子指的是被测试的软件。</p>
<p>白盒测试方法：全面了解程序内部逻辑结构、对所有逻辑路径进行测试；主要方法有逻辑驱动、基路测试等，主要用于软件验证。<br>白盒测试必须遵从的规则如下:</p>
<ul>
<li>一个模块中所有的独立路径都需至少得到一次测试。</li>
<li>所有逻辑值的真与假情况都需要被测试到。</li>
<li>为了保证程序结构的有效性，需要检查程序的内部逻辑结构。</li>
<li>在程序的上、下边界与可操作范围内都能保证循环的顺利运行。</li>
</ul>
<p><strong>白盒测试工具</strong>一般是针对代码进行测试，测试中发现的缺陷可以定位到代码级，而根据测试工具原理的不同，又可以分为静态测试工具和动态测试工具。</p>
<p><strong>静态测试工具</strong>直接对代码进行分析，不需要运行代码，也不需要对代码编译链接，生成可执行文件。</p>
<p><strong>动态测试工具</strong>的一般采用“插桩”的方式，向代码生成的可执行文件中插入一些监测代码，用来统计程序运行时的数据。<br>白盒测试工具及其特点：</p>
<ul>
<li>Jtest<br>Jtest是一个代码分析和动态类、组件测试工具，是一个集成的、易于使用和自动化的Java单元测试工具。它增强代码的稳定性，防止软件错误。</li>
<li>Jcontract<br>Jcontract在系统级验证类/部件是否正确工作并被正确使用。Jcontract是个独立工具，在功能上是Jtest 的补充。</li>
<li>C++Test<br>C++Test可以帮助开发人员防止软件错误，保证代码的健全性、可靠性、可维护性和可移植性。</li>
<li>CodeWizard<br>CodeWizard是代码静态分析工具，先进的C/C++源代码分析工具，使用超过500个编码规范自动化地标明危险的，但是编译器不能检查到代码结构。</li>
<li>Insure++<br>Insure++是一个基于C/C++的自动化的内存错误、内存泄漏的精确检测工具。Insure++能够可视化实时内存操作,准确检测出内存泄漏产生的根源。Insure++还能执行覆盖性分析,清楚地指示那些代码已经测试过。</li>
</ul>
<h1 id="黑盒测试和白盒测试的比较"><a href="#黑盒测试和白盒测试的比较" class="headerlink" title="黑盒测试和白盒测试的比较"></a>黑盒测试和白盒测试的比较</h1><p>黑盒测试与白盒测试的主要区别在以下几个方面中：</p>
<ol>
<li>已知产品的因素<br>黑盒测试：已知程序的功能需求、设计规格，可以通过测试验证程序需要的功能是否已被实现，是否符合要求。<br>白盒测试：已知程序的内部工作结构，可以通过测试验证程序的内部结构是否符合要求，是否含有缺陷。</li>
<li>检查测试的主要内容</li>
</ol>
<p>1)黑盒测试主要检查的内容包括但不限于：<br>功能是否都满足需求；是否有功能出现缺陷。<br>接口上是否能正确接受输入；输出结果是否正确。<br>是否有数据结构信息或者外部信息访问错误。<br>是否有初始化或终止性错误。<br>2)白盒测试主要检查的内容包括但不限于：<br>所有程序模块的独立路径都需要至少被测试一遍。<br>所有的逻辑判定的真值与假值都需要至少被测试一遍。<br>在运行的界限内和循环的边界上执行循环体。<br>测试内部的数据结构是否有效。<br>3. 静态测试方法：<br>静态黑盒测试方法：产品需求文档、用户手册、帮助文件等。<br>静态白盒测试方法：走查、复审、评审程序源代码、数据字典、系统设计文档、环境设置、软件配置项等。<br>4. 动态测试方法：<br>动态黑盒测试方法：通过数据输入并运行程序来检验输出结果，如功能测试、验收测试和一些性能测试（或兼容性、安全性）等。<br>动态白盒测试方法：通过驱动程序来调用，如进行单元测试、集成测试和部分性能测试（或可靠性、恢复性）等。</p>
]]></content>
      <categories>
        <category>软件质量保证与测试</category>
      </categories>
      <tags>
        <tag>软件质量保证与测试</tag>
      </tags>
  </entry>
  <entry>
    <title>Python字符串</title>
    <url>/2021/05/12/Python/%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<p>在Python中，字符串属于<strong>不可变有序序列</strong>，使用单引号、双引号、三单引号或三双引号作为定界符，并且不同的<strong>定界符之间可以互相嵌套</strong>。</p>
<span id="more"></span>
<p>除了支持序列通用方法（包括双向索引、比较大小、计算长度、元素访问、切片、成员测试等操作）以外，字符串类型还支持一些特有的操作方法，例如字符串格式化、查找、替换、排版等等。<br>字符串属于<strong>不可变</strong>序列，不能直接对字符串对象进行元素增加、修改与删除等操作，切片操作也只能访问其中的元素而无法使用切片来修改字符串中的字符。<br>除了支持Unicode编码的str类型之外，Python还支持字节串类型bytes，str类型字符串可以通过**encode()<strong>方法使用指定的字符串编码格式编码成为bytes对象，而bytes对象则可以通过</strong>decode()**方法使用指定编码格式解码成为str字符串。</p>
<h1 id="字符串编码格式简介"><a href="#字符串编码格式简介" class="headerlink" title="字符串编码格式简介"></a>字符串编码格式简介</h1><p>最早的字符串编码是美国标准信息交换码ASCII，仅对10个数字、26个大写英文字母、26个小写英文字母及一些其他符号进行了编码。ASCII码采用<strong>1个字节</strong>来对字符进行编码，最多只能表示256个符号。<br><strong>GB2312</strong>是我国制定的中文编码，使用1个字节表示英语，2个字节表示中文；GBK是GB2312的扩充，而CP936是微软在GBK基础上开发的编码方式。<strong>GB2312、GBK和CP936都是使用2个字节表示中文</strong>。<br><strong>UTF-8</strong>对全世界所有国家需要用到的字符进行了编码，以1个字节表示英语字符(兼容ASCII)，以<strong>3个字节表示中文</strong>，还有些语言的符号使用2个字节（例如俄语和希腊语符号）或4个字节。<br>不同编码格式之间相差很大，采用<strong>不同的编码格式意味着不同的表示和存储形式</strong>，把同一字符存入文件时，写入的内容可能会不同，在试图理解其内容时<strong>必须了解编码规则</strong>并进行正确的解码。如果解码方法不正确就无法还原信息，从这个角度来讲，<strong>字符串编码也具有加密的效果。</strong><br>Python 3.x完全支持中文字符，<strong>默认使用UTF8编码格式</strong>，无论是一个数字、英文字母，还是一个汉字，在<strong>统计字符串长度时都按一个字符对待和处理</strong>。</p>
<h1 id="转义字符与原始字符串"><a href="#转义字符与原始字符串" class="headerlink" title="转义字符与原始字符串"></a>转义字符与原始字符串</h1><p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210622202756.png" alt="20210622202756"></p>
<p>为了避免对字符串中的转义字符进行转义，可以使用原始字符串，在字符串前面加上字母r或R表示原始字符串，其中的<strong>所有字符都表示原始的含义而不会进行任何转义</strong>。<br>path = r’C:\Windows\notepad.exe’  #原始字符串，任何字符都不转义</p>
<h1 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h1><h2 id="使用-运算符进行格式化"><a href="#使用-运算符进行格式化" class="headerlink" title="使用%运算符进行格式化"></a>使用%运算符进行格式化</h2><p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210623163853.png" alt="20210623163853"><br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210623163824.png" alt="20210623163824"><br>转8进制</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">x = <span class="number">7</span></span><br><span class="line">ans = <span class="string">&quot;%o&quot;</span> % x</span><br><span class="line">print(ans)</span><br></pre></td></tr></table></figure>
<h2 id="使用format-方法进行格式化"><a href="#使用format-方法进行格式化" class="headerlink" title="使用format()方法进行格式化"></a>使用format()方法进行格式化</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span>/<span class="number">3</span></span><br><span class="line"><span class="number">0.3333333333333333</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">&#x27;&#123;0:.3f&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="number">1</span>/<span class="number">3</span>))         <span class="comment">#保留3位小数</span></span><br><span class="line"><span class="number">0.333</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;&#123;0:%&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="number">3.5</span>)                  <span class="comment">#格式化为百分数</span></span><br><span class="line"><span class="string">&#x27;350.000000%&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;&#123;0:_&#125;,&#123;0:_x&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="number">1000000</span>)       <span class="comment">#Python 3.6.0及更高版本支持</span></span><br><span class="line"><span class="string">&#x27;1_000_000,f_4240&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;&#123;0:_&#125;,&#123;0:_x&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="number">10000000</span>)      <span class="comment">#Python 3.6.0及更高版本支持</span></span><br><span class="line"><span class="string">&#x27;10_000_000,98_9680&#x27;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">weather = [(<span class="string">&quot;Monday&quot;</span>,<span class="string">&quot;rainy&quot;</span>),(<span class="string">&quot;Tuesday&quot;</span>,<span class="string">&quot;sunny&quot;</span>),</span><br><span class="line">           (<span class="string">&quot;Wednesday&quot;</span>, <span class="string">&quot;sunny&quot;</span>),(<span class="string">&quot;Thursday&quot;</span>,<span class="string">&quot;rainy&quot;</span>),</span><br><span class="line">           (<span class="string">&quot;Friday&quot;</span>,<span class="string">&quot;cloudy&quot;</span>)]</span><br><span class="line">formatter = <span class="string">&quot;Weather of &#x27;&#123;0[0]&#125;&#x27; is &#x27;&#123;0[1]&#125;&#x27;&quot;</span>.<span class="built_in">format</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> <span class="built_in">map</span>(formatter,weather):</span><br><span class="line">    print(item)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> weather:</span><br><span class="line">    print(formatter(item))</span><br></pre></td></tr></table></figure>

<h2 id="格式化的字符串常量"><a href="#格式化的字符串常量" class="headerlink" title="格式化的字符串常量"></a>格式化的字符串常量</h2><p>从Python 3.6.x开始支持一种新的字符串格式化方式，官方叫做Formatted String Literals，在字符串前加字母f，含义与字符串对象format()方法类似。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>name = <span class="string">&#x27;Dong&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>age = <span class="number">39</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&#x27;My name is <span class="subst">&#123;name&#125;</span>, and I am <span class="subst">&#123;age&#125;</span> years old.&#x27;</span></span><br><span class="line"><span class="string">&#x27;My name is Dong, and I am 39 years old.&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>width = <span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>precision = <span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>value = <span class="number">11</span>/<span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&#x27;result:<span class="subst">&#123;value:&#123;width&#125;</span>.<span class="subst">&#123;precision&#125;</span>&#125;&#x27;</span></span><br><span class="line"><span class="string">&#x27;result:     3.667&#x27;</span></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Python基础</category>
      </categories>
      <tags>
        <tag>Python基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Python函数与模块</title>
    <url>/2021/05/12/Python/%E7%AC%AC%E5%9B%9B%E7%AB%A0/</url>
    <content><![CDATA[<h1 id="函数的定义和使用"><a href="#函数的定义和使用" class="headerlink" title="函数的定义和使用"></a>函数的定义和使用</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span>  函数名(<span class="params">函数参数</span>):</span></span><br><span class="line">    函数体</span><br><span class="line">    <span class="keyword">return</span> 表达式或者值</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h2 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h2><p>lambda表达式可以用来声明匿名函数，即没有函数名字的临时使用的小函数，只可以包含一个表达式，且该表达式的计算结果为函数的返回值，不允许包含其他复杂的语句，但在表达式中可以调用其他函数。<br>例如：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">f=<span class="keyword">lambda</span> x,y,z:x+y+z</span><br><span class="line"><span class="built_in">print</span> (f(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line">等价于定义：</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x,y,z</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x+y+z</span><br><span class="line"><span class="built_in">print</span> (f(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))</span><br></pre></td></tr></table></figure>
<h2 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h2><ul>
<li>Lambda 表达式作为函数的返回值。</li>
<li>Python中函数是可以返回多个值的，多个值以元组的形式返回。</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cal</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x,y,z:x+y+z;</span><br><span class="line"></span><br><span class="line">ans=cal()</span><br><span class="line">print(ans(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))</span><br></pre></td></tr></table></figure>

<h1 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h1><h2 id="函数形参和实参的区别"><a href="#函数形参和实参的区别" class="headerlink" title="函数形参和实参的区别"></a>函数形参和实参的区别</h2><p>形参全称是形式参数，在用def关键字定义函数时函数名后面括号里的变量称作为形式参数。实参全称为实际参数，在调用函数时提供的值或者变量称作为实际参数。</p>
<h2 id="参数的传递"><a href="#参数的传递" class="headerlink" title="参数的传递"></a>参数的传递</h2><p>可更改(mutable)与不可更改(immutable)对象<br>     strings, tuples, 和 numbers 是不可更改的对象，而 list,dict 等则是可以修改的对象。<br><strong>不可变类型</strong>：变量赋值 a=5 后再赋值 a=10，这里实际是新生成一个 int 值对象 10，再让 a 指向它，而 5 被丢弃，不是改变a的值，相当于新生成了a。<br><strong>可变类型</strong>：变量赋值 la=[1,2,3,4] 后再赋值 la[2]=5 则是将 list la 的第三个元素值更改，本身la没有动，只是其内部的一部分值被修改了</p>
<p><strong>不可变类型</strong>：类似 c++ 的值传递，如 整数、字符串、元组。如fun（a），传递的只是a的值，没有影响a对象本身。比如在 fun（a）内部修改 a 的值，只是修改另一个复制的对象，不会影响 a 本身。<br><strong>可变类型</strong>：类似 c++ 的引用传递，如 列表，字典。如 fun（la），则是将 la 真正的传过去，修改后fun外部的la也会受影响</p>
<h2 id="函数参数的类型"><a href="#函数参数的类型" class="headerlink" title="函数参数的类型"></a>函数参数的类型</h2><p>在Python中函数参数定义和传递的方式相比而言就灵活多。<br>1．默认值参数<br>在于它能够给函数参数提供默认值。<br>2．关键字参数<br>避免了用户需要牢记位置参数顺序的麻烦<br>3．任意个数参数<br>函数参数前面单星号（*）和双星号（**）的区别<br>      def foo(param1, *param2):<br>      def bar(param1, <strong>param2):<br>单星号（ * ）：*agrs<br>      将所以参数以元组(tuple)的形式导入<br>双星号（ ** ）：</strong>kwargs<br>      将参数以字典的形式导入</p>
<h2 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h2><p>1．局部变量<br>在函数内定义的变量只在该函数内起作用，称为局部变量。<br>2．全局变量<br>还有一种变量叫做全局变量，它是在函数外部定义的，作用域是整个程序。全局变量可以直接在函数里面使用，但是如果要在函数内部改变全局变量值，必须使用global关键字进行声明。</p>
<h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><p>在Python中，闭包指函数的嵌套。可以在函数内部定义一个嵌套函数。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func_lib</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">x, y</span>):</span></span><br><span class="line">        <span class="keyword">return</span> x+y</span><br><span class="line">    <span class="keyword">return</span> add       <span class="comment"># 返回函数对象</span></span><br><span class="line"> </span><br><span class="line">fadd = func_lib()</span><br><span class="line">print(fadd(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h1><p>内置函数(built-in functions)又称系统函数，或内建函数，是指Python本身所提供的函数，任何时候都可以使用。</p>
<p>Python常用的内置函数有数学运算函数、类型转换函数和反射函数等。想要查所有内置函数名可以在python命令行方式中如下输入：</p>
<p><code>&gt;&gt;&gt;dir(__builtins__)</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210609151105.png" alt="20210609151105"><br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210609151109.png" alt="20210609151109"><br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210609151121.png" alt="20210609151121"><br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210609151151.png" alt="20210609151151"><br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210609151203.png" alt="20210609151203"><br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210609151215.png" alt="20210609151215"></p>
<h1 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h1><p>模块（module）能够有逻辑地组织你的Python代码段。把相关的代码分配到一个模块里能让代码更好用，更易懂。简单地说，模块就是一个保存了Python代码的文件。模块里能定义函数，类和变量。</p>
<h2 id="import-导入模块"><a href="#import-导入模块" class="headerlink" title="import 导入模块"></a>import 导入模块</h2><p>导入模块方式<br>在Python中用关键字import来导入某个模块。方式如下：<br>import 模块名            # 导入模块<br>有时候我们只需要用到模块中的某个函数，只需要引入该函数即可，此时可以通过语句：<br>from 模块名 import 函数名1,函数名2….<br>通过这种方式引入的时候，调用函数时只能给出函数名，不能给出模块名</p>
<h2 id="定义自己的模块"><a href="#定义自己的模块" class="headerlink" title="定义自己的模块"></a>定义自己的模块</h2><p>在Python中，每个Python文件都可以作为一个模块，<strong>模块的名字就是文件的名字</strong>。<br>比如有这样一个文件fibo.py，在fibo.py中定义了3个函数add()，fib()，fib2()：<br>那么在其他文件（如test.py）中就可以如下使用： </p>
<h2 id="random模块"><a href="#random模块" class="headerlink" title="random模块"></a>random模块</h2><p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210609152109.png" alt="20210609152109"><br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210609152157.png" alt="20210609152157"></p>
<h2 id="math模块"><a href="#math模块" class="headerlink" title="math模块"></a>math模块</h2><p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210609152234.png" alt="20210609152234"></p>
<h1 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h1><h2 id="排序与逆序"><a href="#排序与逆序" class="headerlink" title="排序与逆序"></a>排序与逆序</h2><p>sorted()对列表、元组、字典、集合或其他可迭代对象进行排序并返回新列表，reversed()对可迭代对象（生成器对象和具有惰性求值特性的zip、map、filter、enumerate等类似对象除外）进行翻转（首尾交换）并返回可迭代的reversed对象。</p>
<h2 id="枚举与迭代"><a href="#枚举与迭代" class="headerlink" title="枚举与迭代"></a>枚举与迭代</h2><p>enumerate()函数用来枚举可迭代对象中的元素，返回可迭代的enumerate对象，其中每个元素都是包含索引和值的元组。</p>
<h2 id="map-、reduce-、filter"><a href="#map-、reduce-、filter" class="headerlink" title="map()、reduce()、filter()"></a>map()、reduce()、filter()</h2><p>内置函数map()把一个函数func依次映射到序列或迭代器对象的每个元素上，并返回一个可迭代的map对象作为结果，map对象中每个元素是原序列中元素经过函数func处理后的结果。<br>标准库functools中的函数reduce()可以将一个接收2个参数的函数以迭代累积的方式从左到右依次作用到一个序列或迭代器对象的所有元素上，并且允许指定一个初始值。<br>内置函数filter()将一个单参数函数作用到一个序列上，返回该序列中使得该函数返回值为True的那些元素组成的<strong>filter对象</strong>，如果指定函数为None，则返回序列中等价于True的元素。</p>
<h2 id="range"><a href="#range" class="headerlink" title="range()"></a>range()</h2><p>range()是Python开发中非常常用的一个内置函数，语法格式为range([start,] end [, step] )，有range(stop)、range(start, stop)和range(start, stop, step)三种用法。该函数返回具有惰性求值特点的range对象，其中包含<strong>左闭右开</strong>区间[start,end)内以step为步长的整数。参数start默认为0，step默认为1。</p>
<h2 id="zip"><a href="#zip" class="headerlink" title="zip()"></a>zip()</h2><p>zip()函数用来把多个可迭代对象中的元素压缩到一起，返回一个可迭代的zip对象，其中每个元素都是包含原来的多个可迭代对象对应位置上元素的元组，如同拉拉链一样。</p>
]]></content>
      <categories>
        <category>Python基础</category>
      </categories>
      <tags>
        <tag>Python基础</tag>
      </tags>
  </entry>
  <entry>
    <title>软件测试基础</title>
    <url>/2021/05/12/%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E4%BF%9D%E8%AF%81%E4%B8%8E%E6%B5%8B%E8%AF%95/%E7%AC%AC1%E7%AB%A0/</url>
    <content><![CDATA[<h1 id="什么是软件测试？"><a href="#什么是软件测试？" class="headerlink" title="什么是软件测试？"></a>什么是软件测试？</h1><p>测试不单纯是一个发现错误的过程，而且是软件质量保证的主要职能。</p>
<p>测试是程序的执行过程，目的在于发现问题。<br>测试是为了证明程序有错，而不是证明程序无错误。<br>一个好的测试用例在于能发现至今未发现的错误。<br>一个成功的测试是发现了至今未发现的错误的测试。</p>
<span id="more"></span>
<h1 id="软件测试的目的"><a href="#软件测试的目的" class="headerlink" title="软件测试的目的"></a>软件测试的目的</h1><ul>
<li><strong>最少的人力、物力、时间</strong>找出软件中潜在的各种错误和缺陷，全面评估的提高软件质量，以及揭示质量风险，控制项目风险；</li>
<li>通过分析测试过程中发现的问题可以帮助发现当前开发工作所采用的软件过程的缺陷，以便进行软件过程改进；同时通过对测试结果的分析整理，可修正软件开发规则，并为<strong>软件可靠性分析提供相关的依据</strong>。</li>
<li>评价程序或系统的属性，<strong>对软件质量进行度量和评估</strong>，以验证软件的质量满足用户的需求，为用户选择、接受软件提供有力的依据。</li>
</ul>
<h2 id="软件测试的原则："><a href="#软件测试的原则：" class="headerlink" title="软件测试的原则："></a>软件测试的原则：</h2><p>( 1 )测试应该尽早进行，最好在需求阶段就开始介入，因为最严重的错误不外乎是系统不能满足用户的需求。<br>( 2 )程序员应该避免检查自己的程序，软件测试应该由第三方来负责。<br>( 3 )设计测试用例时应考虑到合法的输入和不合法的输入以及各种边界条件， 特殊情况下还要制造极端状态和意外状态，如网络异常中断、电源断电等。<br>( 4 )应该充分注意测试中的<strong>群集现象</strong>。（在所测程序段中，若发现错误数目多，则残存错误数目也比较多。这种错误群集性现象，已为许多程序的测试实践所证实。）<br>( 5) 对错误结果要进行一个确认过程。一般由 A 测试出来的错误， —定要由B 来确认。严重的错误可以召开评审会议进行讨论和分析，对测试结果要进行严格地确认，是否真的存在这个问题以及严重程度等。<br>( 6 ) 制定严格的测试计划。—定要制定测试计划，并且要有指导性。测试时间安排尽量宽松， 不要希望在极短的时间内完成一个高水平的测试。<br>( 7 ) 妥善保存测试计划、 测试用例、出错统计和最终分析报告，为维护提供方便。</p>
<h1 id="软件测试和软件质量保证"><a href="#软件测试和软件质量保证" class="headerlink" title="软件测试和软件质量保证"></a>软件测试和软件质量保证</h1><p>软件质量保证和软件测试二者之间既存在包含有存交叉的关系。</p>
<p>软件测试能够找出软件缺陷，确保软件产品满足需求。但测试不是质量保证，二者并不等同。测试可以查找错误并进行修改，从而提高软件产品的质量。软件质量保证测试<strong>避免错误</strong>以求高质量并且还有其他方面的措施以保证质量问题。</p>
<p>从共同点角度看：<br>目的都是尽力确保软件产品满足需求。<br>都是贯穿软件开发生命周期。</p>
<p>测试 VS SQA：（SQA：软件质量保证）</p>
<ul>
<li>SQA指导、监督软件测试的计划和执行，督促测试工作的结果客观、准确和有效，并协助测试流程的改进。</li>
<li>软件测试是SQA重要手段之一，为SQA提供所需的数据，作为质量评价的客观依据。</li>
<li>SQA是一项管理工作， 侧重于对流程的评审和监控。</li>
<li>测试是一项技术性的工作，侧重对产品进行评估和验证。</li>
</ul>
<p>软件测试系统主要包括：</p>
<ul>
<li>制定测试计划</li>
<li>测试设计</li>
<li>实施测试</li>
<li>建立和跟新测试文档</li>
</ul>
<p>软件质量保证主要工作：</p>
<ul>
<li>制定软件质量要求</li>
<li>组织正式度量</li>
<li>软件测试管理</li>
<li>对软件的变更进行控制</li>
<li>对软件质量进行度量</li>
<li>对软件质量情况及时记录和报告</li>
</ul>
<h1 id="软件测试的分类"><a href="#软件测试的分类" class="headerlink" title="软件测试的分类"></a>软件测试的分类</h1><h2 id="按测试阶段或测试步骤划分："><a href="#按测试阶段或测试步骤划分：" class="headerlink" title="按测试阶段或测试步骤划分："></a>按测试阶段或测试步骤划分：</h2><p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210614163029.png" alt="20210614163029"><br>这种划分来自于软件的开发过程，目的是验证软件开发过程各阶段的工作是否符合需求和设计要求。</p>
<h3 id="单元测试："><a href="#单元测试：" class="headerlink" title="单元测试："></a>单元测试：</h3><p>在软件单元完成编码后，首先进行单元测试，验证软件单元是否正确实现了规定的功能和接口等要求；</p>
<h3 id="集成测试："><a href="#集成测试：" class="headerlink" title="集成测试："></a>集成测试：</h3><p>在确认没有问题后，将软件单元组装在一起进行集成测试，验证软件是否满足设计要求；</p>
<h3 id="确认测试-有效性、合格性-："><a href="#确认测试-有效性、合格性-：" class="headerlink" title="确认测试(有效性、合格性)："></a>确认测试(有效性、合格性)：</h3><p>在确认没有问题后，将软件单元组装在一起进行集成测试，验证软件是否满足设计要求；<br>在确认测试中，按照测试的方式又有Alpha测试和Beta则试。<br>Alpha测试：在开发方的场所，用户在开发人员的指导下对软件进行测试，<br>   测试是受控的，开发人员负责记录错误和使用中出现的问题。<br>Beta测试：测试是由软件的最终用户在一个或多个用户场所来进行，开<br>   发人员通常不在现场，整个测试不被控制，用户记录下所有的问题，<br>   并报告给开发人员。</p>
<h3 id="系统测试："><a href="#系统测试：" class="headerlink" title="系统测试："></a>系统测试：</h3><p>最后使通过确认测试的软件与其他系统成分组合在一起，并使其在实际运行环境中运行，进行系统测试。</p>
<h2 id="按测试对象划分"><a href="#按测试对象划分" class="headerlink" title="按测试对象划分"></a>按测试对象划分</h2><p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210614163347.png" alt="20210614163347"></p>
<p><strong>软件配置项</strong>是为配置管理而设计的并且能够满足最终用户功能的软件，在配置管理过程中作为单个实体对待。</p>
<p><strong>软件部件</strong>是构成软件配置项或系统的部分之一，在功能上或逻辑上具有一定的<strong>独立性</strong>，且可以进一步划分为其他部件。</p>
<h2 id="按测试技术划分"><a href="#按测试技术划分" class="headerlink" title="按测试技术划分"></a>按测试技术划分</h2><p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210614171439.png" alt="20210614171439"><br>按使用的测试技术来分，有静态测试和动态测试，他们代表了程序不同的运行状态。动态测试又分为白盒测试和黑盒测试，白盒测试包括逻辑覆盖测试、域测试、程序变异测试、路径测试、符号测试等，黑盒测试包括功能测试、强度测试、边界值测试、随机测试等。</p>
<h2 id="按软件质量特性划分"><a href="#按软件质量特性划分" class="headerlink" title="按软件质量特性划分"></a>按软件质量特性划分</h2><p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210614171503.png" alt="20210614171503"></p>
<h2 id="按测试项目划分"><a href="#按测试项目划分" class="headerlink" title="按测试项目划分"></a>按测试项目划分</h2><p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210614171517.png" alt="20210614171517"></p>
<ul>
<li>功能测试： 主要针对软件/产品需求规格说明的测试，验证功能是否符合需求，包括原定功能的检验、是否有冗余的功能。</li>
<li>健壮性测试： 侧重于软件容错能力的测试，主要是验证软件对各种异常情况（如数据边界、非法数据、异常中断等）是否进行正确处理。</li>
<li>恢复测试： 对每一类导致恢复或重构的情况进行测试，验证软件自身运行的恢复或重构，软件控制的系统的恢复或重构以及系统控制的软件的恢复或重构。</li>
<li>人机界面测试： 对人机界面提供的操作进行测试，测试人机界面的的有效性、便捷性、直观性等，如用户界面是否友好、是否方便易用、设计是否合理、位置是否准确等。</li>
<li>接口测试： 测试被测对象与其他软件(包括软件单元、部件、配置项)或硬件的接口。</li>
<li>强度测试： 使软件在其设计能力的极限状态下、进而超过此极限下运行，检验软件对异常情况的抵抗能力。</li>
<li>可用性测试： 对“用户友好性”的测试。受主观因素影响，且取决于最终用户。用户面谈、调查和其他技术都可使用。</li>
<li>压力测试： 对系统不断施加压力的测试，通过确定一个系统的瓶颈或者不能接收的性能点，获得系统能提供的最大服务级别的测试。例如测试一个Web站点在大量的负荷下，何时系统的响应会退化或失败。压力测试注重的是外界不断施压。</li>
<li>性能测试： 测试软件是否达到需求规格说明中规定的各类性能指标，并满足相关的约束和限制条件。</li>
<li>兼容测试： 测试软件在一个特定的硬件/软件/操作系统/网络等环境下的性能如何。</li>
<li>用户界面测试： 对系统的界面进行测试，测试用户界面是否友好、是否方便易用、设计是否合理、位置是否正确等一系列界面问题。</li>
<li>安全性测试： 测试软件在没有授权的内部或者外部的用户的攻击或者恶意破坏时如何进行处理，是否能保证软件和数据的安全。</li>
<li>可靠性测试： 这里是比较狭义的可靠性测试，它主要是对系统能否稳定运行进行一个估计。</li>
<li>安装测试：安装测试主要检验软件是否可以正确安装，安装文件的各项设置是否有效，安装后是否影响原系统，卸载后是否删除干净，是否影响原系统。</li>
<li>文档测试： 测试开发过程中生成的文档，以需求规格说明、软件设计、用户手册、安装手册等为主，检验文档是否和实际存在差别。文档测试不需要编写测试用例。</li>
</ul>
<h1 id="软件测试这些种类之间密切的关系："><a href="#软件测试这些种类之间密切的关系：" class="headerlink" title="软件测试这些种类之间密切的关系："></a>软件测试这些种类之间密切的关系：</h1><p>在软件开发过程中，<strong>不同阶段的测试对应了对不同软件对象的测试</strong>，下图所示为这种对应关系。<br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210614171729.png" alt="20210614171729"><br>在不同的测试阶段，由于<strong>测试目标、对象、要求的不同而采用不同的测试技术</strong>。下表所列为一般情况下不同测试对象中采用的测试技术。<br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210614171811.png" alt="20210614171811"></p>
<p>在不同的阶段对<strong>不同对象的测试包含不同的测试项目</strong>。例如，确认测试可包含功能测试、性能测试、人机界面测试；组合测试可包括接口测试；系统测试可包括可靠性测试、强度测试等。同时，对各阶段和对象的测试完整性要求也不同。</p>
<h1 id="软件缺陷的概念"><a href="#软件缺陷的概念" class="headerlink" title="软件缺陷的概念"></a>软件缺陷的概念</h1><ul>
<li>软件未达到产品说明书中标明的功能。</li>
<li>软件出现了产品说明书中指明的不会出现的功能。  </li>
<li>软件功能超出了产品说明书中指明的范围。  </li>
<li>软件未达到产品说明书中指明应达到的目。  </li>
<li>软件难以理解和使用、运行速度慢，或最终用户认为不好。<h2 id="软件缺陷的等级分类："><a href="#软件缺陷的等级分类：" class="headerlink" title="软件缺陷的等级分类："></a>软件缺陷的等级分类：</h2><h3 id="致命错误"><a href="#致命错误" class="headerlink" title="致命错误"></a>致命错误</h3>不能执行正常工作或重要功能、导致系统崩溃或资源严重不足、造成数据丢失。<br>包括： </li>
</ul>
<p>1) 系统或程序引起死机 ；<br>2) 系统崩溃、意外退出 ；<br>3) 程序死循环、数据库发生死锁；<br>4) 因错误操作导致的程序中断</p>
<h3 id="严重错误"><a href="#严重错误" class="headerlink" title="严重错误"></a>严重错误</h3><p>严重影响系统要求或基本功能实现、且不存在可替代的解决方法或方式。<br>包括： <br>1) 功能未实现或实现错误；<br>2) 数据计算错误、产生错误结果 ；<br>3) 数据通讯错误、程序接口错误；<br>4) 需求功能流程错误或需求缺失 ；<br>5) 数据约束错误、数据输入输出错误 ；<br>6) 交易报错(交易报错导致交易无法继续等) </p>
<h3 id="一般错误"><a href="#一般错误" class="headerlink" title="一般错误"></a>一般错误</h3><p>影响系统要求或基本功能实现，但存在可替代的解决方法或方式。<br>包括： <br>1) 打印内容、格式错误； <br>2) 简单的输入限制未放在前台进行控制 ；<br>3) 删除操作未给出提示 ；<br>4) 操作界面信息错误（包括数据窗口内列名定义、含义是否一致）；<br>5) 数据库表中有过多的空字段。 </p>
<h3 id="轻微错误"><a href="#轻微错误" class="headerlink" title="轻微错误"></a>轻微错误</h3><p>操作不便或遇到麻烦，但不影响执行工作或使用重要功能。属于该级别的缺陷<br>包括： <br>1) 界面不规范,域控制不规范； <br>2) 辅助说明描述不清楚、提示窗口文字未采用行业术语；<br>3) 输入输出不规范 ；<br>4) 长时间操作未给用户提示 ；<br>5) 可输入区域和只读区域没有明显的区分标志；<br>6) 控件没有对齐、标点符号丢失或不正确 7) 需求瑕疵包括需求错别字等。</p>
<h1 id="软件缺陷的属性"><a href="#软件缺陷的属性" class="headerlink" title="软件缺陷的属性"></a>软件缺陷的属性</h1><p>一般地发现缺陷后，需要提交缺陷单，通常情况下，缺陷单需要包含以下的内容：<br>缺陷标识(Identifier)<br>缺项类型(Type)<br>缺陷严重程度(Severity)<br>缺陷优先级(Priority)<br>缺陷状态(Status)<br>缺陷起源(Origin)<br>缺陷来源(Source)<br>附件(Attachment)<br>测试人员(Created by)<br>处理人员（Assign to）<br>…<br>缺陷标识(Identifier)： 缺陷标识是标记某个缺陷的一组符号。每个缺陷必须有一个唯一的标识。<br>缺陷类型(Type)：缺陷类型是根据缺陷的自然属性划分的缺陷种类。类别通常可以分为以下几种情况，如下表所示。<br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210614194510.png" alt="20210614194510"><br>缺陷严重程度 (Severity) ： 缺陷严重程度是指因缺陷引起的故障对软件产品的影响程度。如下表所示。<br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210614194726.png" alt="20210614194726"><br>缺陷优先级(Priority)： 缺陷的优先级指缺陷必须被修复的紧急程度。如下表所示。<br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210614194744.png" alt="20210614194744"><br>缺陷状态(Status) ： 缺陷状态指缺陷通过一个跟踪修复过程的进展情况。如下表所示。<br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210614200137.png" alt="20210614200137"><br>缺陷起源(Origin) ：缺陷起源指缺陷引起的故障或事件第一次被检测到的阶段。如下表所示。<br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210614200850.png" alt="20210614200850"><br>缺陷来源(Source)： 缺陷来源指引起缺陷的起因。如下表所示。<br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210614201623.png" alt="20210614201623"><br>缺陷根源： 缺陷根源指发生错误的根本因素。如下表所示。<br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210614201730.png" alt="20210614201730"></p>
<h1 id="缺陷生命周期"><a href="#缺陷生命周期" class="headerlink" title="缺陷生命周期"></a>缺陷生命周期</h1><p>在软件开发过程中，缺陷拥有自身的生命周期。缺陷在走完其生命周期最终会关闭。确定的生命周期保证了过程的标准化。缺陷在其生命周期中会处于许多不同的状态。<br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210614203324.png" alt="20210614203324"><br>新建：当缺陷被第一次递交的时候，它的状态即为“新建”。这也就是说缺陷未被确认其是否真正是一个缺陷。<br>打开：在测试者提交一个缺陷后，测试组长确认其确实为一个缺陷的时候他会把状态置为“打开”。<br>分配：一旦缺陷被测试经理置为“打开”，他会把缺陷交给相应的开发人员或者开发组。这时缺陷状态变更为“分配”。<br>测试：当开发人员修复缺陷后，他会把缺陷提交给测试组进行新一轮的测试。在开发人员公布已修复缺陷的程序之前，他会把缺陷状态置为“测试”。这时表明缺陷已经修复并且已经交给了测试组。<br>延期：缺陷状态被置为“延迟的”意味着缺陷将会在下一个版本中被修复。将缺陷置为“延迟的”原因有许多种。有些由于缺陷优先级不高，有些由于时间紧，有些是因为缺陷对软件不会造成太大影响。<br>拒绝：如果开发人员不认为其是一个缺陷，他会不接受。他会把缺陷状态置为“拒绝”。<br>确认：一旦缺陷被修复，它就会被置为“测试”，测试人员会执行测试。如果缺陷不再出现，这就证明缺陷被修复了，同时其状态被置为“确认”。<br>再次打开：如果缺陷被开发人员修复后仍然存在，测试人员会把缺陷状态置为“再次打开”。缺陷即将再次穿越其生命周期。<br>关闭：一旦缺陷被修复，测试人员会对其进行测试。如果测试人员认为缺陷不存在了，他会把缺陷状态置为“关闭”。这个状态意味着缺陷被修复，通过了测试并且核实确实如此。</p>
<h1 id="软件测试充分性问题"><a href="#软件测试充分性问题" class="headerlink" title="软件测试充分性问题"></a>软件测试充分性问题</h1><p>成功测试：</p>
<ul>
<li>软件在所有的（或是足够多的）测试数据上是正确。</li>
<li>数据是充分的。即软件在测试数据上的表现能够充分地反映软件的总体表现。</li>
</ul>
<p>检查软件在测试数据上行为的正确性称为测试的“先知者问题”。判断一个测试数据集合是否充分称为充分性问题。</p>
<p>软件测试是使用经过设计获得的<strong>有限测试数据</strong>来测试软件，以发现软件的缺陷。<br>软件的实际运行空间是非常巨大的，有时甚至是无限的。<br>在有限的测试输入数据空间上的软件行为是否能够充分反映在无限的软件运行空间的行为，这就是<strong>软件测试的充分性问题。</strong><br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210614204747.png" alt="20210614204747"></p>
<h2 id="软件测试充分性准则"><a href="#软件测试充分性准则" class="headerlink" title="软件测试充分性准则"></a>软件测试充分性准则</h2><p>定义1： 谓词形式的充分性准则<br>     设𝑷为测试程序，𝑫是一个可数集合，为程序𝑷的输入域，对∀𝒅∈𝑫,𝑷(𝒅)为程序的输出；<br>𝑺是𝑫→𝑷（𝑫）二元映射关系的一个子集，表示软件规格说明的集合；𝑻是测试数据的集合，则谓词形式的软件测试准则𝑪是一个定义在𝑷×𝑺×𝑻的谓词，即：<br>                      𝑪:𝑷×𝑺×𝑻→{𝒕𝒓𝒖𝒆，𝒇𝒂𝒍𝒔𝒆}<br>𝑪:(𝒕,𝒑,𝒔)=𝒕𝒓𝒖𝒆，表示根据充分性准则𝑪和规格说明𝒔，用测试数据集𝒕测试程序𝒑是充分的，否则不充分。</p>
<p>定义2 ：度量函数形式的充分性准则<br>一个测试数据的充分性准则M是P×S×T到区间[0,1]上的映射，用数学形式可表示为：<br>M（s,p,t）→[0,1]<br>M（s,p,t）=r表示根据规格说明s和充分性准则M，用测试数据集t来测试程序p的充分度r，显然0≪r≪1，r越大说明测试的充分性。</p>
<p>定义3：充分性准则的可靠性<br>软件测试充分性准则C是可靠的，若对任意的程序p和规格说明S，具有：<br>[∀t∈T,C(p,s,t)=&gt;Ok(p,s,t)]∪[∀t∈T,C(p,s,t)=&gt;¬Ok(p,s,t)]<br>其中，Ok（p,s,t）表示程序p在t中的所有测试数据上相对于规格说明s是正确的。<br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210614204918.png" alt="20210614204918"></p>
<p>定义4：充分性准则的有效性<br>软件测试充分性准则C是有效的，若对任意的程序p和规格说明S，均有：<br>                           [¬Cr(p,s)]=&gt;[(∃t∈T)C(p,s,t)=true]∩[¬Ok(p,s,t)]<br>其中，Cr（p,s）是指程序p对于规格说明s是正确的。表示程序p在t中的所有测试数据上相对于规格说明s是正确的。<br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210614204933.png" alt="20210614204933"></p>
<p>测试充分性准则是在<strong>测试之前</strong>，由相关各方根据质量、成本和进度等因素规定的，表现为对测试的要求与软件需求和软件现实有关，具有以下的一些基本性质：</p>
<ol>
<li>空测试对于任何软件测试都是<strong>不充分的。</strong></li>
<li>对任何软件都存在有限的充分测试数据集，这一性质称为<strong>有限性。</strong><br>3）如果一个测试数据集对一个软件系统的测试是充分的，那么在增加一些测试用例也是充分的，这一性质称为<strong>单调性。</strong><br>4）软件越复杂，需要的测试用例就越多，这一性质称为<strong>复杂性。</strong><br>5）测试得越多，进一步测试所能得到的充分性增长就越少，这一性质称为<strong>回报递减律。</strong><h2 id="软件测试充分性公理"><a href="#软件测试充分性公理" class="headerlink" title="软件测试充分性公理"></a>软件测试充分性公理</h2>基于程序的测试数据集充分性公理<br>1、非外延性公理：如果有两个功能相同而实现不同的程序，对其中一个是充分的测试数据集对另一个不一定是充分的。<br>2、多重修改公理：如果两个程序具有相同的语法结构，对一个是充分的测试数据集对另一个不一定是充分的。<br>3、不可分解公理：对一个程序进行了充分的测试，并不表示对其中的成分都进行了充分的测试。<br>4、非复合性公理：对程序各单元是充分的测试数据集并不一定对整个程序（集成后）是充分的。<h2 id="软件测试覆盖测试"><a href="#软件测试覆盖测试" class="headerlink" title="软件测试覆盖测试"></a>软件测试覆盖测试</h2>语句覆盖（Statement Coverage ）应用<br>概念：<pre><code>  在被测试后，程序中被执行到的可执行语句的比率。 
</code></pre>
公式：<pre><code>  语句覆盖率=（至少被执行一次的可执行语句的数量）/（可执行语句的总数）
</code></pre>
</li>
</ol>
<h1 id="软件测试原则"><a href="#软件测试原则" class="headerlink" title="软件测试原则"></a>软件测试原则</h1><p>一、Testing shows presence of defects<br>测试显示软件存在缺陷<br>二、Exhaustive testing is impossible<br>穷尽测试是不可能的<br>三、Testing early<br>测试尽早介入<br>四、Defect clustering<br>缺陷集群性（2/8原则）<br>五、Pesticide Paradox<br>杀虫剂悖论<br>六、Testing is context dependent<br>测试活动依赖于测试内容<br>七、Absence of error - fallacy<br>没有错误是好是谬论</p>
<p>从不同的角度（<strong>用户、开发者</strong>）出发，软件测试会派生出两种不同的测试原则：</p>
<ul>
<li>用户希望通过软件测试能充分暴露软件中存在的问题和故障；</li>
<li>开发者希望测试能表明软件产品已经正确地实现了用户的需求，没有软件故障存在。</li>
</ul>
<p>1、完全测试程序是不可能的<br>不可行的原因主要有以下几个方面：</p>
<ul>
<li>程序输入量太大；</li>
<li>程序输出量太多；</li>
<li>软件实现途径太多。</li>
</ul>
<p>2、软件测试是有风险的<br>不能做到完全测试，不测试又会漏掉一些软件故障。我们的目标应该是使有限的测试投资获得最大的收益，即以有限的测试用例检查出尽可能多的软件故障。</p>
<p>3、测试无法显示隐藏的软件故障<br>通过测试可以查找并报告发现软件故障，但是不能保证软件故障全部被找到，也无法报告隐藏的软件故障。继续测试，可能还会发现一些。</p>
<p>4、存在的故障数量与发现的故障数成正比<br>在典型程序中，某些程序段看来比其他程序段更容易出错，例如，在IBM/370操作系统中，人们注意到一个现象：47%的软件故障（由用户发现的）只与系统中4%的程序模块有关。<br>原因可能有以下几种：</p>
<ul>
<li>程序员怠倦。程序员编写一天代码或许情绪还不错，第二天、第三天可能就会烦躁不安了。一个软件故障很可能是暴露附近更多软件故障的信号。</li>
<li>程序员往往犯同样的错误。每个人都有自己的偏好，一个程序员总是反复犯自己容易犯的错误。</li>
<li>某些软件故障可能是冰山之巅。某些看似无关的软件故障可能是由一个极其严重的原因造成。</li>
</ul>
<p>5、杀虫剂现象<br>1990年 Boris Beizer在其《软件测试技术》（第二版）一书中引用了“杀虫剂现象”一词，用于描述软件测试进行的越多，其程序免疫力越强的现象。<br>为了避免杀虫剂现象的发生，应该根据不同的测试方法开发测试用例，对程序的不同部分进行测试，以找出更多的软件故障。</p>
<p>6、并非所有软件故障都能修复<br>不修复软件故障的原因可能有以下几种</p>
<ul>
<li>没有足够的时间。</li>
<li>不值得修复。</li>
<li>修复风险太大。</li>
<li>不算真正的软件故障。</li>
</ul>
<p>7、不要丢弃测试用例<br>除非确实没有用，一般不要丢弃测试用例。</p>
<p>8、应避免测试自己编写的程序<br>并不是说程序员不可能测试自己的程序。只是相比之下，如果由他人来进行测试，可能会更有效，更成功。</p>
<p>9、软件测试是一项复杂的，具有创造性的和需要高度智慧的挑战性任务<br>随着软件规模和复杂性的增加，测试一个大型软件所要求的创造力，可能超过设计那个软件所要求的创造力。现在，生产低质软件的代价太高了，软件行业也发展到强制使用软件测试人员的时代。</p>
<h1 id="测试停止准则"><a href="#测试停止准则" class="headerlink" title="测试停止准则"></a>测试停止准则</h1><p>在实际工作中，常用的<strong>停止测试的标准有五类。</strong></p>
<ul>
<li>第一类标准:测试超过了预定的时间，停止测试。</li>
<li>第二类标准:执行了所有测试用例但没有发现故障，停止测试。</li>
<li>第三类标准:使用特定的测试用例方法作为判断测试停止的基础。</li>
<li>第四类标准:正面指出测试完成的要求，如发现并修改70个软件故障。</li>
<li>第五类标准:根据单位时间内查出故障的数量决定是否停止测试。</li>
</ul>
]]></content>
      <categories>
        <category>软件质量保证与测试</category>
      </categories>
      <tags>
        <tag>软件质量保证与测试</tag>
      </tags>
  </entry>
  <entry>
    <title>Python基础</title>
    <url>/2021/05/11/Python/%E7%AC%AC%E4%BA%8C%E7%AB%A0/</url>
    <content><![CDATA[<h1 id="Python常用内置对象"><a href="#Python常用内置对象" class="headerlink" title="Python常用内置对象"></a>Python常用内置对象</h1><ul>
<li>对象是python语言中最基本的概念，<strong>在python中处理的一切都是对象。</strong></li>
<li>python中有许多内置对象可供编程者使用，<strong>内置对象可直接使用</strong>，如数字、字符串、列表、del等。</li>
<li><strong>非内置对象需要导入模块才能使用</strong>，如正弦函数sin(x)，随机数产生函数random( )等。<span id="more"></span>
<img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210530214231.png" alt="20210530214231"><br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210530214304.png" alt="20210530214304"></li>
</ul>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>Python使用单引号和双引号来表示字符串是一样的。<br>1．创建和访问字符串<br>创建字符串很简单，只要为变量分配一个值即可。例如：<br>var1 = ‘Hello World!’<br>var2 = “Python Programming “<br>2．Python转义字符<br>需要在字符中使用特殊字符时，Python用反斜杠( \ )转义字符<br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210531133248.png" alt="20210531133248"><br>3．Python字符串运算符<br>Python字符串运算符如表2-2所示<br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210531133804.png" alt="20210531133804"><br>4．字符串格式化<br>Python 支持格式化字符串的输出。<br>在 Python 中，字符串格式化使用与 C语言中printf函数一样的语法。</p>
<pre><code> print (&quot;我的名字是 %s 年龄是 %d &quot; % (&#39;xmj&#39;, 41))
</code></pre>
<p>Python用一个元祖将多个值传递给模板，每个值对应一个字符串格式符。上例将’xmj’插入到%s处，41插入到%d处。<br>所以输出结果：<br>         我的名字是 xmj 年龄是 41<br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210531134532.png" alt="20210531134532"></p>
<h2 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h2><p>Python支持布尔类型的数据，布尔类型只有True和False两种值。<br>and 与运算<br>or   或运算<br>not  非运算<br>会被认为是FALSE：为0的数字，包括0,0.0；空字符串’ ‘，””；表示空值的None；空集合，包括空元祖(),空序列[],空字典{}；其他的值都为TRUE。<br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210531143051.png" alt="20210531143051"><br>在Python中，逻辑值True和False作为数值，则分别是整型值1和0参与运算。</p>
<h2 id="空值"><a href="#空值" class="headerlink" title="空值"></a>空值</h2><p>空值是Python里一个特殊的值，用None表示。它不支持任何运算也没有任何内置函数方法。None和任何其他的数据类型比较永远返回False。在<strong>Python 中未指定返回值的函数会自动返回None。</strong></p>
<h2 id="Python数字类型转换"><a href="#Python数字类型转换" class="headerlink" title="Python数字类型转换"></a>Python数字类型转换</h2><p>x=20                    #八进制为24<br>y=345.6<br>print(oct(x))                 #打印结果是0o24<br>print(int(y))                 #打印结果是345<br>print(float(x))                 #打印结果是20.0<br>print(chr(65))                 # A的ASCII为65，打印结果是A<br>print(ord(‘B’))                 # B的ASCII为66，打印结果是66</p>
<h1 id="常量和变量"><a href="#常量和变量" class="headerlink" title="常量和变量"></a>常量和变量</h1><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量在程序中就是用一个变量名表示，变量名必须是大小写英文、数字和_的组合，且<strong>不能用数字开头</strong>，比如：<br>在Python中，等号=是赋值语句，可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量，例如：<br>a = 123        # a是整数<br>a = ‘ABC’        # a变为字符串<br>这种变量本身类型不固定的语言称之为<strong>动态语言</strong>，与之对应的是静态语言。</p>
<h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>所谓常量就是不能变的变量，比如常用的数学常数π就是一个常量。在Python中，通常用<strong>全部大写的变量名表示常量</strong>：<br>PI = 3.14159265359<br>但事实上PI仍然是一个变量，Python根本没有任何机制保证PI不会被改变，所以，用全部大写的变量名表示常量只是一个习惯上的用法，实际上是可以改变变量PI的值。</p>
<h1 id="运算符与表达式"><a href="#运算符与表达式" class="headerlink" title="运算符与表达式"></a>运算符与表达式</h1><p>Python语言支持运算符有以下几种类型<br>• 算术运算符<br>• 比较(即关系)运算符<br>• 赋值运算符<br>• 逻辑运算符<br>• 位运算符<br>• 成员操作符<br>• 标识操作符</p>
<h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p>算术运算符实现数学运算<br>假设变量a=10和变量b=20。<br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210602165934.png" alt="20210602165934"></p>
<h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><p>关系运算符用于两个值进行比较，运算结果为True（真）或False（假）<br>假设其中变量a=10和变量b=20。<br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210602171919.png" alt="20210602171919"></p>
<h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>Python中提供了三种逻辑运算符，它们是：<br>and（逻辑与，二元运算符）<br>or  （逻辑或，二元运算符）<br>not （逻辑非，一元运算符）<br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210602172913.png" alt="20210602172913"></p>
<h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p>赋值运算符“=”的一般格式为：<br>变量=表达式<br>它表示将其右侧的表达式求出结果，赋给其左侧的变量。例如：<br>  i=3*(4+5)            #i的值变为27</p>
<h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><p>位（bit）是计算机中表示信息的最小单位，位运算符作用于位和位操作。<br>Python中位运算符如下：<br>按位与（&amp;）、按位或（|）、按位异或（＾）、按位求反（~）、左移（&lt;&lt;）、右移（&gt;&gt;）。<br>位运算符是对其操作数按其二进制形式逐位进行运算。</p>
<h2 id="Python成员运算"><a href="#Python成员运算" class="headerlink" title="Python成员运算"></a>Python成员运算</h2><p>Python成员运算符判断序列中是否有某个成员<br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210602173607.png" alt="20210602173607"></p>
<h2 id="Python标识运算符"><a href="#Python标识运算符" class="headerlink" title="Python标识运算符"></a>Python标识运算符</h2><p>标识符比较两个对象的内存位置<br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210602173651.png" alt="20210602173651"></p>
<p>在Python中，整数和短小的字符，Python都会缓存这些对象，以便重复使用。当我们创建多个等于1的引用时，实际上是让所有这些引用指向同一个对象。<br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210603095000.png" alt="20210603095000"><br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210603095027.png" alt="20210603095027"></p>
<h2 id="Python运算符优先级"><a href="#Python运算符优先级" class="headerlink" title="Python运算符优先级"></a>Python运算符优先级</h2><p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210603095407.png" alt="20210603095407"></p>
<h2 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h2><p>表达式是一个或多个运算的组合。Python语言的表达式与其他语言的表达式没有显著的区别。每个符合Python语言规则的表达式的计算都是一个确定的值。对于常量、变量的运算和对于函数的调用都可以构成表达式。<br>序列、函数、对象都可以成为表达式一部分</p>
<h1 id="序列数据结构"><a href="#序列数据结构" class="headerlink" title="序列数据结构"></a>序列数据结构</h1><p>数据结构是计算机存储、组织数据的方式。<strong>序列</strong>是Python中最基本的数据结构。<br>序列中的每个元素都分配一个数字即它的位置或索引，第一个索引是0，第二个索引是1，依此类推。序列都可以进行的操作包括索引，截取（切片），加，乘，成员检查。此外，Python已经内置确定序列的长度以及确定最大和最小的元素的方法。<br>Python内置序列类型最常见的是<strong>列表、元组、字符串</strong>。<br>另外，Python提供了<strong>字典和集合</strong>这样的数据结构，它们属于无顺序的数据集合体，不能通过位置索引号来访问数据元素。</p>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>列表（list）是最常用的Python数据类型，列表的数据项不需要具有相同的类型。列表类似其他语言的数组，但功能比数组强大的多。<br>创建一个列表，只要把逗号分隔的不同的数据项使用方括号括起来即可。实例如下：<br>list1 = [‘中国’, ‘美国’, 1997, 2000];<br>list2 = [1, 2, 3, 4, 5 ];<br>列表索引从0开始。列表可以进行截取（切片）、组合等。</p>
<h3 id="删除列表元素"><a href="#删除列表元素" class="headerlink" title="删除列表元素"></a><strong>删除列表元素</strong></h3><p>方法一：使用 del 语句来删除列表的的元素<br>del a[1]<br>方法二：使用 remove()方法来删除列表的元素</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; [1, 2, 3, 4, 5, 6, 7 ];</span><br><span class="line">a.remove(2)</span><br></pre></td></tr></table></figure>
<p>方法三：使用pop()方法方法来删除列表的指定位置的元素，无参数时删除最后一个元素<br>a.pop(1)</p>
<h3 id="添加列表元素"><a href="#添加列表元素" class="headerlink" title="添加列表元素"></a><strong>添加列表元素</strong></h3><p>可以使用 append()方法在列表末尾添加元素</p>
<h3 id="定义多维列表"><a href="#定义多维列表" class="headerlink" title="定义多维列表"></a><strong>定义多维列表</strong></h3><p>可以将多维列表视为列表的嵌套，即多维列表的元素值也是一个列表，只是维度比父列表小一。</p>
<h3 id="Python列表脚本操作符"><a href="#Python列表脚本操作符" class="headerlink" title="Python列表脚本操作符"></a><strong>Python列表脚本操作符</strong></h3><p>列表对 + 和 * 的操作符与字符串相似。+ 号用于组合列表，* 号用于重复列表<br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210603103614.png" alt="20210603103614"></p>
<h3 id="Python列表截取"><a href="#Python列表截取" class="headerlink" title="Python列表截取"></a><strong>Python列表截取</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210603103629.png" alt="20210603103629"></p>
<h3 id="Python列表内置函数和方法"><a href="#Python列表内置函数和方法" class="headerlink" title="Python列表内置函数和方法"></a><strong>Python列表内置函数和方法</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210603103725.png" alt="20210603103725"></p>
<h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p>Python的元组（tuple）与列表类似，不同之处在于元组的元素不能修改。元组使用小括号()，列表使用方括号[]。元组中的元素类型也可以不相同。</p>
<h3 id="元组连接"><a href="#元组连接" class="headerlink" title="元组连接"></a>元组连接</h3><p>元组中的元素值是不允许修改的，但可以对元组进行连接组合<br>连接元组，创建一个新的元组</p>
<h3 id="删除元组"><a href="#删除元组" class="headerlink" title="删除元组"></a>删除元组</h3><p>元组中的元素值是不允许删除的，但可以使用del语句来删除整个元组。</p>
<h3 id="元组与列表转换"><a href="#元组与列表转换" class="headerlink" title="元组与列表转换"></a>元组与列表转换</h3><p>可以使用下面方法将元祖转换为列表：<br>列表对象=list(元组对象)</p>
<p>可以使用下面方法将列表转换为元祖：<br>元组对象= tuple (列表对象)</p>
<h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>Python字典（dict）是一种可变容器模型，且可存储任意类型对象，如字符串、数字、元组等。字典也被称作关联数组或哈希表。<br>键值对key-value</p>
<p>dict1 = { ‘abc’: 456 };<br>dict2 = { ‘abc’: 123, 98.6: 37 };</p>
<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>集合（set）是一个无序不重复元素的序列。集合基本功能是进行成员关系测试和删除重复元素。</p>
]]></content>
      <categories>
        <category>Python基础</category>
      </categories>
      <tags>
        <tag>Python基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Python概述</title>
    <url>/2021/05/10/Python/%E7%AC%AC%E4%B8%80%E7%AB%A0/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210529212620.png" alt="20210529212620"></p>
<span id="more"></span>
<h1 id="Python的简介"><a href="#Python的简介" class="headerlink" title="Python的简介"></a>Python的简介</h1><p>面向对象、解释型的编程语言<br>使用缩进作为逻辑层次<br>Python的缺点:运行效率低<br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210529213253.png" alt="20210529213253"></p>
<p>缩进<br>     Python程序是依靠代码块的缩进来体现代码之间的逻辑关系的</p>
<p>注释</p>
<ul>
<li>方法一：以#开始，表示本行#之后的内容为注释。</li>
<li>方法二：三个引号‘’‘…’‘’或三个双引号”””…”””。</li>
</ul>
<p>常量名所有字母大写，由下划线连接各个单词。类名首字母大写。<br>必要的空格与空行<br>     运算符两侧、函数参数之间、逗号两侧建议使用空格分开。不同功能的代码块之间、不同的函数定义之间建议增加一个空行以增加可读性。</p>
<h1 id="Python基本输入输出"><a href="#Python基本输入输出" class="headerlink" title="Python基本输入输出"></a>Python基本输入输出</h1><p>Python基本输入<br>   输入是通过input( )函数来实现的，input( )的一般格式为：<br>   a=input(‘提示：’)。<br>Python基本输出<br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210529214323.png" alt="20210529214323"><br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210529214330.png" alt="20210529214330"><br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210529214343.png" alt="20210529214343"></p>
<h1 id="安装扩展库的几种方法"><a href="#安装扩展库的几种方法" class="headerlink" title="安装扩展库的几种方法"></a>安装扩展库的几种方法</h1><p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210529214604.png" alt="20210529214604"></p>
<h1 id="标准库与扩展库对象的导入与使用"><a href="#标准库与扩展库对象的导入与使用" class="headerlink" title="标准库与扩展库对象的导入与使用"></a>标准库与扩展库对象的导入与使用</h1><ul>
<li>Python默认安装仅包含基本或核心模块，启动时也仅加载了基本模块，在需要时再显式地导入和加载标准库和第三方扩展库（需正确安装），这样可以减小程序运行的压力，并且具有很强的可扩展性。</li>
<li>从“木桶原理”的角度来看，这样的设计与安全配置时遵循的“最小权限”原则的思想是一致的，也有助于提高系统安全性。</li>
</ul>
<p><strong>import 模块名 [as 别名]</strong></p>
<p>import numpy as np             #导入扩展库numpy，并设置别名为np<br>a = np.array((1,2,3,4))        #通过模块的别名来访问其中的对象</p>
<p><strong>from 模块名 import 对象名[ as 别名]</strong></p>
<p>from math import sin as f    #给导入的对象起个别名</p>
<p>from 模块名 import *<br>from math import *         #导入标准库math中所有对象</p>
]]></content>
      <categories>
        <category>Python基础</category>
      </categories>
      <tags>
        <tag>Python基础</tag>
      </tags>
  </entry>
  <entry>
    <title>第 17 章 项目结束过程</title>
    <url>/2021/05/09/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/17%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9D%9F/</url>
    <content><![CDATA[<p><font color="red"></font></p>
<h1 id="本章要点"><a href="#本章要点" class="headerlink" title="本章要点"></a>本章要点</h1><blockquote>
<p>一、合同结束<br>二、项目结束</p>
</blockquote>
<span id="more"></span>
<h1 id="合同结束"><a href="#合同结束" class="headerlink" title="合同结束"></a>合同结束</h1><p>项目终止的条件<br>下列条件出现，可以终止项目：</p>
<ol>
<li>项目计划中确定的可交付成果已经出现，项目的目标已经成功实现</li>
<li>由于相关原因,项目无法继续进行,例如<br>项目已经不具备实用价值<br>项目无竞争力，难以生存 </li>
</ol>
<p>合同的生存期：<br>合同准备<br>合同签署<br>合同管理<br>合同终止</p>
<h1 id="项目结束"><a href="#项目结束" class="headerlink" title="项目结束"></a>项目结束</h1><p>项目结束过程:<br>制定结束计划、完成收尾工作、项目最后评审<br>项目收尾：<br>范围确认<br>质量验收<br>产品交付<br>费用决算<br>项目文档验收</p>
<h2 id="项目最后评审"><a href="#项目最后评审" class="headerlink" title="项目最后评审"></a>项目最后评审</h2><ul>
<li>是否实现项目目标</li>
<li>是否遵循项目进度</li>
<li>是否在预算成本内完成项目</li>
<li>项目进度过程中出现的突发问题以及解决措施是否合适，问题是否得到解决</li>
<li>从该项目的实践中可以得到哪些经验和教训</li>
</ul>
<h2 id="项目总结"><a href="#项目总结" class="headerlink" title="项目总结"></a>项目总结</h2><p>项目总结是一个把实际运行情况与项目计划不断比较以提炼经验教训的过程。通过项目总结，项目过程中的经验和教训将得到完整的记录和升华，成为“组织财富”。</p>
]]></content>
      <categories>
        <category>软件项目管理</category>
      </categories>
      <tags>
        <tag>软件项目管理</tag>
      </tags>
  </entry>
  <entry>
    <title>第 16 章 项目辅助计划执行控制</title>
    <url>/2021/05/09/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/16%E8%BE%85%E5%8A%A9%E8%AE%A1%E5%88%92%E6%89%A7%E8%A1%8C%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<p><font color="red"></font></p>
<h1 id="本章要点"><a href="#本章要点" class="headerlink" title="本章要点"></a>本章要点</h1><blockquote>
<p>人员管理<br>干系人管理<br>沟通管理<br>风险管理<br>合同管理</p>
</blockquote>
<span id="more"></span>
<h1 id="人员计划执行控制"><a href="#人员计划执行控制" class="headerlink" title="人员计划执行控制"></a>人员计划执行控制</h1><h2 id="团队建设"><a href="#团队建设" class="headerlink" title="团队建设:"></a>团队建设:</h2><p>团队创建有4个主要阶段：组建、磨合、规范、执行。</p>
<h2 id="人员培训"><a href="#人员培训" class="headerlink" title="人员培训:"></a>人员培训:</h2><p>项目培训的特点：</p>
<ul>
<li>短期</li>
<li>片断式</li>
<li>针对性强</li>
<li>见效快<br>培训形式：</li>
<li>岗前培训</li>
<li>岗上培训</li>
</ul>
<h2 id="人员激励"><a href="#人员激励" class="headerlink" title="人员激励:"></a>人员激励:</h2><p>项目成员的激励理论：</p>
<h3 id="马斯洛的需求层次理论"><a href="#马斯洛的需求层次理论" class="headerlink" title="马斯洛的需求层次理论"></a>马斯洛的需求层次理论</h3><h3 id="海兹伯格的激励理论"><a href="#海兹伯格的激励理论" class="headerlink" title="海兹伯格的激励理论"></a>海兹伯格的激励理论</h3><p>激励因素（内在因素）：</p>
<ul>
<li>成就感</li>
<li>责任感</li>
<li>晋升</li>
<li>被赏识、认可<br>保健因素（外在因素）：</li>
<li>工作环境</li>
<li>薪金</li>
<li>工作关系</li>
<li>安全等</li>
</ul>
<h3 id="麦克勒格的-X－理论"><a href="#麦克勒格的-X－理论" class="headerlink" title="麦克勒格的 X－理论"></a>麦克勒格的 X－理论</h3><p>强势管理—针对懒惰型人员<br>参与管理—针对勤奋型人员</p>
<h3 id="超Y理论"><a href="#超Y理论" class="headerlink" title="超Ｙ理论"></a>超Ｙ理论</h3><p>１ 人们情况不同、处理方法不同<br>２ 组织形式和管理方法要与工作性质和人们的需要相适应<br>３ 组织机构和管理层次的划分、职工培训和工作分配、工作报酬和控制程度等, 不能千篇一律;<br>４ 当一个目标达到后,应激起员工的胜任感,使他们为达到新的、更高的目标而努力。 </p>
<h3 id="Z理论"><a href="#Z理论" class="headerlink" title="Ｚ理论"></a>Ｚ理论</h3><p>１ 企业对员工实行长期或终身雇佣制度,<br>２ 注意员工培训,<br>３ 注意对人的经验和潜在能力进行诱导;<br>４ 企业决策采取集体研究和个人负责的方式,<br>５ 让职工多参与管理。 </p>
<h3 id="期望理论（Expectancy-Theory）"><a href="#期望理论（Expectancy-Theory）" class="headerlink" title="期望理论（Expectancy Theory）"></a>期望理论（Expectancy Theory）</h3><p>人们在下列情况下能够受到激励并且出大量成果</p>
<ul>
<li>相信他们的努力很可能会产生成功的结果</li>
<li>他们也相信自己会因为成功得到相应的回报<h1 id="干系人计划执行控制"><a href="#干系人计划执行控制" class="headerlink" title="干系人计划执行控制"></a>干系人计划执行控制</h1>项目的目的是实现项目干系人的需求和愿望，项目干系人管理应当贯穿始终，项目经理及<br>其项目成员要分清项目干系人包含哪些人和组织，通过沟通协调对他们施加影响，驱动他们对<br>项目的支持，调查并明确他们的需求和愿望，减小其对项目的阻力，以确保项目获得成功。</li>
</ul>
<h1 id="沟通管理"><a href="#沟通管理" class="headerlink" title="沟通管理"></a>沟通管理</h1><p>主要沟通方式:</p>
<h2 id="利用信息技术沟通方式"><a href="#利用信息技术沟通方式" class="headerlink" title="利用信息技术沟通方式"></a>利用信息技术沟通方式</h2><p>项目网站<br>邮件往来<br>QQ群<br>配置管理系统</p>
<h2 id="正式沟通"><a href="#正式沟通" class="headerlink" title="正式沟通"></a>正式沟通</h2><p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210509201306.png" alt="20210509201306"></p>
<h2 id="非正式沟通"><a href="#非正式沟通" class="headerlink" title="非正式沟通"></a>非正式沟通</h2><p>讨论<br>聊天<br>聚会</p>
<h1 id="风险管理"><a href="#风险管理" class="headerlink" title="风险管理"></a>风险管理</h1><p>风险识别<br>风险评估<br>风险规划<br>风险控制</p>
<h2 id="风险控制过程"><a href="#风险控制过程" class="headerlink" title="风险控制过程"></a>风险控制过程</h2><p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210509202033.png" alt="20210509202033"></p>
<h1 id="合同管理"><a href="#合同管理" class="headerlink" title="合同管理"></a>合同管理</h1><h2 id="甲方合同管理"><a href="#甲方合同管理" class="headerlink" title="甲方合同管理"></a>甲方合同管理</h2><p>对采购对象的检验和验收过程<br>违约事件处理过程</p>
<h2 id="乙方合同管理"><a href="#乙方合同管理" class="headerlink" title="乙方合同管理"></a>乙方合同管理</h2><p>合同执行跟踪管理过程<br>合同修改控制<br>违约事件处理过程<br>产品提交过程<br>产品维护过程</p>
]]></content>
      <categories>
        <category>软件项目管理</category>
      </categories>
      <tags>
        <tag>软件项目管理</tag>
      </tags>
  </entry>
  <entry>
    <title>第 15 章 项目核心计划执行控制</title>
    <url>/2021/05/09/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/15%E6%A0%B8%E5%BF%83%E8%AE%A1%E5%88%92%E6%89%A7%E8%A1%8C%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<p><font color="red"></font></p>
<h1 id="本章要点"><a href="#本章要点" class="headerlink" title="本章要点"></a>本章要点</h1><blockquote>
<p>范围管理<br>时间\成本管理<br>质量管理</p>
</blockquote>
<span id="more"></span>
<h1 id="范围管理"><a href="#范围管理" class="headerlink" title="范围管理"></a>范围管理</h1><p>范围管理主要是针对需求变更的管理<br>变更控制系统流程：<br>提出需求变更请求，评估变更的影响，最后通过SCCB的表决<br>需求变更后需要重新修改WBS<br>需求变更管理也是一个重要的基线变更管理</p>
<h1 id="性能分析的主要技术"><a href="#性能分析的主要技术" class="headerlink" title="性能分析的主要技术"></a>性能分析的主要技术</h1><h2 id="图解控制法"><a href="#图解控制法" class="headerlink" title="图解控制法"></a>图解控制法</h2><p>图解控制法是利用表示进度的甘特图、表示成本的累计费用曲线图和表示资源的资源载荷<br>图对项目的性能进行分析的过程。</p>
<p>累计费用(S) 曲线对监视费用偏差是很有用的，<br>计划成本曲线和实际支出曲线之间的高度差表示成本偏差</p>
<p>资源载荷图围住的面积代表某段工作时间的资源消耗</p>
<h2 id="挣值分析法"><a href="#挣值分析法" class="headerlink" title="挣值分析法"></a>挣值分析法</h2><p>又称已获取价值分析</p>
<p>BAC(Budget At Completion)<br>预算总值（估算结果）<br>TAC(Time At Completion)<br>预计完成时间<br>BCWS(Budgeted cost of work scheduled)<br>计划工作成本<br>ACWP(Actual cost of work performed)<br>实际工作成本<br>BCWP(Budgeted cost of work performed)<br>已获值(Earned Value)<br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210509162820.png" alt="20210509162820"></p>
<p>BCWP的计算:<br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210509163047.png" alt="20210509163047"></p>
<p>进度差异:SV（Schedule Variance）=BCWP-BCWS<br>        =0：按照计划进度进行<br>        &lt;0：落后于进度<br>        &gt;0：超前于进度</p>
<p>成本差异:CV（Cost Variance )=BCWP-ACWP<br>        =0：按照计划预算进行<br>        &lt;0：超出预算<br>        &gt;0：低于预算</p>
<p>进度效能指标 SPI（Schedule  Performance Index)= BCWP/BCWS<br>=1：按照计划进度进行</p>
<blockquote>
<p>1：超前于进度<br>&lt;1：落后于进度</p>
</blockquote>
<p>成本效能指标：CPI(Cost Performance Index)= BCWP/ACWP<br>=1：按照计划预算进行</p>
<blockquote>
<p>1：低于预算<br>&lt;1：超出预算</p>
</blockquote>
<p><font color="red">研究表明：进度进展到20%左右的时候，CPI趋于稳定。</font></p>
<p>预测项目完成成本 EAC (Estimate At Completion)=BAC/CPI<br>项目完成的成本差异 VAC(Variance At Completion)=BAC-EAC<br>预测项目完成时间 SAC(Schedule At Completion )=TAC/SPI</p>
<p>未完工指数 TCPI=剩余工作/剩余成本<br>        =(BAC-BCWP)/(Goal-ACWP)</p>
<h2 id="敏捷进度控制"><a href="#敏捷进度控制" class="headerlink" title="敏捷进度控制"></a>敏捷进度控制</h2><p>在任何时间，达成目标的剩余工作量是可以累计的。<br>敏捷进度燃尽图</p>
<h1 id="质量执行控制"><a href="#质量执行控制" class="headerlink" title="质量执行控制"></a>质量执行控制</h1><p>质量管理围绕着质量保证和质量控制两方面进行</p>
<h2 id="质量保证"><a href="#质量保证" class="headerlink" title="质量保证"></a>质量保证</h2><p>QA:质量审计（ Audit ）<br>质量保证的主要活动是产品审计和执行过程审计。</p>
<h2 id="质量控制"><a href="#质量控制" class="headerlink" title="质量控制"></a>质量控制</h2><p>质量控制3个要点：<br>1、检查控制对象是项目工作结果。<br>2、进行跟踪检查的依据是相关质量标准。<br>3、对于不满意的质量问题，需要进行一步分析其产生的原因，并确定采取何种措施来消除这些问题。</p>
<h3 id="质量控制的方法和策略"><a href="#质量控制的方法和策略" class="headerlink" title="质量控制的方法和策略"></a>质量控制的方法和策略</h3><ol>
<li>技术评审<br>尽早发现工作成果中的缺陷，并帮助开发人员及时消除缺陷，从而有效地提高产品的质量</li>
</ol>
<p><strong>对等评审</strong>是一个特殊类型的技术评审，是由与工作产品开发人员具有同等背景和能力的人<br>员对工作产品进行的一种技术评审，目的是早期和有效地消除软件工作产品中的缺陷，并可对<br>软件工作产品和其中可预防的缺陷有更好的理解。对等评审是提高生产率和产品质量的重要<br>手段。<br>2. 代码评审/走查<br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210509171444.png" alt="20210509171444"><br>3. 软件测试<br>(1) 测试是程序的执行过程，目的在于发现错误；<br>(2) 一个好的测试用例在于能发现至今未发现的错误；<br>(3) 一个成功的测试是发现了至今未发现的错误的测试。<br>4. 返工<br>返工是将有缺陷的和不合格项改造为与需求和规格一致的行为<br>5. 控制图法<br>控制图法是一种图形的控制方法，它显示软件产品的质量随着时间变化的情况，在控制图法中标识出质量控制的偏差标准。<br>6. 趋势分析<br>趋势分析指运用数字技巧，依据过去的成果预测将来的产品。<br>7. 抽样统计<br>抽样统计是根据一定的分布概率抽取部分产品进行检查。它是以小批量的抽样为基准进行检验，以确定大量或批量产品质量的最常使用的方法。 </p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>项目核心计划的执行控制</p>
<ul>
<li>范围执行控制</li>
<li>时间\成本执行控制</li>
<li>质量执行控制</li>
</ul>
]]></content>
      <categories>
        <category>软件项目管理</category>
      </categories>
      <tags>
        <tag>软件项目管理</tag>
      </tags>
  </entry>
  <entry>
    <title>第 12 章 软件项目合同计划</title>
    <url>/2021/05/08/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/12%E5%90%88%E5%90%8C%E8%AE%A1%E5%88%92/</url>
    <content><![CDATA[<p><font color="red"></font></p>
<h1 id="本章要点"><a href="#本章要点" class="headerlink" title="本章要点"></a>本章要点</h1><blockquote>
<p>项目合同<br>合同计划 </p>
</blockquote>
<span id="more"></span>


<h1 id="项目采购"><a href="#项目采购" class="headerlink" title="项目采购"></a>项目采购</h1><p>为了执行项目而从项目团队外部获取产品、服务或者结果的过程，称为采购 .</p>
<h1 id="合同"><a href="#合同" class="headerlink" title="合同"></a>合同</h1><p>合同是具有法律效力的协议</p>
<ul>
<li>双方自愿达成的协议</li>
<li>签订者具有相应的法律能力</li>
<li>有充分的签约理由</li>
<li>具有合法的目的</li>
</ul>
<h2 id="合同类型"><a href="#合同类型" class="headerlink" title="合同类型"></a>合同类型</h2><h3 id="成本补偿类合同"><a href="#成本补偿类合同" class="headerlink" title="成本补偿类合同"></a>成本补偿类合同</h3><p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210508214738.png" alt="20210508214738"></p>
<h3 id="固定价格合同"><a href="#固定价格合同" class="headerlink" title="固定价格合同"></a>固定价格合同</h3><p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210508215212.png" alt="20210508215212"></p>
<h3 id="单价合同-Unit-Price"><a href="#单价合同-Unit-Price" class="headerlink" title="单价合同(Unit Price)"></a>单价合同(Unit Price)</h3><p>一个产品或者时间度量单位的价格 :例如<br>工程师单价:130美元/工时<br>产品单价:1500元/功能点</p>
<h2 id="合同类型与相应的风险"><a href="#合同类型与相应的风险" class="headerlink" title="合同类型与相应的风险"></a>合同类型与相应的风险</h2><p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210508215445.png" alt="20210508215445"></p>
<h1 id="合同计划"><a href="#合同计划" class="headerlink" title="合同计划"></a>合同计划</h1><ol>
<li>明确如何进行委托、委托什么项目、何时进行、费用如何等，</li>
<li>选择需要的合同类型，采用的招标方式、合同形式等。</li>
</ol>
<p>输出:<br>    招标书或者类似招标书的形式体现的   </p>
<h1 id="软件外包"><a href="#软件外包" class="headerlink" title="软件外包"></a>软件外包</h1><p>软件项目外包的实质是软件开发过程的管理规范与管理技术从企业内部部分或全部延伸到外部。</p>
<h2 id="分类："><a href="#分类：" class="headerlink" title="分类："></a>分类：</h2><p>按照承包商地理位置分类：境内外包和境外外包<br>按照外包内容分类：技术外包、业务流外包、知识流外包。</p>
<h2 id="软件外包基本步骤："><a href="#软件外包基本步骤：" class="headerlink" title="软件外包基本步骤："></a>软件外包基本步骤：</h2><ul>
<li>竞标邀请</li>
<li>评估候选乙方的综合能力</li>
<li>确定承包商</li>
</ul>
]]></content>
      <categories>
        <category>软件项目管理</category>
      </categories>
      <tags>
        <tag>软件项目管理</tag>
      </tags>
  </entry>
  <entry>
    <title>第 11 章 软件项目风险计划</title>
    <url>/2021/05/08/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/11%E9%A3%8E%E9%99%A9%E8%AE%A1%E5%88%92/</url>
    <content><![CDATA[<p><font color="red"></font></p>
<h1 id="本章要点"><a href="#本章要点" class="headerlink" title="本章要点"></a>本章要点</h1><blockquote>
<p>风险基本概念<br>风险管理过程<br>风险管理计划  </p>
</blockquote>
<span id="more"></span>
<h1 id="项目风险的三要素"><a href="#项目风险的三要素" class="headerlink" title="项目风险的三要素"></a>项目风险的三要素</h1><ol>
<li>风险事件</li>
<li>风险事件发生的概率</li>
<li>风险事件造成的影响</li>
</ol>
<h1 id="风险类型"><a href="#风险类型" class="headerlink" title="风险类型"></a>风险类型</h1><p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210506191411.png" alt="20210506191411"></p>
<h1 id="风险管理的四个过程"><a href="#风险管理的四个过程" class="headerlink" title="风险管理的四个过程"></a>风险管理的四个过程</h1><p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210506191540.png" alt="20210506191540"></p>
<h2 id="1–风险识别"><a href="#1–风险识别" class="headerlink" title="1–风险识别"></a>1–风险识别</h2><p>风险识别是试图通过系统化地确定对项目计划的威胁，识别已知和可预测的风险。</p>
<h3 id="风险识别方法"><a href="#风险识别方法" class="headerlink" title="风险识别方法"></a>风险识别方法</h3><ul>
<li>德尔菲方法</li>
<li>头脑风暴法</li>
<li>情景分析法</li>
<li>利用风险条目检查表<h4 id="利用风险条目检查表"><a href="#利用风险条目检查表" class="headerlink" title="利用风险条目检查表"></a>利用风险条目检查表</h4></li>
<li>利用检查表作为风险识别的工具</li>
<li>根据列表中的条目识别风险</li>
<li>集中识别常见的类型中的已知和可预测的风险</li>
</ul>
<h2 id="2–风险评估"><a href="#2–风险评估" class="headerlink" title="2–风险评估"></a>2–风险评估</h2><p>对风险事件发生概率的评估，对项目风险影响的评估，给出项目风险排序。<br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210506202001.png" alt="20210506202001"></p>
<h3 id="风险评估的方法-定性风险评估"><a href="#风险评估的方法-定性风险评估" class="headerlink" title="风险评估的方法-定性风险评估"></a>风险评估的方法-定性风险评估</h3><p>定性评估风险概率及后果</p>
<p>风险概率度量：<br>高、中、低<br>极高、高、中、低、极低<br>不可能，不一定，可能和极可能<br>等等</p>
<p>风险影响度量:<br>高、中、低<br>极高、高、中、低、极低<br>灾难，严重，轻微，可忽略<br>等等</p>
<p>风险概率及后果估计-矩阵图<br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210506202325.png" alt="20210506202325"></p>
<h3 id="风险评估的方法-定量风险评估"><a href="#风险评估的方法-定量风险评估" class="headerlink" title="风险评估的方法-定量风险评估"></a>风险评估的方法-定量风险评估</h3><ol>
<li>盈亏平衡分析</li>
<li>模拟</li>
<li>决策树分析</li>
</ol>
<p>决策树分析:</p>
<ul>
<li>决策树分析是一种图表分析方法</li>
<li>提供项目所有可供选择的行动方案，行动方案之间的关系，行动方案的后果以及发生的概率</li>
<li>提供选择一个最佳的方案的依据</li>
</ul>
<p><font color="red">EMV (损益期望值)是决策树的一种计算值</font><br>根据结果、发生的概率计算出一种期望的损益<br>例如：<br>    某行动方案成功的概率是50%，收益是10<br>    EMV=10*50%=5</p>
<h2 id="3–风险规划"><a href="#3–风险规划" class="headerlink" title="3–风险规划"></a>3–风险规划</h2><p>针对风险分析的结果，为提高实现项目目标的机会，降低风险的负面影响而制定风险应对策略和应对措施的过程，即制定一定的行动和策略来对付、减少、以至于消灭风险事件造成的影响</p>
<p>风险规划的主要策略:</p>
<ol>
<li>回避风险</li>
<li>转移风险</li>
<li>损失控制</li>
<li>自留风险</li>
</ol>
<h3 id="回避风险"><a href="#回避风险" class="headerlink" title="回避风险"></a>回避风险</h3><p>回避风险是对可能发生的风险尽可能的规避，采取主动放弃或者拒绝使用导致风险的方案</p>
<p>例如放弃采用新技术<br>注意事项</p>
<ul>
<li>对风险有足够的认识，当风险发生概率极高、风险后果影响很严重时，可以采用</li>
<li>当其他风险策略不理想的时候，可以考虑</li>
<li>可能产生另外的风险</li>
<li>不是所有的情况都适用的，如自然灾害<h3 id="转移风险"><a href="#转移风险" class="headerlink" title="转移风险"></a>转移风险</h3>转移风险是为了避免承担风险损失，有意识将损失或与损失有关的财务后果转嫁出去的方法。<br>例如</li>
<li>分包</li>
<li>开脱责任合同</li>
<li>保险<h3 id="损失控制"><a href="#损失控制" class="headerlink" title="损失控制"></a>损失控制</h3><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210506204329.png" alt="20210506204329"><h3 id="自留风险"><a href="#自留风险" class="headerlink" title="自留风险"></a>自留风险</h3>由项目组织自己承担风险事故所致损失的措施。 </li>
</ul>
<h1 id="风险管理计划"><a href="#风险管理计划" class="headerlink" title="风险管理计划"></a>风险管理计划</h1><ul>
<li>风险应对计划（例如TOP 清单）<ul>
<li>风险事件</li>
<li>风险排序</li>
<li>风险应对策略</li>
</ul>
</li>
<li>岗位职责</li>
<li>风险追踪</li>
</ul>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>风险管理的四个过程<br>风险管理计划</p>
]]></content>
      <categories>
        <category>软件项目管理</category>
      </categories>
      <tags>
        <tag>软件项目管理</tag>
      </tags>
  </entry>
  <entry>
    <title>第 9 章 软件项目配置管理计划</title>
    <url>/2021/05/07/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/9%E9%85%8D%E7%BD%AE%E8%AE%A1%E5%88%92/</url>
    <content><![CDATA[<p><font color="red"></font></p>
<h1 id="本章要点"><a href="#本章要点" class="headerlink" title="本章要点"></a>本章要点</h1><blockquote>
<p>软件项目配置管理基本概念<br>软件项目配置管理过程<br>软件项目配置管理计划</p>
</blockquote>
<span id="more"></span>
<h1 id="配置管理简述"><a href="#配置管理简述" class="headerlink" title="配置管理简述"></a>配置管理简述</h1><p>软件配置管理是一套管理软件开发和维护以及其中各种中间软件产品的方法和规则，同时是提高软件质量的重要手段，它帮助开发团队对软件开发过程进行有效的变更控制，高效地开发高质量的软件。<br>记录软件产品的演化过程<br>得到精确的产品配置。<br>最终保证软件产品的<font color="red">完整性、一致性、追朔性、可控性</font></p>
<h1 id="配置管理的几个重要的概念"><a href="#配置管理的几个重要的概念" class="headerlink" title="配置管理的几个重要的概念"></a>配置管理的几个重要的概念</h1><p>(1) 配置项<br>(2) 基线<br>(3) 软件配置控制委员会</p>
<h2 id="软件配置项"><a href="#软件配置项" class="headerlink" title="软件配置项"></a>软件配置项</h2><p>SCI:software configration item<br>受控于软件配置管理的项<br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210506170112.png" alt="20210506170112"></p>
<h2 id="基线定义"><a href="#基线定义" class="headerlink" title="基线定义"></a>基线定义</h2><ul>
<li>基线提供了软件生存期中各个开发阶段的一个特定点</li>
<li>一个(些)配置项形成并通过审核，即形成基线</li>
<li>基线标志开发过程一个阶段的结束和里程碑</li>
<li>基线修改需要按照正式的程序执行<br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210506170223.png" alt="20210506170223"><h2 id="SCCB-Software-Configuration-Control-Board"><a href="#SCCB-Software-Configuration-Control-Board" class="headerlink" title="SCCB (Software Configuration Control Board)"></a>SCCB (Software Configuration Control Board)</h2>软件配置控制委员会(SCCB)</li>
</ul>
<ol>
<li>评估变更</li>
<li>批准变更申请</li>
<li>在生存期内规范变更申请流程</li>
<li>对变更进行反馈</li>
<li>与项目管理层沟通 <h1 id="配置管理的基本过程"><a href="#配置管理的基本过程" class="headerlink" title="配置管理的基本过程"></a>配置管理的基本过程</h1><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210506170345.png" alt="20210506170345"><h2 id="1、配置项标识、跟踪"><a href="#1、配置项标识、跟踪" class="headerlink" title="1、配置项标识、跟踪"></a>1、配置项标识、跟踪</h2></li>
</ol>
<ul>
<li>将软件项目中需要进行控制的部分拆分成SCI</li>
<li>建立唯一的标识</li>
<li>建立相互间的对应关系，进行系统的跟踪和版本控制.<h3 id="配置项的标识"><a href="#配置项的标识" class="headerlink" title="配置项的标识"></a>配置项的标识</h3>配置项被唯一的标识<h3 id="配置项的跟踪"><a href="#配置项的跟踪" class="headerlink" title="配置项的跟踪"></a>配置项的跟踪</h3><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210506171015.png" alt="20210506171015"><h2 id="2、配置管理环境建立"><a href="#2、配置管理环境建立" class="headerlink" title="2、配置管理环境建立"></a>2、配置管理环境建立</h2>软件配置管理库是用来存储所有基线配置项及相关文件等内容的系统，是在软件产品的整个生存期中建立和维护软件产品完整性的主要手段。 <h3 id="受控操作"><a href="#受控操作" class="headerlink" title="受控操作"></a>受控操作</h3><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210506171147.png" alt="20210506171147"><h2 id="3、基线变更管理过程"><a href="#3、基线变更管理过程" class="headerlink" title="3、基线变更管理过程"></a>3、基线变更管理过程</h2>基线修改应受到控制，这种变化要经SCCB授权，按程序进行控制并记录基线修改的过程。 <h3 id="基线变更系统"><a href="#基线变更系统" class="headerlink" title="基线变更系统"></a>基线变更系统</h3><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210506171238.png" alt="20210506171238"><h3 id="变更请求"><a href="#变更请求" class="headerlink" title="变更请求"></a>变更请求</h3><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210506171253.png" alt="20210506171253"><h3 id="变更评估"><a href="#变更评估" class="headerlink" title="变更评估"></a>变更评估</h3><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210506171309.png" alt="20210506171309"><h3 id="变更批准-拒绝"><a href="#变更批准-拒绝" class="headerlink" title="变更批准/拒绝"></a>变更批准/拒绝</h3><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210506171327.png" alt="20210506171327"><h3 id="变更实现"><a href="#变更实现" class="headerlink" title="变更实现"></a>变更实现</h3><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210506171348.png" alt="20210506171348"></li>
</ul>
<h2 id="4、配置管理审计"><a href="#4、配置管理审计" class="headerlink" title="4、配置管理审计"></a>4、配置管理审计</h2><ul>
<li>配置管理过程审计</li>
<li>基线审计<h2 id="5、配置状态统计"><a href="#5、配置状态统计" class="headerlink" title="5、配置状态统计"></a>5、配置状态统计</h2>例如：</li>
<li>被批准的配置项 </li>
<li>变更请求的数量</li>
<li>配置项的所有请求的变化状态 </li>
<li>配置项所有被批准的变更实现状态</li>
<li>配置管理系统以及SCCB在运作中发生异常的次数等等 </li>
</ul>
<h1 id="配置管理计划大纲"><a href="#配置管理计划大纲" class="headerlink" title="配置管理计划大纲"></a>配置管理计划大纲</h1><ul>
<li>人员职责（确定SCCB等）</li>
<li>配置项定义</li>
<li>基线定义</li>
<li>版本控制</li>
<li>定义变更控制系统<h1 id="常用配置管理的工具"><a href="#常用配置管理的工具" class="headerlink" title="常用配置管理的工具"></a>常用配置管理的工具</h1><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210506171548.png" alt="20210506171548"><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1></li>
</ul>
<ol>
<li>配置管理的基本概念<ol>
<li>配置项</li>
<li>基线</li>
<li>sccb</li>
</ol>
</li>
<li>配置管理过程</li>
<li>配置管理计划</li>
</ol>
]]></content>
      <categories>
        <category>软件项目管理</category>
      </categories>
      <tags>
        <tag>软件项目管理</tag>
      </tags>
  </entry>
  <entry>
    <title>第 8 章 软件项目质量计划</title>
    <url>/2021/05/06/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/8%E8%B4%A8%E9%87%8F%E8%AE%A1%E5%88%92/</url>
    <content><![CDATA[<p><font color="red"></font></p>
<h1 id="本章要点"><a href="#本章要点" class="headerlink" title="本章要点"></a>本章要点</h1><blockquote>
<p>软件质量基本概念<br>软件质量管理过程<br>软件质量计划  </p>
</blockquote>
<span id="more"></span>
<h1 id="质量定义"><a href="#质量定义" class="headerlink" title="质量定义"></a>质量定义</h1><p>质量是满足要求的程度,包括符合规定的要求和满足顾客隐含需求.</p>
<p><strong>软件质量</strong>是软件满足明确说明或者隐含的需求的程度</p>
<p>质量好的一个重要方面是让用户满意，<br>质量管理的目标是满足项目干系人的需求。</p>
<h1 id="软件质量模型"><a href="#软件质量模型" class="headerlink" title="软件质量模型"></a>软件质量模型</h1><p>人们通常把影响软件质量的特性用软件质量模型来描述。</p>
<p>1976年  Boehm质量模型<br>1979年  McCall质量模型<br>1985年  ISO质量模型</p>
<h2 id="Boehm模型"><a href="#Boehm模型" class="headerlink" title="Boehm模型"></a>Boehm模型</h2><p>定量评价软件质量，60个质量度量公式，层次模型<br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210506154519.png" alt="20210506154519"></p>
<h2 id="McCall质量模型"><a href="#McCall质量模型" class="headerlink" title="McCall质量模型"></a>McCall质量模型</h2><p>软件质量要素、准则、度量<br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210506154351.png" alt="20210506154351"></p>
<h2 id="ISO-IEC9126模型"><a href="#ISO-IEC9126模型" class="headerlink" title="ISO/IEC9126模型"></a>ISO/IEC9126模型</h2><p>内部质量度量和外部质量度量<br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210506154423.png" alt="20210506154423"></p>
<h1 id="质量的形成"><a href="#质量的形成" class="headerlink" title="质量的形成"></a>质量的形成</h1><p>质量形成于产品或者服务的开发过程中，而不是事后的检查（测试）把关等。<br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210506155059.png" alt="20210506155059"></p>
<h1 id="质量成本（CoQ）"><a href="#质量成本（CoQ）" class="headerlink" title="质量成本（CoQ）"></a>质量成本（CoQ）</h1><p>质量成本是由于产品的第一次工作不正常而衍生的附加花费，包括两部分<br>预防成本：评估费用、预防费用。<br>缺陷成本：内部费用、外部费用。</p>
<h1 id="质量管理的对象"><a href="#质量管理的对象" class="headerlink" title="质量管理的对象"></a>质量管理的对象</h1><p>过程的质量<br>  需求过程、设计过程、编码过程、测试过程、提交过程等<br>产品的质量<br>  需求规格、设计说明书、代码、测试用例、测试报告、使用手册等</p>
<h1 id="软件质量管理过程"><a href="#软件质量管理过程" class="headerlink" title="软件质量管理过程"></a>软件质量管理过程</h1><p>软件质量计划<br>软件质量保证<br>软件质量控制</p>
<h2 id="软件质量计划"><a href="#软件质量计划" class="headerlink" title="软件质量计划"></a>软件质量计划</h2><p>确定项目应达到的质量标准(目标)<br>决定如何满足质量标准的计划安排和方法</p>
<h3 id="质量计划方法"><a href="#质量计划方法" class="headerlink" title="质量计划方法"></a>质量计划方法</h3><p>试验设计<br>基准对照<br>质量成本分析<br>流程图方法<br>因果分析图</p>
<h4 id="试验设计"><a href="#试验设计" class="headerlink" title="试验设计"></a>试验设计</h4><p>试验设计是一种统计学方法，确定哪些因素可能会对特定变量产生影响。<br>例如：针对成本和时间可以设计不同的组合方案，并筛选出最优的组合。</p>
<h4 id="基准对照"><a href="#基准对照" class="headerlink" title="基准对照"></a>基准对照</h4><p>是一种寻找最佳实践的方法，是利用其他项目的实施情况作为当前项目性能衡量的标准。<br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210506160717.png" alt="20210506160717"></p>
<h4 id="质量成本分析"><a href="#质量成本分析" class="headerlink" title="质量成本分析"></a>质量成本分析</h4><p>质量成本的综合分析，以便决定质量活动<br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210506160744.png" alt="20210506160744"></p>
<h4 id="流程图方法"><a href="#流程图方法" class="headerlink" title="流程图方法"></a>流程图方法</h4><p>可以显示系统的各种成分是相互的关系，帮助我们预测在何处可能发生何种质量问题.<br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210506160809.png" alt="20210506160809"></p>
<h4 id="因果分析图"><a href="#因果分析图" class="headerlink" title="因果分析图"></a>因果分析图</h4><p>描述相关的各种原因和子原因如何产生潜在问题或影响，将影响质量问题的“人员、设备、参考资料、方法、环境”等各方面的原因进行细致的分解，方便地在质量计划中制定相应的预防措施<br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210506160847.png" alt="20210506160847"></p>
<h2 id="质量保证-QA"><a href="#质量保证-QA" class="headerlink" title="质量保证(QA)"></a>质量保证(QA)</h2><p>为了提供信用，证明项目将会达到有关质量标准而开展的有计划、有组织的工作活动。</p>
<p>通过评价项目整体绩效,建立对质量要求的信任<br>提供项目和产品可视化的管理报告<br>          例如：《软件设计说明书》质量审计<br>Is it done right?（完成是否正确）<br>这个任务本身并不能提高产品的质量<br>一般由质量保证部门人员实施</p>
<h3 id="质量保证的要点"><a href="#质量保证的要点" class="headerlink" title="质量保证的要点"></a>质量保证的要点</h3><p>对项目进行评价<br>推测能否达到质量指标<br>建立对项目的信心</p>
<h3 id="质量保证活动"><a href="#质量保证活动" class="headerlink" title="质量保证活动"></a>质量保证活动</h3><p>软件项目中常用的质量保证活动:<br>项目执行过程审计<br>项目产品审计</p>
<p><strong>审计(Audit) 是对过程或者产品的一次独立评估</strong>。将审核的主体与为该主体以前建立的一组规程和标准进行比较<br>目的是确保真正的遵循了这一个过程，产生了合适的文档和精确反映实际项目的报告<br>可以预先规划的，也可以是临时决定的。 </p>
<h2 id="质量控制-QC"><a href="#质量控制-QC" class="headerlink" title="质量控制(QC)"></a>质量控制(QC)</h2><p>确定项目结果与质量标准是否相符,同时,确定消除不符的原因和方法<br>控制产品的质量，及时纠正缺陷<br>        例如：评审、单元测试<br>Is it right done?（是否正确完成？）<br>这个任务本身提高产品的质量<br>一般由开发人员实施</p>
<h3 id="质量控制的要点"><a href="#质量控制的要点" class="headerlink" title="质量控制的要点"></a>质量控制的要点</h3><ol>
<li>检查工作结果</li>
<li>按照标准跟踪检查</li>
<li>确定措施消灭质量问题</li>
</ol>
<h3 id="质量控制方法"><a href="#质量控制方法" class="headerlink" title="质量控制方法"></a>质量控制方法</h3><p>技术评审<br>代码走查<br>测试<br>返工</p>
<h2 id="质量保证与质量控制"><a href="#质量保证与质量控制" class="headerlink" title="质量保证与质量控制"></a>质量保证与质量控制</h2><p>QA:审计产品和过程质量，保证过程被正确执行，确认项目按照要求进行。<br>QC:检验产品的质量，保证产品符合客户的需求。是产品质量监察者，即挑毛病。<br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210506160420.png" alt="20210506160420"></p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ol>
<li>软件质量管理过程<ol>
<li>质量计划</li>
<li>质量保证</li>
<li>质量控制</li>
</ol>
</li>
<li>软件质量计划</li>
</ol>
]]></content>
      <categories>
        <category>软件项目管理</category>
      </categories>
      <tags>
        <tag>软件项目管理</tag>
      </tags>
  </entry>
  <entry>
    <title>快速排序</title>
    <url>/2021/04/27/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<p>分治思想<br>整个数组找基准（一般事最左边或者最右边），所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面<br>递归实现<br>复杂度nlogn</p>
<span id="more"></span>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quicksort</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp;a)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l&gt;=r)<span class="keyword">return</span> ;</span><br><span class="line">	<span class="keyword">int</span> i=l,j=r;</span><br><span class="line">	<span class="keyword">int</span> base=a[l];<span class="comment">//以最左边的值作为基准</span></span><br><span class="line">	<span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span>(i&lt;j&amp;&amp;a[j]&gt;=base)j--;<span class="comment">//因为以左边为基准，所以从右边开始遍历</span></span><br><span class="line">		<span class="keyword">while</span>(i&lt;j&amp;&amp;a[i]&lt;=base)i++;</span><br><span class="line">		<span class="keyword">if</span>(i&lt;j)&#123;</span><br><span class="line">			<span class="keyword">int</span> cnt=a[i];</span><br><span class="line">			a[i]=a[j];</span><br><span class="line">			a[j]=cnt;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	a[l]=a[i];</span><br><span class="line">	a[i]=base;<span class="comment">//交换当前值与基准值</span></span><br><span class="line">	quicksort(l,i<span class="number">-1</span>,a);</span><br><span class="line">	quicksort(i+<span class="number">1</span>,r,a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="keyword">int</span> x;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">		a.push_back(x);</span><br><span class="line">	&#125;	</span><br><span class="line">	quicksort(<span class="number">0</span>,n<span class="number">-1</span>,a);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;	</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">3 2 1 4 5</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
        <category>排序</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中的POJO类(DO/BO/DTO/VO/AO/PO)</title>
    <url>/2021/04/25/POJO/</url>
    <content><![CDATA[<h2 id="PO-persistant-object-持久对象"><a href="#PO-persistant-object-持久对象" class="headerlink" title="PO(persistant object) 持久对象"></a>PO(persistant object) 持久对象</h2><p>在 o/r 映射的时候出现的概念，如果没有 o/r 映射，没有这个概念存在了。通常对应数据模型 ( 数据库 ), 本身还有部分业务逻辑的处理。可以看成是与数据库中的表相映射的 java 对象。最简单的 PO 就是对应数据库中某个表中的一条记录，多个记录可以用 PO 的集合。 PO 中应该不包含任何对数据库的操作。</p>
<span id="more"></span>

<h2 id="DO（Domain-Object）领域对象"><a href="#DO（Domain-Object）领域对象" class="headerlink" title="DO（Domain Object）领域对象"></a>DO（Domain Object）领域对象</h2><p>就是从现实世界中抽象出来的有形或无形的业务实体。一般和数据中的表结构对应。</p>
<h2 id="TO-Transfer-Object-，数据传输对象"><a href="#TO-Transfer-Object-，数据传输对象" class="headerlink" title="TO(Transfer Object) ，数据传输对象"></a>TO(Transfer Object) ，数据传输对象</h2><p>在应用程序不同 tie( 关系 ) 之间传输的对象</p>
<h2 id="DTO（Data-Transfer-Object）数据传输对象"><a href="#DTO（Data-Transfer-Object）数据传输对象" class="headerlink" title="DTO（Data Transfer Object）数据传输对象"></a>DTO（Data Transfer Object）数据传输对象</h2><p>这个概念来源于J2EE的设计模式，原来的目的是为了EJB的分布式应用提供粗粒度的数据实体，以减少分布式调用的次数，从而提高分布式调用的性能和降低网络负载，但在这里，我泛指用于展示层与服务层之间的数据传输对象。</p>
<h2 id="VO-view-object-值对象"><a href="#VO-view-object-值对象" class="headerlink" title="VO(view object) 值对象"></a>VO(view object) 值对象</h2><p>视图对象，用于展示层，它的作用是把某个指定页面（或组件）的所有数据封装起来。</p>
<h2 id="BO-business-object-业务对象"><a href="#BO-business-object-业务对象" class="headerlink" title="BO(business object) 业务对象"></a>BO(business object) 业务对象</h2><p>从业务模型的角度看 , 见 UML 元件领域模型中的领域对象。封装业务逻辑的 java 对象 , 通过调用 DAO 方法 , 结合 PO,VO 进行业务操作。 business object: 业务对象 主要作用是把业务逻辑封装为一个对象。这个对象可以包括一个或多个其它的对象。 比如一个简历，有教育经历、工作经历、社会关系等等。 我们可以把教育经历对应一个 PO ，工作经历对应一个 PO ，社会关系对应一个 PO 。 建立一个对应简历的 BO 对象处理简历，每个 BO 包含这些 PO 。 这样处理业务逻辑时，我们就可以针对 BO 去处理。</p>
<h2 id="POJO-plain-ordinary-java-object-简单无规则-java-对象"><a href="#POJO-plain-ordinary-java-object-简单无规则-java-对象" class="headerlink" title="POJO(plain ordinary java object) 简单无规则 java 对象"></a>POJO(plain ordinary java object) 简单无规则 java 对象</h2><p>纯的传统意义的 java 对象。就是说在一些 Object/Relation Mapping 工具中，能够做到维护数据库表记录的 persisent object 完全是一个符合 Java Bean 规范的纯 Java 对象，没有增加别的属性和方法。我的理解就是最基本的 Java Bean ，只有属性字段及 setter 和 getter 方法！。</p>
<h2 id="DAO-data-access-object-数据访问对象"><a href="#DAO-data-access-object-数据访问对象" class="headerlink" title="DAO(data access object) 数据访问对象"></a>DAO(data access object) 数据访问对象</h2><p>是一个 sun 的一个标准 j2ee 设计模式， 这个模式中有个接口就是 DAO ，它负持久层的操作。为业务层提供接口。此对象用于访问数据库。通常和 PO 结合使用， DAO 中包含了各种数据库的操作方法。通过它的方法 , 结合 PO 对数据库进行相关的操作。夹在业务逻辑与数据库资源中间。配合 VO, 提供数据库的 CRUD 操作</p>
<h2 id="分层领域模型规约："><a href="#分层领域模型规约：" class="headerlink" title="分层领域模型规约："></a>分层领域模型规约：</h2><ul>
<li>DO（ Data Object）：与数据库表结构一一对应，通过DAO层向上传输数据源对象。</li>
<li>DTO（ Data Transfer Object）：数据传输对象，Service或Manager向外传输的对象。</li>
<li>BO（ Business Object）：业务对象。 由Service层输出的封装业务逻辑的对象。</li>
<li>AO（ Application Object）：应用对象。 在Web层与Service层之间抽象的复用对象模型，极为贴近展示层，复用度不高。</li>
<li>VO（ View Object）：显示层对象，通常是Web向模板渲染引擎层传输的对象。</li>
<li>POJO（ Plain Ordinary Java Object）：在本手册中， POJO专指只有setter/getter/toString的简单类，包括DO/DTO/BO/VO等。</li>
<li>Query：数据查询对象，各层接收上层的查询请求。 注意超过2个参数的查询封装，禁止使用Map类来传输。</li>
</ul>
<h2 id="领域模型命名规约："><a href="#领域模型命名规约：" class="headerlink" title="领域模型命名规约："></a>领域模型命名规约：</h2><ul>
<li>数据对象：xxxDO，xxx即为数据表名。</li>
<li>数据传输对象：xxxDTO，xxx为业务领域相关的名称。</li>
<li>展示对象：xxxVO，xxx一般为网页名称。</li>
<li>POJO是DO/DTO/BO/VO的统称，禁止命名成xxxPOJO。</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>第5章 软件项目任务分解</title>
    <url>/2021/04/15/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/5-%E4%BB%BB%E5%8A%A1%E5%88%86%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="第5章-软件项目任务分解"><a href="#第5章-软件项目任务分解" class="headerlink" title="第5章 软件项目任务分解"></a>第5章 软件项目任务分解</h2><h3 id="本章要点"><a href="#本章要点" class="headerlink" title="本章要点"></a>本章要点</h3><blockquote>
<p>1、任务分解定义</p>
<p>2、任务分解方法</p>
<p>3、任务分解的基本步骤</p>
</blockquote>
<span id="more"></span>

<h3 id="任务分解"><a href="#任务分解" class="headerlink" title="任务分解"></a>任务分解</h3><h4 id="任务分解过程"><a href="#任务分解过程" class="headerlink" title="任务分解过程"></a>任务分解过程</h4><p>将一个项目分解为更多的工作细目或者子项目，使项目变得更小、更易管理、更易操作</p>
<h4 id="任务分解结果"><a href="#任务分解结果" class="headerlink" title="任务分解结果"></a>任务分解结果</h4><p>WBS（ Work Breakdown Structure:任务分解结构）</p>
<h3 id="WBS"><a href="#WBS" class="headerlink" title="WBS"></a>WBS</h3><ul>
<li><p>WBS是对项目由粗到细的分解过程。</p>
</li>
<li><p>面向交付成果的</p>
</li>
<li><p>WBS它组织并定义了整个项目范围</p>
<ol>
<li><font color=red>不包括在WBS中的任务就不是该项目的工作</font></li>
<li>WBS中的每一个具体细目通常都指定唯一的<font color=red>（编码）</font>。</li>
<li><font color=red>WBS提供了项目范围基线。</font></li>
<li><font color=red>WBS的最底层任务是能分配到一个项目经理完成的任务。</font></li>
</ol>
</li>
</ul>
<h3 id="工作包（-Work-packages）"><a href="#工作包（-Work-packages）" class="headerlink" title="工作包（ Work packages）"></a>工作包（ Work packages）</h3><ul>
<li>WBS的最低层次的可交付成果</li>
<li>工作包应当由唯一主体负责</li>
</ul>
<h3 id="任务分解的形式-图表形式的WBS"><a href="#任务分解的形式-图表形式的WBS" class="headerlink" title="任务分解的形式-图表形式的WBS"></a>任务分解的形式-图表形式的WBS</h3><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210412151208.png" alt="image-20210412151201486" style="zoom:50%;" />

<h3 id="任务分解的形式-清单形式的WBS"><a href="#任务分解的形式-清单形式的WBS" class="headerlink" title="任务分解的形式-清单形式的WBS"></a>任务分解的形式-清单形式的WBS</h3><p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/image-20210412151305459.png" alt="image-20210412151305459"></p>
<h3 id="分解方法"><a href="#分解方法" class="headerlink" title="分解方法"></a>分解方法</h3><h4 id="类比"><a href="#类比" class="headerlink" title="类比"></a>类比</h4><p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210412152239.png" alt="image-20210412152118346"></p>
<h4 id="模板参照"><a href="#模板参照" class="headerlink" title="模板参照"></a>模板参照</h4><p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210412152307.png" alt="image-20210412152148334"></p>
<h4 id="自上而下"><a href="#自上而下" class="headerlink" title="自上而下"></a>自上而下</h4><p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210412152447.png" alt="image-20210412152447387"></p>
<h4 id="自下而上"><a href="#自下而上" class="headerlink" title="自下而上"></a>自下而上</h4><p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210412152632.png" alt="image-20210412152632701"></p>
<p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210412152715.png" alt="image-20210412152714656"></p>
<h3 id="任务分解的基本步骤"><a href="#任务分解的基本步骤" class="headerlink" title="任务分解的基本步骤"></a>任务分解的基本步骤</h3><p>①确认并分解项目的组成要素(WBS编号)</p>
<p>②确定分解标准</p>
<p>③确定分解是否详细</p>
<p>④确定项目交付成果（可以编制WBS字典）</p>
<p>⑤验证分解的正确性</p>
<p>​     验证分解正确后，建立一套编号系统。</p>
<h3 id="WBS编号系统"><a href="#WBS编号系统" class="headerlink" title="WBS编号系统"></a>WBS编号系统</h3><p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/image-20210412153250548.png" alt="image-20210412153250548"></p>
<h3 id="分解标准应统一-学生管理"><a href="#分解标准应统一-学生管理" class="headerlink" title="分解标准应统一:学生管理"></a>分解标准应统一:学生管理</h3><p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/image-20210412153331265.png" alt="image-20210412153331265"></p>
<h3 id="不能同时使用两种标准进行分解"><a href="#不能同时使用两种标准进行分解" class="headerlink" title="不能同时使用两种标准进行分解:"></a>不能同时使用两种标准进行分解:</h3><p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210412153356.png" alt="image-20210412153356635"></p>
<h3 id="WBS字典"><a href="#WBS字典" class="headerlink" title="WBS字典"></a>WBS字典</h3><p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210412153502.png" alt="image-20210412153502662"></p>
<h3 id="检验分解结果的标准"><a href="#检验分解结果的标准" class="headerlink" title="检验分解结果的标准"></a>检验分解结果的标准</h3><p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210412154332.png" alt="image-20210412154332342"></p>
<h3 id="WBS任务分解建议"><a href="#WBS任务分解建议" class="headerlink" title="WBS任务分解建议"></a>WBS任务分解建议</h3><ul>
<li>最低层是可控的和可管理的，但是不必要的过细</li>
<li>每个Work package必须有一个提交物</li>
<li>定义任务完成的标准</li>
<li>有利于责任分配</li>
<li>推荐任务分解到40小时以内</li>
</ul>
]]></content>
      <categories>
        <category>软件项目管理</category>
      </categories>
      <tags>
        <tag>软件项目管理</tag>
      </tags>
  </entry>
  <entry>
    <title>第 4 章软件项目需求管理</title>
    <url>/2021/04/15/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/4-%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82/</url>
    <content><![CDATA[<h2 id="第-4-章软件项目需求管理"><a href="#第-4-章软件项目需求管理" class="headerlink" title="第 4 章软件项目需求管理"></a>第 4 章软件项目需求管理</h2><h3 id="本章要点"><a href="#本章要点" class="headerlink" title="本章要点"></a>本章要点</h3><blockquote>
<p>1.软件需求定义</p>
<p>2.软件需求管理过程</p>
<p>3.需求建模的基本方法</p>
</blockquote>
<span id="more"></span>

<h3 id="软件需求定义"><a href="#软件需求定义" class="headerlink" title="软件需求定义"></a>软件需求定义</h3><p>需求是指用户对软件的功能和性能的要求</p>
<img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210414204618.png" alt="image-20210414204611108" style="zoom:67%;" />

<h3 id="软件需求管理的过程"><a href="#软件需求管理的过程" class="headerlink" title="软件需求管理的过程"></a>软件需求管理的过程</h3><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210414204657.png" alt="image-20210414204657789" style="zoom:67%;" />

<h4 id="1、需求获取"><a href="#1、需求获取" class="headerlink" title="1、需求获取"></a>1、需求获取</h4><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210414204813.png" alt="image-20210414204813361" style="zoom:50%;" />

<h4 id="2、需求分析"><a href="#2、需求分析" class="headerlink" title="2、需求分析"></a>2、需求分析</h4><p>需求分析是为最终用户所看到的系统建立一个概念模型，是对需求的抽象描述。</p>
<h5 id="需求分析模型"><a href="#需求分析模型" class="headerlink" title="需求分析模型"></a>需求分析模型</h5><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210415154118.png" style="zoom:50%;" />

<h4 id="3、需求规格编写"><a href="#3、需求规格编写" class="headerlink" title="3、需求规格编写"></a>3、需求规格编写</h4><p>需求分析工作完成的一个基本标志是形成了一份完整的、规范的需求规格说明书</p>
<h4 id="4、需求验证"><a href="#4、需求验证" class="headerlink" title="4、需求验证"></a>4、需求验证</h4><p>需求是正确的吗？<br>需求是一致的吗？<br>需求是完全的吗？<br>需求是实际可行的吗？<br>需求是必要的吗？<br>需求是可检验的吗？<br>需求是可跟踪的吗？<br>最后的签字</p>
<h4 id="5、需求总在变化"><a href="#5、需求总在变化" class="headerlink" title="5、需求总在变化"></a>5、需求总在变化</h4><h3 id="需求变更管理"><a href="#需求变更管理" class="headerlink" title="需求变更管理"></a>需求变更管理</h3><p>①<strong>建立需求基线</strong></p>
<p>②<strong>确定需求变更控制过程</strong></p>
<p>③<strong>建立变更控制委员会</strong>(SCCB)</p>
<p>④<strong>进行需求变更影响分析</strong></p>
<p>⑤<strong>跟踪所有受需求变更影响的工作产品</strong></p>
<p>⑥<strong>建立需求基准版本和需求控制版本文档，维护需求变更的历史记录</strong></p>
<p>⑦<strong>跟踪每项需求的状态衡量需求稳定性</strong></p>
<h4 id="需求变更控制流程"><a href="#需求变更控制流程" class="headerlink" title="需求变更控制流程"></a>需求变更控制流程</h4><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210414205334.png" alt="image-20210414205334084" style="zoom: 67%;" />

<h3 id="需求建模的基本方法介绍"><a href="#需求建模的基本方法介绍" class="headerlink" title="需求建模的基本方法介绍"></a>需求建模的基本方法介绍</h3><p>1.原型方法</p>
<p>2.结构化分析法</p>
<p>3.面向对象的用例分析法</p>
<p>4.功能列表法</p>
<h4 id="1、原型方法"><a href="#1、原型方法" class="headerlink" title="1、原型方法"></a>1、原型方法</h4><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210415154435.png" alt="image-20210414205426895" style="zoom:50%;" />

<h4 id="2、结构化分析方法"><a href="#2、结构化分析方法" class="headerlink" title="2、结构化分析方法"></a>2、结构化分析方法</h4><p>20世纪70年发展起来的面向数据流的方法<br>根据软件内部数据传递、变换的关系进行分析的</p>
<ul>
<li>数据流图(DFD)</li>
<li>数据字典(DD)</li>
<li>实体联系图(ER)</li>
<li>系统流程图</li>
</ul>
<h4 id="3、面向对象的用例分析"><a href="#3、面向对象的用例分析" class="headerlink" title="3、面向对象的用例分析"></a>3、面向对象的用例分析</h4><ul>
<li>基于面向对象的情景分析方法</li>
<li>从用户角度出发考虑的功能需求</li>
<li>用例是系统向用户提供一个有价值的结果的某项功能</li>
</ul>
<h5 id="UML需求视图"><a href="#UML需求视图" class="headerlink" title="UML需求视图"></a>UML需求视图</h5><p>用例视图（Use case Diagram）<br>顺序图（Sequence Diagram）<br>状态图（State Diagram）<br>活动图（Activity Diagram）</p>
<h5 id="用例需求分析方法综述"><a href="#用例需求分析方法综述" class="headerlink" title="用例需求分析方法综述"></a>用例需求分析方法综述</h5><p>识别出系统的Actor<br>描述主要的Use case<br>实现用例视图<br>实现顺序视图，活动视图,状态视图等</p>
<h4 id="4、功能列表"><a href="#4、功能列表" class="headerlink" title="4、功能列表"></a>4、功能列表</h4><p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210414210109.png" alt="image-20210414210109384"></p>
<h4 id="基于功能列表的实例"><a href="#基于功能列表的实例" class="headerlink" title="基于功能列表的实例"></a>基于功能列表的实例</h4><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210414210205.png" alt="image-20210414210205113" style="zoom:67%;" />

<p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210414210421.png" alt="image-20210414210421647"></p>
<h3 id="需求管理-小结"><a href="#需求管理-小结" class="headerlink" title="需求管理-小结"></a>需求管理-小结</h3><p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210414210601.png" alt="image-20210414210600979"></p>
]]></content>
      <categories>
        <category>软件项目管理</category>
      </categories>
      <tags>
        <tag>软件项目管理</tag>
      </tags>
  </entry>
  <entry>
    <title>第三章 软件生存期模型</title>
    <url>/2021/04/15/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/3-%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B-%E7%94%9F%E5%AD%98%E6%9C%9F/</url>
    <content><![CDATA[<h2 id="第三章-软件生存期模型"><a href="#第三章-软件生存期模型" class="headerlink" title="第三章 软件生存期模型"></a>第三章 软件生存期模型</h2><h3 id="本章要点"><a href="#本章要点" class="headerlink" title="本章要点"></a>本章要点</h3><blockquote>
<p>1、生存期模型定义</p>
<p>2、传统生存期模型</p>
<p>3、敏捷生存期模型</p>
</blockquote>
<span id="more"></span>
<p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210411165234.png" alt="image-20210411165234548"></p>
<h3 id="软件生存期模型特征"><a href="#软件生存期模型特征" class="headerlink" title="软件生存期模型特征"></a>软件生存期模型特征</h3><ul>
<li>描述了开发的主要阶段</li>
<li>定义每一个阶段要完成的主要过程和活动</li>
<li>确定每一个阶段的输入和输出</li>
</ul>
<h3 id="常用传统生存期模型"><a href="#常用传统生存期模型" class="headerlink" title="常用传统生存期模型"></a>常用传统生存期模型</h3><h3 id="瀑布模型"><a href="#瀑布模型" class="headerlink" title="瀑布模型"></a>瀑布模型</h3><p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210411165726%E7%80%91%E5%B8%83%E6%A8%A1%E5%9E%8B.png" alt="image-20210411165726101"></p>
<h4 id="适合瀑布模型的项目特征："><a href="#适合瀑布模型的项目特征：" class="headerlink" title="适合瀑布模型的项目特征："></a><strong>适合瀑布模型的项目特征：</strong></h4><p>需求：很明确</p>
<p>方案：很明确</p>
<p>类似项目：短期项目等</p>
<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a><strong>优点</strong></h4><ul>
<li>简单、易用、直观</li>
<li>开发进程比较严格，一个进程接着一个进程</li>
<li>模型执行过程中需要严密控制</li>
<li>允许基线和配置早期接受控制</li>
<li>为项目提供了按阶段划分的检查点，当前一个阶段完成后，只需要关注后续阶段</li>
</ul>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a><strong>缺点</strong></h4><ul>
<li>在软件开发的初期阶段就要求做出正确、全面、完整的需求分析对许多应用软件来说是极其困难的</li>
<li>由于开发模型是线性的，模型中没有反馈过程，用户只有等到整个过程的末期才能见到开发成果，从而增加了开发风险</li>
<li>一个新的项目不适合瀑布模型，除非在项目的后期</li>
<li>用户直到项目结束才能看到产品的质量，用户不是渐渐地熟悉系统</li>
<li>不允许变更或者限制变更</li>
<li>早期的错误可能要等到开发后期才能发现，进而带来严重后果</li>
</ul>
<h4 id="使用范围"><a href="#使用范围" class="headerlink" title="使用范围"></a><strong>使用范围</strong></h4><ul>
<li>适合于软件需求很明确的软件项目</li>
<li>短期项目可以采用瀑布模型</li>
</ul>
<h3 id="V模型"><a href="#V模型" class="headerlink" title="V模型"></a>V模型</h3><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210411170246V%E6%A8%A1%E5%9E%8B.png" alt="image-20210411170246491" style="zoom:50%;" />

<h4 id="适合V模型的项目特征："><a href="#适合V模型的项目特征：" class="headerlink" title="适合V模型的项目特征："></a><strong>适合V模型的项目特征：</strong></h4><p>需求：很明确</p>
<p>方案：很明确</p>
<p>类似项目：系统性能、<font color=red>安全等有严格要求</font>等</p>
<h3 id="原型模型"><a href="#原型模型" class="headerlink" title="原型模型"></a>原型模型</h3><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210411170442%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%9E%8B.png" alt="image-20210411170442675" style="zoom:50%;" />

<h4 id="适合原型模型的项目特征："><a href="#适合原型模型的项目特征：" class="headerlink" title="适合原型模型的项目特征："></a><strong>适合原型模型的项目特征：</strong></h4><p>需求：不明确</p>
<p>希望：减少项目需求的不确定性</p>
<p><font color=red>可以构建一部分系统的模型，通过用户试用提出优缺点，最好选择（快速原型模型）生存期模型。</font></p>
<h3 id="增量模型"><a href="#增量模型" class="headerlink" title="增量模型"></a>增量模型</h3><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210411170619%E5%A2%9E%E9%87%8F%E6%A8%A1%E5%9E%8B.png" alt="image-20210411170619294" style="zoom:50%;" />

<h4 id="适合增量模型的项目特征："><a href="#适合增量模型的项目特征：" class="headerlink" title="适合增量模型的项目特征："></a><strong>适合增量模型的项目特征：</strong></h4><p>需求：基本明确，可能发生变化</p>
<p>市场、用户：对于市场和用户把握需要逐步了解</p>
<p>系统改造：需要一步一步实施</p>
<p><font color=red>为避免一次性投资太多带来的风险，最好选择（增量式模型 ）生存期模型。</font></p>
<h3 id="渐进式阶段模型"><a href="#渐进式阶段模型" class="headerlink" title="渐进式阶段模型"></a>渐进式阶段模型</h3><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210411170821.png" alt="image-20210411170821493" style="zoom:50%;" />

<p>也称为：渐进式迭代模型</p>
<h4 id="渐进式开发"><a href="#渐进式开发" class="headerlink" title="渐进式开发"></a><strong>渐进式开发</strong></h4><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210411170925.png" alt="image-20210411170925245" style="zoom: 50%;" />

<h4 id="阶段性提交"><a href="#阶段性提交" class="headerlink" title="阶段性提交"></a><strong>阶段性提交</strong></h4><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210411171001.png" alt="image-20210411171001295" style="zoom:50%;" />

<h4 id="渐进式阶段模型的优点"><a href="#渐进式阶段模型的优点" class="headerlink" title="渐进式阶段模型的优点"></a><strong>渐进式阶段模型的优点</strong></h4><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210411171040.png" alt="image-20210411171040801" style="zoom:50%;" />

<h4 id="RUP模型—-渐进式阶段模型"><a href="#RUP模型—-渐进式阶段模型" class="headerlink" title="RUP模型—-渐进式阶段模型"></a><strong>RUP模型—-渐进式阶段模型</strong></h4><p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/image-20210411171148810.png" alt="image-20210411171148810"></p>
<h3 id="敏捷模型"><a href="#敏捷模型" class="headerlink" title="敏捷模型"></a>敏捷模型</h3><ul>
<li>敏捷组织提出的一个灵活开发方法</li>
<li>应对迅速变化需求的快速软件开发方法</li>
<li>是一种迭代、循序渐进的开发方法</li>
</ul>
<p><font color=red>敏捷开发通过（ 迭代）和快速用户反馈应对管理的不确定性和变更。</font></p>
<p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/image-20210415135618249.png" alt="image-20210415135618249"></p>
<h4 id="敏捷宣言"><a href="#敏捷宣言" class="headerlink" title="敏捷宣言"></a>敏捷宣言</h4><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210415135954.png" alt="image-20210415135954447" style="zoom:67%;" />

<h3 id="Scrum模型"><a href="#Scrum模型" class="headerlink" title="Scrum模型"></a>Scrum模型</h3><p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/image-20210415140047715.png" alt="image-20210415140047715"></p>
<h3 id="XP-eXtreme-Programming-极限编程模型"><a href="#XP-eXtreme-Programming-极限编程模型" class="headerlink" title="XP(eXtreme Programming)极限编程模型"></a>XP(eXtreme Programming)极限编程模型</h3><p>XP(eXtreme Programming)极限编程是由Kent Beck提出的一套针对业务需求和软件开发实践的规则。</p>
<h4 id="极限编程方法的实施原则"><a href="#极限编程方法的实施原则" class="headerlink" title="极限编程方法的实施原则"></a>极限编程方法的实施原则</h4><ul>
<li>快速反馈 (Rapid feedback) </li>
<li>假设简单 (Assuming simplicity) </li>
<li>包容变化 (Embracing change) </li>
</ul>
<h3 id="选择生存期的步骤"><a href="#选择生存期的步骤" class="headerlink" title="选择生存期的步骤"></a>选择生存期的步骤</h3><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210415140415.png" alt="image-20210415140415590" style="zoom:67%;" />

<h3 id="迭代模型"><a href="#迭代模型" class="headerlink" title="迭代模型"></a>迭代模型</h3><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210415140543.png" alt="image-20210415140543304" style="zoom:67%;" />

<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><h4 id="生存期模型"><a href="#生存期模型" class="headerlink" title="生存期模型"></a>生存期模型</h4><ul>
<li>瀑布模型</li>
<li>V模型</li>
<li>原型模型</li>
<li>增量模型</li>
<li>渐进式阶段模型</li>
<li>敏捷开发模型</li>
</ul>
]]></content>
      <categories>
        <category>软件项目管理</category>
      </categories>
      <tags>
        <tag>软件项目管理</tag>
      </tags>
  </entry>
  <entry>
    <title>第二章 软件项目确立</title>
    <url>/2021/04/15/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/2-%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B--%E9%A1%B9%E7%9B%AE%E7%A1%AE%E7%AB%8B/</url>
    <content><![CDATA[<h2 id="第二章-软件项目确立"><a href="#第二章-软件项目确立" class="headerlink" title="第二章 软件项目确立"></a>第二章 软件项目确立</h2><h3 id="本章要点"><a href="#本章要点" class="headerlink" title="本章要点"></a>本章要点</h3><blockquote>
<p>一、项目立项</p>
<p>二、项目招标书</p>
<p>三、项目授权</p>
</blockquote>
<span id="more"></span>
<p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210408074250.png" alt="image-20210408074250488"></p>
<h3 id="项目立项"><a href="#项目立项" class="headerlink" title="项目立项"></a>项目立项</h3><p>  明确项目的目标、时间表、项目使用的资源和经费，而且得到<strong>执行该项目的项目经理和项目发起人的认可</strong></p>
<h3 id="Make-or-Buy决策"><a href="#Make-or-Buy决策" class="headerlink" title="Make or Buy决策"></a>Make or Buy决策</h3><p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210408081705.png" alt="image-20210408081705615"></p>
<p>make:自主开发</p>
<p>buy:购买、外包</p>
<h3 id="项目招投标过程"><a href="#项目招投标过程" class="headerlink" title="项目招投标过程"></a>项目招投标过程</h3><p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210408082935.png" alt="image-20210408082935363"></p>
<h4 id="甲方招标书定义过程"><a href="#甲方招标书定义过程" class="headerlink" title="甲方招标书定义过程"></a>甲方招标书定义过程</h4><p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210411164529.png" alt="image-20210411164529462"></p>
<p>招标书主要包括三部分内容：<br>技术说明、商务说明、投标说明</p>
<h4 id="乙方项目分析"><a href="#乙方项目分析" class="headerlink" title="乙方项目分析"></a>乙方项目分析</h4><p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210411164836.png" alt="image-20210411164836006"></p>
<p><strong>乙方标书（建议书）</strong></p>
<p><strong>项目初始阶段甲方为顾客，乙方为软件开发方</strong></p>
<h3 id="项目章程-Project-Charter"><a href="#项目章程-Project-Charter" class="headerlink" title="项目章程(Project Charter)"></a>项目章程(Project Charter)</h3><p> <strong>确认项目存在的文件，包括对项目的确认、对项目经理的授权和项目目标的概述等。</strong></p>
<h3 id="项目经理的职责"><a href="#项目经理的职责" class="headerlink" title="项目经理的职责"></a>项目经理的职责</h3><p>开发计划、组织实施、项目控制</p>
<p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210411165044.png" alt="image-20210411165044862"></p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul>
<li>立项</li>
<li>招投标</li>
<li>项目授权</li>
</ul>
]]></content>
      <categories>
        <category>软件项目管理</category>
      </categories>
      <tags>
        <tag>软件项目管理</tag>
      </tags>
  </entry>
  <entry>
    <title>第一章 软件项目管理概述</title>
    <url>/2021/04/15/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/%E7%AC%AC%E4%B8%80%E7%AB%A0%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h2 id="第一章-软件项目管理概述"><a href="#第一章-软件项目管理概述" class="headerlink" title="第一章 软件项目管理概述"></a>第一章 软件项目管理概述</h2><blockquote>
<p>本章要点</p>
<p>一、项目与软件项目</p>
<p>二、项目管理与软件项目管理</p>
<p>三、项目管理知识体系（PMBOK）</p>
<p>四、过程管理与软件项目管理的关系</p>
<p>五、软件项目管理的过程</p>
</blockquote>
<span id="more"></span>

<h3 id="项目定义"><a href="#项目定义" class="headerlink" title="项目定义"></a>项目定义</h3><p>项目是为了创造一个<strong>唯一</strong>的产品或提供一个<strong>唯一</strong>的服务而进行的<strong>临时性</strong>的努力。</p>
<h3 id="项目的特征"><a href="#项目的特征" class="headerlink" title="项目的特征"></a>项目的特征</h3><ul>
<li>有明确的目标</li>
<li>项目之间的活动具有相关性</li>
<li>限定的周期</li>
<li>有独特性</li>
<li>资源成本的约束性</li>
<li>项目的不确定性</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210408071906%E5%93%AA%E4%BA%9B%E6%98%AF%E9%A1%B9%E7%9B%AE.png" alt="image-20210408071858233" style="zoom: 50%;" />

<h3 id="日常运作与项目的共同点"><a href="#日常运作与项目的共同点" class="headerlink" title="日常运作与项目的共同点"></a>日常运作与项目的共同点</h3><ul>
<li>都需要人来完成</li>
<li>均受到有限资源的限制</li>
<li>均需要计划、执行、控制</li>
</ul>
<h3 id="日常运作与项目的不同点"><a href="#日常运作与项目的不同点" class="headerlink" title="日常运作与项目的不同点"></a>日常运作与项目的不同点</h3><ul>
<li>项目是一次性的，日常运作是重复进行的；</li>
<li>项目是以目标为导向的，日常运作是通过效率和有效性体现的；</li>
<li>项目是通过项目经理及其团队工作完成的，日常运作是职能式的线性管理；</li>
<li>项目存在大量的变更管理，日常运作基本保持持续的连贯性。</li>
</ul>
<h3 id="软件项目的特殊性"><a href="#软件项目的特殊性" class="headerlink" title="软件项目的特殊性"></a>软件项目的特殊性</h3><ul>
<li>逻辑实体</li>
<li>相互作用的系统</li>
<li>渐进明细</li>
<li>变更</li>
</ul>
<h3 id="软件项目要素"><a href="#软件项目要素" class="headerlink" title="软件项目要素"></a>软件项目要素</h3><ul>
<li>软件开发的过程；</li>
<li>软件开发的结果；</li>
<li>软件开发赖以生存的资源及软件项目的特定委托人（客户，既是项目结果的需求者，也是项目实施的资金提供者）</li>
</ul>
<h3 id="项目目标实现的制约因素"><a href="#项目目标实现的制约因素" class="headerlink" title="项目目标实现的制约因素"></a>项目目标实现的制约因素</h3><ul>
<li>项目范围：为使客户满意做的所有工作；</li>
<li>成本：完成项目所需的费用；</li>
<li>进度计划：每项任务的起止时间及所需的资源；</li>
<li>客户满意度：交付成果的质量。</li>
</ul>
<h3 id="项目管理定义"><a href="#项目管理定义" class="headerlink" title="项目管理定义"></a>项目管理定义</h3><p>项目管理是一系列的伴随着项目的进行而进行的、目的是为了确保项目能够达到期望的结果的一系列管理行为。</p>
<h3 id="软件项目管理的根本目的"><a href="#软件项目管理的根本目的" class="headerlink" title="软件项目管理的根本目的"></a>软件项目管理的根本目的</h3><p>软件项目管理的根本目的是让软件项目尤其是大型项目的生命周期能在管理者的控制之下，以预定成本按期、按质地完成软件项目，并且交付用户使用。</p>
<p>研究软件项目管理是为了从已有的成功或者失败的案例中总结出能够指导今后开发的通用原则、方法，以避免前人的失误。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210408073137PMBOK.png" alt="image-20210408073137193"></p>
<p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210408073232PMBOK.png" alt="image-20210408073232884"></p>
<h3 id="过程管理"><a href="#过程管理" class="headerlink" title="过程管理"></a>过程管理</h3><p>过程管理，就是对过程进行管理，目的是要让过程能够被共享、复用，并得到持续的改进。</p>
<h3 id="软件项目管理过程组"><a href="#软件项目管理过程组" class="headerlink" title="软件项目管理过程组"></a>软件项目管理过程组</h3><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210408073443.png" alt="image-20210408073443713" style="zoom:50%;" />

<h3 id="软件项目管理过程"><a href="#软件项目管理过程" class="headerlink" title="软件项目管理过程"></a>软件项目管理过程</h3><p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210408073601.png" alt="image-20210408073601271"></p>
<h4 id="项目初始"><a href="#项目初始" class="headerlink" title="项目初始"></a>项目初始</h4><p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210408073628.png" alt="image-20210408073628288"></p>
<h4 id="项目计划"><a href="#项目计划" class="headerlink" title="项目计划"></a>项目计划</h4><p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210408073643.png" alt="image-20210408073643850"></p>
<h4 id="项目执行控制"><a href="#项目执行控制" class="headerlink" title="项目执行控制"></a>项目执行控制</h4><p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210408073707.png" alt="image-20210408073707626"></p>
<h4 id="项目结束"><a href="#项目结束" class="headerlink" title="项目结束"></a>项目结束</h4><p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210408073732.png" alt="image-20210408073732402"></p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><blockquote>
<p>软件项目管理基本概念</p>
<p>过程管理与软件项目管理的关系</p>
<p>软件项目管理过程</p>
</blockquote>
]]></content>
      <categories>
        <category>软件项目管理</category>
      </categories>
      <tags>
        <tag>软件项目管理</tag>
      </tags>
  </entry>
  <entry>
    <title>Acwing101. 最高的牛</title>
    <url>/2021/04/14/acwing101%E6%9C%80%E9%AB%98%E7%9A%84%E7%89%9B/</url>
    <content><![CDATA[<h3 id="Acwing101-最高的牛"><a href="#Acwing101-最高的牛" class="headerlink" title="Acwing101. 最高的牛"></a>Acwing101. 最高的牛</h3><p>有 N 头牛站成一行，被编队为 1、2、3…N，每头牛的身高都为整数。</p>
<p>当且仅当两头牛中间的牛身高都比它们矮时，两头牛方可看到对方。</p>
<span id="more"></span>

<p>现在，我们只知道其中最高的牛是第 P 头，它的身高是 H ，剩余牛的身高未知。</p>
<p>但是，我们还知道这群牛之中存在着 M 对关系，每对关系都指明了某两头牛 A 和 B 可以相互看见。</p>
<p>求每头牛的身高的最大可能值是多少。</p>
<h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行输入整数 N,P,H,M，数据用空格隔开。</p>
<p>接下来 M 行，每行输出两个整数 A 和 B ，代表牛 A 和牛 B 可以相互看见，数据用空格隔开。</p>
<h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>一共输出 N 行数据，每行输出一个整数。</p>
<p>第 i 行输出的整数代表第 i 头牛可能的最大身高。</p>
<h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤N≤10000,<br>1≤H≤1000000,<br>1≤A,B≤10000,<br>0≤M≤10000</p>
<h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><p>9 3 5 5<br>1 3<br>5 3<br>4 3<br>3 7<br>9 8</p>
<h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><p>5<br>4<br>5<br>3<br>4<br>4<br>5<br>5<br>5<br>注意：<br>此题中给出的关系对可能存在重复</p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>如果a,b能相互看到，则a,b之间的数都减1。区间都减一个常数，用差分</p>
<p>每个区间只会嵌套（最多交点重合），不会出现区间相交</p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by alexa on 2021/4/14.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">1e5</span>+<span class="number">50</span>;</span><br><span class="line"><span class="keyword">int</span> a[MAXN];</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt;s;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,p,h,m;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;p&gt;&gt;h&gt;&gt;m;</span><br><span class="line">    a[<span class="number">0</span>]=h;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> x,y;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        <span class="keyword">if</span>(x&gt;y)swap(x,y);</span><br><span class="line">        <span class="keyword">if</span>(!s.count(&#123;x,y&#125;))&#123;</span><br><span class="line">            s.insert(&#123;x,y&#125;);</span><br><span class="line">            a[x+<span class="number">1</span>]--,a[y]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        a[i]+=a[i<span class="number">-1</span>];</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>差分</tag>
      </tags>
  </entry>
  <entry>
    <title>homebrew加速</title>
    <url>/2021/04/05/homebrew/</url>
    <content><![CDATA[<p>homebrew换源加速</p>
<span id="more"></span>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"># 替换brew.git:</span><br><span class="line">cd <span class="string">&quot;$(brew --repo)&quot;</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https:<span class="comment">//mirrors.aliyun.com/homebrew/brew.git</span></span><br><span class="line"></span><br><span class="line"># 替换homebrew-core.git:</span><br><span class="line">cd <span class="string">&quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot;</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https:<span class="comment">//mirrors.aliyun.com/homebrew/homebrew-core.git</span></span><br><span class="line"></span><br><span class="line"># 替换homebrew-cask.git:</span><br><span class="line">cd <span class="string">&quot;$(brew --repo)&quot;</span>/Library/Taps/homebrew/homebrew-cask</span><br><span class="line">git remote <span class="built_in">set</span>-url origin https:<span class="comment">//mirrors.ustc.edu.cn/homebrew-cask.git</span></span><br><span class="line"></span><br><span class="line"># 替换homebrew-bottles:</span><br><span class="line">echo &#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles&#x27; &gt;&gt; ~/.zshrc</span><br><span class="line">source ~/.zshrc</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>修改为国内镜像源</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">cd /usr/local/Homebrew</span><br><span class="line"></span><br><span class="line">git -C <span class="string">&quot;$(brew --repo)&quot;</span> remote <span class="built_in">set</span>-url origin https:<span class="comment">//mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git</span></span><br><span class="line"></span><br><span class="line">git -C <span class="string">&quot;$(brew --repo homebrew/core)&quot;</span> remote <span class="built_in">set</span>-url origin https:<span class="comment">//mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git</span></span><br><span class="line"></span><br><span class="line">git -C <span class="string">&quot;$(brew --repo homebrew/cask)&quot;</span> remote <span class="built_in">set</span>-url origin https:<span class="comment">//mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask.git</span></span><br><span class="line"></span><br><span class="line">brew update</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>复原的方法</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">cd /usr/local/Homebrew</span><br><span class="line"></span><br><span class="line">git -C <span class="string">&quot;$(brew --repo)&quot;</span> remote <span class="built_in">set</span>-url origin https:<span class="comment">//github.com/Homebrew/brew.git</span></span><br><span class="line"></span><br><span class="line">git -C <span class="string">&quot;$(brew --repo homebrew/core)&quot;</span> remote <span class="built_in">set</span>-url origin https:<span class="comment">//github.com/Homebrew/homebrew-core.git</span></span><br><span class="line"></span><br><span class="line">git -C <span class="string">&quot;$(brew --repo homebrew/cask)&quot;</span> remote <span class="built_in">set</span>-url origin https:<span class="comment">//github.com/Homebrew/homebrew-cask.git</span></span><br><span class="line"></span><br><span class="line">brew update</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>homebrew</category>
      </categories>
      <tags>
        <tag>homebrew</tag>
      </tags>
  </entry>
  <entry>
    <title>blog上传文章</title>
    <url>/2021/04/01/blog/%E5%86%99%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">title: </span><br><span class="line">author: Alexander</span><br><span class="line">date: </span><br><span class="line">updated: </span><br><span class="line">tags: [,]</span><br><span class="line">categories: </span><br><span class="line">description: </span><br><span class="line">comments: <span class="literal">true</span></span><br><span class="line">math: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!--more--&gt;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Ms</title>
    <url>/2021/03/24/Ms/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="72f62e9507e5f536650a9b13c3233f7fafb9262a8fcb755c8d569d885ba0d654">fa609df12acca9fd5a65b3cc320f97231d9e9d975f58f4d97f6e7dcf33f2e1dc0a7b05af63e551f7d10563d6bcddbd3d9eaaab32ce647f647baf2562dcaf5f5cd77c5b5e854ed2f8d7d1e8d7a14ee70671fb8c8a992a152aae762b2a113fe653b3c9bcabe8595c38eac0d6699d49d238225b4657c0821ec9bda8bf9030dbaebd036ad4547ec3150d1f5e0357f3180d508d7e2a8c5e7c34d490d6cd4c4b06944fa91498ca6f452c39c1748929b9e715a00517d8bf38a46897a6d2487970d39cdf114fdf04e3a65194e2ecd0e0e4f9eb1216862da2a3c3b9e26d53ff1fbc8e9749d0f436491bfc5b14cc4e84fd8dcf9a1d0eff1d235da1d332984f1c39fbf83d3c1cb1cb160dc7ce38654c9c0907ed8dd9dfa432a2eaa16c8e43e31c0e418fbdaf1e128d73cda32600b9d133859a092e4bf5910332c2c04e47e328a16bc87316ea85e2c8e43f7d0e3b703cefd7f1ea5e981d515017a8e9d9c99b18c426577fb258f7a73a81a893290d2c9a54d05ad56979ef14c729b73f2fd70c43de5ed2ac5ac0e79c2949f90bd13c4b5ae1af95ad829ecd5d2741c0f26d7efdb3609a8018fe7abf893f8135cf1772ee43161a39ea0fea8825d1c243192a572ef38ad31b03932065766aadd2f93a1652fd38eca5e249ab7913085a37d7419d6456bf0f3018b440a0a8a5fe794ac286cb7d8ebc31afe7c6a74f9cb3f2a0eeca66277d12deee875c8bb363aa1c620f1b8857b66a7accfa88be5fd2b485084f5a12eeb90839d36e5ecd874351c589dd7a7d952b0802df1230a1017022fb7b1d890c37f578d4048aac1962bac25d7a93c322f850e77f173bb70e9e7e0210dbb0c14f72d4abfb8bbbb033133a994c6cdc2b9aa84d60b1fcfd89f18ffcc9c3687852f660f31dc7a36e11146dba5b217ce8d8c84640168035bda637ff612cfe8576df7f133ff109e7885503ab4e21be641c168a0fa3d16f2befe178f68b1e8129fc6acfaea045775bbb0a41406f485043c1e7c2487e921446ea8b801b7f87d45cf4a9778f0b8a0a4e7709fa5dcca37e577ff1910e7e9775c52fe429f265a2ce2f9ecdcfa0799393a787f2eadd2b7eb568791e80a8b6e8b3f1e5b9f625b3e7df8f11423551c9a280ad8801d3bb58591a28301b1f223cb35440145b644c6c529700a71f7ed610682a490f97ca468045ccaa97d1c13be62ac3dccb957af054c15b40c819798ae5f8cd51667143714eaa3a3080ab48d8d90505b2c166cefcbbeab1ccb7c2ebf7c7328386a4d99a7e82280c7959596e37794d65c2caea1d408eeb9d6c85dfc16f7cae052778a64aa8b4f4bc052b68098af3f162b8bde57b0fb396cfccf8816260522782b7c5c94a7ad20cfeeecd91c241c752c437a268341e121bb3be3ab4556869e734dd416200c8f7d7e8a60157f7ed5b1bbb1444cdd0df0d461f3762637d3f851bb04a2ab441cfe3fb131971ed307cc04c1da8b326c8db53ccc8a5c5b36b4b00d2c71e3a73e2dd08dc073579a54d4f51e1f993e6b5f4aeeed47825fbe37839842e0288c1024e4343bebfc809f9fd4da27fce533ecf0c62dc70384fe5eede61a37f1467b6d5ec2dbb385698954a007b9f89df8bada5ad789ee61d2810307d2caaf00ab8abcfef060153bf3e206c908cae0f8ed7132a74980183b1d45a24b929d017e7ace602974151d34a0a43fcc35175c0124704801c0dd1d96c2c7989e1ebd88f7265ceab06565a8663933b4acc29f1e4e71c5031089b3d79f6b8ca582305b7333335688cc5faee78d27cb25c0d195bac1e88baf088e6554aac06a3c754c175c5b0c44e0351b9b60e40f91d1beb58a72ef0afed376a6aae3ee2ea70874f497e86616df3d4d1c576ebca02df1a3c1ff39237a73661cda3f0f24579025c504e610204aef94c3057a11605690b0d474bd3623e1bfef4687dcb2a8ae5063280f548389e565bc84b35a23e69c9288e49852213965b26b83818a543b9d7c13a4b28b7e095ff62d9285023fa6d7db4eacc95d10b3bc8a3c16bee04f6c26309dc37abc596c70031f1f700d18afda6951ebdf518e51289f41917bf356615ca7a7a914e07d07d072056c3f88048c6ae791f6642376a6c1496aeef1b3cd842a2bf09ee45f92e0ee6c019a37f852d785a19b05ce9355608b79c2ff396232b6c6de28e4469127e172d3c6199a38032721b7653c26c9bc05e23a40a888f05a0b6b5634367c77437a4942d9f4b1d3d407055b6f717c115c98bdd84afdac2ab77130e8e9aed6d75d5ffa21c2cf0b86424e401416dfbb5d22dcb366611b37d4cfa09a6098c15fb733ff9a183eacc39b796491667e5c2e3eb83702d55a0f14db161f8f733fcd7aa8b28fda4fad811d1e4cc28f1f674d37f71332a78ee205393482998f987eec0d729103c860caccd644eb58c08f1e7af5fffca321b05de8cbde82143b1ae1c8ad531a8df0aa0d80701bf93c2bacc36282239af67f4895baf5548e608360baa5a46ea4f3f60a614bbe2f9c2e72e432905fecd74590c7c6fbafa4e71f037b886ffdd60ee4968fe721b55db5f891d45549e3fc3f88a83d7cf57e6a242fbd169c39203194c499d837dea4863ccbbc93b6fcc794ec83f96d93b6bfd494bcc205ad4fd7942024fef3d2be94dbd4c1030efc9ee09bfc40f5f2cc5a11e1a2ecb1518e3a67eae0efd9ae8d66298ade3f60a0067f261a46bcb74565024358fc12b38145f9ea15477f0c885905be4cb959fce506b00543963db0681b6332e0fa709139f1096ac427ead382855d7c60daa508d6baf4b3cb97f85abe5abe83681d2713ece539562395074300961d273cd0d02c502600858bcdef61a0422c1dc975a909f9eb412626e7c90473e5745198215fec167420a845fd0cfa633284aa766ef8b32293ef6ebaa9a6665d75083d1b5ddbdb24edb5c8246f7eb3f60c2bc1ed13249627df1ffe49ae0880fe4721379e013ce4a61fceabf4ac308f8f0b34aaa93e5fc60ce48bcba105728434dbc08577b40454e043edc88e98e90543b69ae0e3f5de6490ad807ae112d897c2215c3e5d8596b493a1e01b595c639ed2f1b63ba83ff0a82f3a28b6bde0dcbcf19c72d13293e8076f88441bdb9fd1097c89aad0f15dde20d6386ed0c317a309d802f4a156076255a827ceb451dcbc1dd542181f3f652d7b28fe70e252d3d92c8d9acda43b2c5a7be712159b9e6789e89491b297cda06317f26e32219a74eaea0ad5dd308c25c55e5bb6e1889aaeb4fecc1adec604620491744cb7844d9b93cd48254113ca459bfd70b3f6e534668b7034099b4d2b474f67c538ce4672375f66411f20c45e5d263d2e910e361efc530272ce6d9dccba606329d5e22219f3420f440cd0e24d53a256a3a17125c6f3e0c6990cf3694a5745099daec67843e1e0812ca35239d0b0e8b6f960b35b948d4a9854ab6360bcef35daa6349423a2cfd63a020d0c747f331181353cca946c81a63d98da83aa613227cbd6d2e310d3984403b14dda7b5bfd94d8c32a253a6223bf34e427b864c51e7387868f436af37b24b59b36ca4f87b6bd23a8e7c75040c2fa903a498ba31b236624331438a2322225e11c818ef152355f0d52a114e5efedcb8d716e870b52aabbbde4e14a62cd9d5d918233711e7e83297bfbd7cccd3bf41f4f403713050ce6f84ba45a3b0364feaddddd93408249f7ca0a8625ecddbb813faa07d7bcba91b109e59253b93dbd05ebb358b8192e440830f3bf105ed72d703318643349318e9c05aa7e095588eb970709ef4014e322ee66aa21dab1c0f906958f0d11375f6b1aa4099a9481e0b6c612bc9df43762314f6911908f90eeb4543f8cda0d5cf929ec70b94e151f22298f09ab5f96593424c97e5cabd5a494a4ad8884586f1c382d64bef2c092b24289c9190027172de7c4b05e4e4609b5259ffb382ba65efa3dd4da41d5ea88499e605fc3620800a6e59d1e1ecedd5986a121e772607bff4b60c8f3c684f1928ce6a50936d900d67d7753119c775712ba4c6b6ffadb4dd1162382ae4048a609dbc1b97e835679eca9b6c51823bc7e9f6f9d18c66ccc8784c2205ca6b54ed8c63f3c20ebb2838348aa512e13edba4e8b1dd4b688dd98832cbd4ef1cbfb46d0df339d10411666bca10a57e714133537631f13c91743af89fd8f8c51e39615c011200b2191f12e4f0700b2ebf9b223b5a8b535ae84917ba2965889da2afa9f93548d2499fd289a4de58181d2fcf4c9887b52447e5a7c64676be6598b6c6d3b84603c4ed32e212b3a949cfa2ca2cf651240b6fcdea66eb503adfb2885785e5830cc7b20d13c4c205fe40198fb956394e87eae0b62da0a663e58949764b2b80b3ec9f897260db7d82ea63dbd08fa175f81e547c6b00a2368600548ed7e3a91414c5ed4c539fab2be52ba0ae76f2b50c4a3d1fa33f12838225b0ed0e7334178e2e0f57737ba1f97bd149e434c7c17b32035b4d005c259d5200201cb0e0a2a369b28d941634da9b117da02a487951769089df243b840581cd97335a027818b51961173ad613dd4d1787d2f7b65fea5c4a6ce90b9350783cfcf57b0d7a3d7b51597fd2b585c41cc72184d2c8f48c40d4a7a4ae201c8dfd927664b664e806c4ba04d1c4b996f75c594c29e07e44fb5de77f4ea7d9f71b8cb69e74acecc1f15b2be31b0e9e2d6f4efd6c377c8cc72bacded4e2651284ac49e25b1f06873c7b7d3f6b288e057a605a0b430aab8e3f97c253bf2b8a7f13d895f0fb39fb32594c2ce245dd6020038b94ee70726297ba01ccfec9dedc19079a92ea25827d975141f2ee92592cb22767fb617a2ea54b608ac88adfe82fe1215667821b2e59251cf13a2d26b694d86bfe5fcae2f1243d16dd891c162c8e403c2649f1f5dee7ae6d371a52b221abf311575539e30716c2f34aa81f6b63c281565f1362efaa1bc76e291fb9ce18ae7515aba883007a9dcbfab530ae5cec3967a891c2dccc18f961168cd3a8e8c2dd6c8e926f22f6aa0d5f572592f3dae1cda77d55944f34339b376e987f68419f176364ccf0746b8628ee49a06c681130215d5448dff027bf9889d63489f5db3ea43340417a4d048f5fea9c1147b5e1759046b50706285353a03f497434da989bacbf0f377be20a05906fad109a0baf3b4414d11e38da617cc51fdf8854b10ec051f1200cf5afe016d0d098b69629b18d5e2b90287c6f95f2d9a53750a121391a8dc2a0248f3836cbcdec2f1d8ebda00de53d0417028a5c9ff8a4e1c4b43f44b491df267b762013fe3398571310a1a54850735fb3212bbc578c32010131845ee82c3bc17f3e9f76d505cf7a14fd442e61578aa41134cae0b048a72c4869a6f0b6cd6fb8a9d621e9c7ba363abaab7a4d12812dd3fb7eaa12f52b991d8552f594700b22ea5cc83e35dae22f15dfdf24692c42452e07d4dcaa6f8f676219779fb4e5437b277cceffbb5de0ce677fbb6774729c49332c89d1879492f235eaf02c65be84323fb9d1524f7626a3e07ca81ac0fe63af5ae2ad64895bce0ef41f9b6cf8a8290e2d8bb92e61feedd687360d6c773a0241df53a8028f06241ebff78d2bfa9fe4b73ed78bb5b3639f3f86b89bf15b43085dfdcafd67eff3550ef67e53df91023c43708a2ca8f969939be8b696c920e181a8f70b74ea841e9e49a1f7391670fea275d5db76214106555ea17b235c7d6579e18396a173fd71617cbe76a67c6e9aa399b8c1a4a2fa2fabb7e727621c2dbd87ec6b40e82280a0a52818da6e8304045af283917ccefdff62e0f218f0b034271377c79e4f50a697f7dbe8021b89fc0e8c20564fa8558f04a57e00c995a2f224562fadb39f20b757f78275ca7b2dc0e8515b6818d5b90a683f58f5a672fc5dfd16aa63bc88f81c251780a953e8dfb1a3cf497a5084e60e40fd26d9050441fa2cf9f1eff9cdd4a5417c32f84e9bd8c0a7fc90d90f6fee241a1b4ed2184f35c0ede48cd353b59cb555a453c78a26f2a9ef6c388225b4fec3f1c2bd8ec8557b230716ab6c14e0451010c8b5ecc0783da67ec3355e1f26820ef582f0b58e0dd606b7427ef76dbd5b5dc9faa5d7793b142c9ea74a6a7d4e7f4fbdda9839248041a34cdfc9f9fed87904e356c72fd0a9b0f05cd2bf9c494e67b838f7e4ac670891f4c4cc01adc0f407e141b23a051c5c45064fbd1d1698a3854b68ad12301e36a9288b6bc687f2514e706d8d9aa761c6a426785997868fd7ac98f90e15a911ac6714519771894d0bab1a681c56d24ffa9b0fd4bdef9cf0a696fc93548702ae82a8fea38e235cf36fb4ff72085f1ad6acc9149fabcfa2fa3cbf071001b70243989220a8e63f3c226327472cf1bc37388c19a772de17267d8d783abbfd755fa1745c495ed93b610a4553186f04a031254373c972ad72c09695037de73592bea178e9ecdc5c78960cf871cfcf2d8a88dff71ed8e345e9edd0295328fe82b9b86bf90c533ea563993361a21ef92ccd44707e23d55d94fa1fa14a1a5e224a72306ff49ea820ba162afe4647017e6cf6e2656a25e4e22ad9621e741b4f19078e80cd8a0e1ecab11c43098e44f5527078ade0e755b02c434f68b49bc8913cbd566e234a6a65a7938f63bf59075cfea4fc38b89b3828b785007f08dc6720b0aa9af44ce4cbc60d50805a69dd9d8f5507c38a3d36030ea758c0ceb633a0a570bfd2fdb313042ae12b0f8cb6a74507cad9cf680038a703769319bbd2aacd74212bbf521be7cbe0c838248503ffc83692f07ad0ff268c8b72351762ebc8e4f944258df7cc85fc3ae8f40a8082e609bef9a6a196f8b1ff6335c5b6f8538408d4388c113ff5c64fde615775846b0a9d4e1b5610589392bd2fc9c4774ffa8ec3c33ef1ab792a6096071cdfbb61fc7407db27337dd936277da349adb6f47db560122333dcdcada0529c7f9912808bfce45b6e8b4daa68b2cda9c5fc9f6b22497ec60fd6e95b1359c2c62669f2da704d24de9edca0c711c428af4f3c23650a8c9d5ac996e9b543cbbeb0e4ed3c5fac044debb736def9956a380474ec6547cb3513ca589fcd61d30f1dec98548a052a655fbd1509d7a7f0ca85521bcafb931427d911a515719fb6a831b3f4e2925f9c6714b42528be92f6d07713c9fd896fa1a4586bd4d6c5d9500a9e7372d5c9d7383f96a98cbcc68bcb0a5393fc48c2088f317e88fc5fff5e314b5c4118a95bc1d6851050028e3dc9ef8080e61b0a28acb265ad2c722d41cf4057733a723b5e16803c23dc85ff41348994af51fdbf81dbbc65d6a39bd8e2d6b5a91733caeb63743da7aaa329a63529dac374c7131f66e4760a8aa946a5d5e24ecb0812c752371821799ace8475ea0907af490758aa39b94d98cde1009d98e9c861260bec4c01eec523199cdc2ce98dfdabdd88959814d2a83c9e0454af0bdc7b335fd76a993cba5a15035505191de2778d4eb9654ec631454834fdf081ba36ea5972b4efb8f98663c79c44d67fc0f0b71fb53b9140448d53704e27bac912e44edfcbb83924af1aeb8238406c2c52a22b0bd2c49eadb5e1b8182a727024badd2ac389dc968398e0963119d10ef1c94a3ad2b1300a17d8f585463e0b4ecee8ccee749f9fe812bc2bde84f5ef6a18a6cca8795cd3b63fb954aeb440641fecd84151f7d4a75d011c77636d784043e3dc7ce07226adc85810272a7bf28d073b7de69e81d0dc043cdb7150bbc6ba990879a9bc790a00fe6e30f20ccc4d215e22c4d12714386ae7130ad969f85daff38a190fe6d5ef2da8f09facd32553317717962cc2419d7c83b50d92df52c0c2e668a0ff536de5acf9269c65761787549552e24b003029ea2e1d984a602c65ca828c4cf18d9ee396e28a7a0b9ee92629b95c692fbc105e27ad2527d43cea574406a77b502d8632c9847c39c0e062d908e380e6fe9eed298b714179d1e738de4d6ff0df618d5b0fc071d582718d548888ca45c7fa58e9ec03a71c13f15ab6cd1ad7bd0bdc666c6bd1740e95f497c0274207c7e2550251860fd3c6db75b0f4ecdffc8409f67bba2e1e0144905785d511a101c24b1a92dd89c4653617ed44e0a42e4d62c1d1a3205ac384392dd8260f1fa35faa50c122b037ad1c48fc06d637790b207df7b1e4f4359c91d2b096a295d9898555aae1be7ecfcccaeb231a0851fca48ffaf96a418eab58840bedc5862461b2e9ed922bc6fa2fd14a1f196f224efd2a16bf86a1ca189abda5b2539002b6e26f0fa14a0586787125f93e3ad06bceaefdfb3263a61bab7a402efdb0a0ca340ba196b97aae06858f48c73967c16f4c1ad9ce5f4d8bcd2c465c21591e01a09821c6965446feecc78dd72bde9c5badbd153c82395400d2d2bbe9e9de264fa2be5cfecb86325c0d0bd26de6f28996a81a58f32bfb9280dbb396bb4bca8c825ac1624b47be45435e6e1c464bea21976b01fc0339f7d4f870381e34bdad2807cd708a09b48851dc3050f87154771d0f9eacdd9206f8febd0b95e85d40d62dc5bbd9574f722981f621a9d753da9347095de0ec55371d3f3c7b756051c38fe8cd85a215f244942296262267fa0268b6dd2914b53d21a2bd521063f2fe0dfeb79f00c95aa6cece346b61dceadc0c50c958da74d6378232ab90eede4928a5a01947c59467bca6b6d019f65ea410d05ebf37a601b1e8edd90921620ed902c626b3007fa55367c28d122d4b97eacf0372414a44614a9de8755a640380e7495a8ac04a301f1a8861271928808abcd913260d0fe83da2cb385df72ac3ad13d3f4a8f9739e16b5cae243590798d97ac6a1c705ef00e260bd90dccec2502661e1181375a38564747c93f0349e4d35970a585e90bc37d21347713910febf8d4e5fa8048825ea8b700e61e48d523952ee2aed4d7300825dd4ebdfe9aab7e613d76a66db18cfffafc480e35ff4abb5d235f5d8919676ec2f5e52a114592e31e1d1147a2bc9ff3c0a7fa69087a71dd78a56ba5ce6e8a3de9383bf809c715e464124eaaae8a8bc201d691d34ec1babcd377dfe13ec9305ff4394183de20fb4b684d192e297b48230b9023f725a5ed48891075921ddd87346409000c7737461c4419836f5d8cff1add29e8fba50adeb90510597b5cb225dcd099a4f6107a874950c9160b5a245823cde4c823c95e591b85ae76a44e5ef360bc5b55e9dbf94f4bf3d486b814c4dae88d0d21dfdbe8a0a40fded6a0279f601fc397d29a5113900d9a1d4d9d03e26263d69c19eb7ed9581d8b90cb5d66e0eed16519b97a124ec0ab907bae1762a9fd1e614ec3a748e9b6d6b3496b0808d4bfeb649b827117e0b24cfb50c683c3ffe5dc50775672c166a0f9429dad29d90c274e60d50b373fd1c7f6b509e944a8ee42520569bdfcdf5d1deac79bf61575e2619ffe7bdc981efa2e96f1d0079602794ebeccae6e554f09fae9f9cf930f858fd45c730ff71ac21fffd261e28da1f4e1faa64a627e94e89b89393274bb4e1e79ef9dbbcc3673f85e14b53c4d4bee572f06784255f1b28a40903e74af88631d575608e7b9e9e168e627a1012927d3a83b235dfecbec9756149c1a8183158b5bc11df2eb5b72bc11204334970996815b49ae4b516352eabb95dd68867db8f9369dea31e71abe19de753abf3232bcaf36e51e6cd86ef8fc8c89a7c976ede417fcac639113e2f2449e0e76fdefdc6d12e7a552fcaf1393e41e0a71dcb06eee3c1e84db22f7d9465e136470c546f7b62e4ff924ead0212b14715a3a0112a9cc9fd4660ce10543f06ac975297a955616cee25a6ece23f31e01dfd75f995f8e157d4b72326bc9b8693b3db87f26f47a023db0fa110052b2f2d342cfc5eb063fcc3a7bf6501282aa10744fd4c536e5e97587568e0ecf8a44fe8202a888470dcacca883d3a79ab9177526a2720260f142e026a65babac6bd0077dd578ec6f22d1407c0e3d5096f28a0e5a4b18b9d188c3ae0fdd990775f124588a4ce85ad13639333cf095993e361754955bb7342c8bc2b5f915599998557b5aba8bec40b9093ce12c1ddc234ee1ebc575343c41e57e08449d06407b1028eec604ac50efdf41a992a686361c77d1107e4f283c3aa1efbda910bf9ca0f46691feae93c5bd329a210fa7cf9a3a342d61e3555298ef6a97a9eb26e973aca5fa63c926e6f2c9ce3b257dd6bedf80b20a3565d05f065ed599adcf4c7c32f2b2d31d5bd5e86f51f2c6c956e77a696a55558f8dfd270202a41152f321e3f03092ce074b5ee7a641361bb16c0025234c4f89947e9ee1a2e6e9c547fdbba67405c4c873797f9f6e598e3124817cdc0240c2491f8d620d4f022c29b3c04239c5a054db8258ceb8100eefe8dc2e9aef37fe4a14b6a65312957c501d5b688929621d508a9ff7f4593a0a2a1aab1dea3cc93f0b94c2b119e547ba6b1e425c149e4a7e1cdbb3694a9d069ed50854f5f35cc6592c1e0f0d6bbf12cfb08b6ec84cadc7718c3c017a88533eaad83b31098fa96ecc57e8eb42790bc704f2d35e0bacdc07c945896af7848ac6d38a8c000090cdcbe89310e9ba1c5c1058c3ec32e9e653aa8c51f9bae4d371f957ec3b3f99ad827d482baeb29710d71b02912e9c6279da9dbe393e8179f94d0081e2f35ad2e23c8b09c85d212201d178e63f94545d3cc8a8204fdfc00416a979b71c163dd6ce31238a3bc8d630c267bab83e1b861579698164caf441a7ed2cde060ba470a58def38b5fe5cc9cba497db77d70261e705273c539a131d5f8a4bbfc311247a8b7947685d98e8cedd51f01d281705b7e61598bc9f63dc39401097c9cf9413b51721af80fe0fcad17136ca7484f01d84b81b0cc33d406ae1ec5dccb8d9e9aa772f23de5008d0ba6517101cf6ed421c546198fbe64d6df7957a85884ca985242de8d6edfd09267d01bfa5f66131dc4a7cae1923cb95d45378998b7162fa66a1b47cbfa1d2086bde26486c880784f60ab0518b4415dc8e1edf8486cd7ea8de8d5ca9c1c3e1c5522e8b2844c98292874fa9e709b814ac417a78c5a6619d6695416a6b1135c374d925b37bb6a76c9bf8a6df350c4f7ded97a0cf73789c2d36d8abd69b0bc3e9c8842ccd5f660d5fbce206bf91d7cb419de35c1b93e3c40375bf3461fba39984eb20364f5fe99c99e36c4fb83094452517f6fd9d1916cb729ce0705bd3281a4d11fe04b5b3b77c9b6cd51a70df37bf5072a0ca1e2ab4123c035e420e447f5250e3422d0dddfd86154c38893de00694235ef6bc60f0ea5c1c46a5f3e1d2e6e160e727a8a8247ef468fb44bc88b48d9da13cbccd81a413501ec8e302b3a820914731d320bdbf9ebb7927d3fb08e3366521a66e2a2ac3b0f873da6fd49a90f34c5811434fe18dee14d6742fde6313e45f644ede35d15da2bf3e308764ca0bd727887a84518d3eeea0e807c65d0a1eb8ed4b9c6ea31a91a2cf2a7b823db91ee4f6ed06628603c7c5bbf11d540b19618b4eec22eef0b38f496ee3b7d7794034f91e65c1f58d864ae2b99e077cb1ef728b74d491ccb0537df0d36d0b6bae6e3205ee0353423b614508f0befbba8644d67aa753cc3bf310ca993005c332dfc202562b274f1022078ff0c1f2256468b412daf5378808142890f75b5a824aae9b372b640d8e5871cb94e442e510ea09a24705784b9bc9aa922a1ab72d2008c728ac6768e117c94f6780c0cf10ca58dd625d85831370314d50337123bac66885a03e3066c6350fc963a1a0fd3421a65a58d97ad096148c14dbfeaac3ff088e0257569e080153a8dd42b7faf9cb7384c9239addfe498ce6fa19e51f0c1eb148d84e258e875bafe92e001d8e623c716b24f670252c3296457eec9025f04beff77a588067313e00e6c02dedbda17c8fc24392714a28598c39c0b0bb6a50e979a55d76a9158c11b3796ba809a9a1f6eaf4fb4df0769122656cc4801dcd46b814a900d09f473483441d453c38c1b96a7c8b214fdc803e41451bc9405915be0dbcf31e6e919cb137993eda702f3e56e61f8bdd027dd197ea7e224380b4157ba3a660bbbed7c51c8d5b32517ca95d9dd916d3bb3583959a5769ad107d6a9eb47eb887992cd5d490164e9580bcac6869bc39e943e289dc351a35d44597bcf74068172c32951c71447cc0a835e56ecf829a2e61034453757547aefd3b725ccb6a1b3c18ffad75b8884889ac7855fc79926a5d44a4e923ba5452ac85b60ca02ccdfa62d2fd5b494a87d8c8ce53f295bca0f19d5c6bd4949313ad46a445bc5e4d601ba0e2f66616f10946610725f3e1d49023f67053e3bce6fae144ac5688cdc4b058205b73a871ca125da656199986b53fc09bd1985750cda66a54a3042a11cc3292461dfcea15cbdf0376bae4f8661cbfd9d7a3c504dfde251a5abffdaa2a6045258ee8ac86d7c2f13c6a612a6d63512f30f71daab96c7d6b8cc5eee42e2cfd414a06be6d2163eac35b51d31e81104de233c2b6c6466589f7e625f770503171b064032715f806ca3bad42a992f775388fae33e8533386999e0f6220c55ac842e11aadf2a3181adfac0cf730a300b72eaefe7b37a1aaedff640d9962131672938c48b94e6ee220b9da1a53c67479eb663a804790bf5a5e525d214a7257e3b59da87b4733e855bfb14ff38330e52bf70101a11a16e729350384c9a1f09358041a3c3b16f25118baef0b904db7df62ccbe186560d860f4cea5cb51ec576e58be2e02dee44a0f752e9de0c0dea76e87dd1a2656222edd784c93f060d2d7e0e63445a85330dbc69148fe8ad978a6df00fd39aa30e93ce2867a0ddc41b111e7d56f9ee4680b208bb28213f1b4ac124eed81429223e1e15cebc0005107c60ab5bdde99dd9d03934303e250cc53357c7e10e028a53dd25b659ecd62db165ac3d3fd6222efb397c87ca965b057855a8d877a843d60fdf7a571e6cca746896d02ec36300048359c76406bd109c1ac6299d484cb4b01f40b2222522b3323bc085bf9384b188bf152dea589dd0e8a5b3d326a7114d450157013aa731dfea88c99d6451102dc547561ca4f07ab556c0e547bb6e1d53d4d7a36efb9ac805759eb89c60b77f9804c2a1dd5f95349b7d76eaba3a133b12c18b5cc6a2b8a18ba1ac012270e4fbb193ce1a333c3a665246a1c442ce9cccdc20108a25e4229bc2e2aeecd69d5311b76f23bf4015c9d496345bd1a3e9d72a30150b859df0679b3f997e89579e0e7cbdf5e0c003fa3360246386a8a027b1171666418e53ea30ef6c6966baf18824cdcb4406ea5ac3389d2d0a9de1aa746cbec7c54fa7d9f1443ba62015cbd2da1812acd6f88f389c15f6945503f8823df860b0f4aa6b3145e7cd6b3c747e6f9418ec0052e46310794d224adc36ba0fc008ee704e4de685dc25dada13c6962507997f30dd2cd8f9a20c2a013a0118762a470485f9a097b1b9e959875c88348d60f0c692e8ba19ef795750cd9ef3d88ab00a8b26ee1c9ddfe7e67f526b39a800b90c693b4c5104138793f257fa731a51478ca8e52e4670039d68fac1d73477b5012b6b4aca05df183f89835501143ecefcd96935da9154f9aae7a30b4e454d364296285b9ac80a791de4cf598f23000851bbafc5952d6848865817cc93a14392c73fada516c63f689d079ab2c840df0a9d60f888c6dc20f11f15f6aeb0da0b46928629a4f5d5d3b41160c3ea91c461eae04fd1ff971872241449e1dce6b59f4310640c144f1c1728d9ab8f1550161bd03b36ec715353a734d59656b5a09453a5ac4c16b5ff7cde713b433dbbd9027952122cdabce813511d591c8a6916fcbe94770486d0bbb97e424368ce364a8c85d1914626badd2855e12092eaae6cfc10edb37db3e03545f040521afe0ee2c512144132a1b0a337e322fcfb84c1985736e5cd491d0c6b754a66c0aa747b199d51e7a5981ca3222db9c66efdeb23af9ebdb0aa5bec1323c98e7e86c44d6dd3e7227a5856056a4adb5f13850e9619a57e23ddd51ad1a8624bdeb2ea3b3c403803a26f5f10a13dcee5e2b93056d4637e3522138b917bd2f49bfa73e06e93dd4e53295060e033e7f265e58a8062c4f50027d05f3f508a5c2b45d57867f3238b097bff3278b0ad11531cb88f45404beb7823a572e6f072f5624b1b3043987e1ae3bd2c20859195f0d94d01e06b9d2f48b9a27480109ea472404bffdf374eed2507eb1c3447285a6504e792ab28a93e7fa404baceaea54bc7dd722de8dc60665cf92c8e1f7d23d2a99c6178a5a6ff25838ce09e8b2d69a393053ec5a87915cb20ba150304acdcc27bb10d9a7db0e9b28dae1bd51dcabf731699cd9b9b4c669bfbd79efd4c6a3fdb0861c3b45966a9180ef39366a1213a6c67ae2982463485bffb4f87a9cae0d2b956611792623b64253b6f3c4794fffbf4d8075423b8bf367bfefc5df8f96048c4dfdaf82961360de2d450c99be0078ea58b1126da7b7d8c4a2544c7f4d37fdac836f863412f0c1ff471e9ec45f16310af1e56e0a675d07c9cd41858f94293bdc7d7e1dea38eb31657e3238a1f5db5106ca7fece3edd8e7b58ea79860b284491401a72e62744da924939f54956eb204c3ef4645252d4fc0bfebd9ee13b797ddcbae7ff0cb5bc7b9c75e7826701f360ff2eeb2c3579185bb2cef8dfaf0f26bdfb243788bef7338b353f14b495a322f8d7f86a1a88af5a6973c1343b409b19c17e6c3e7e4e33c3cabac5ff28cf0ca35366fc524edec898d081b0f252e6171f394231d37c93d6f4867b47d137d09d877a22b36c25bbfc67612932f9209a07884ac73f4395b0643c4694d466e19c62353d81b066276b51c9c830b059ea3ed621502a2d9fed9e9c6974938980d05a195f3e28f952c0ac81682557ee93b015a0a980d6dae2e7b11d501908ab9cecd51d19c0a28aee4b4dec0f1bc46fbad6763cb32dfa69f2f29d7e76213ed511ddced9b7d80284087fdf810b308f88fac600e70b263df19350db228d918e679bdd1fb8457f54d9a01f8334e272e3b67e978eca625b647a3789637615c1b77618174cd0da18587b6fe1dd39c56abc2877efbd936951ada1ccd1e21ff6cab09430ec9236415efa0982e95e0bcf4c609a9720224775cba32fbb62cc9e43fe301a266f620398645259808cf7951fa9528afb9731b9f3a367e0e33590b6149ff7158073c2bd953fd28bda6fb34836d3fa062f423becc2b1b87a78e9beb8a98321912628faea89c0d0003d36f7d43f2d6e2d28e616e9135607f0edaecfdd75f9452b222d86b3149e390496246a406ce73718169701ace0b88908785c3a5765b28f17cdbb696aef1f93cea77d5df97de5dfcd4580e68dd13bbc2774f44aaf8e962cd12d1a3524388532ad11bbe31b5908cfbc38764bc69d31ee2b8babec6e5b7813adaa5b69709c184aeff151d4a25e457b471afc72288035c676fc81c8eafddb611609ffaa128f04d64124f1a1260cb9e529ed8b5c0648b315074fab1389753bba0cdc5a5a8924e9534b7829c53051b09f6da5da2a570d1b481fc8f7b5c781e0a2457d1b04557842c3aa47a4ec8cb1be0c001425c38311054508ddde4d5e2357835ba56bb8a2d48eb045602ded4adc73816050156eaeeca4f87918b2b5286e700ad25d60ff812cd7d8cc053e9ab10486a81b0a16dce9858cd77c0c0775c0ed42200c4b6855632c7c4d4b368efaecb2e1558685348f3086ffdd6660fa7c2382633a794cf34af3d15f5221e47c27cc75c2c2ae14c6ea58d6da79e149ec7ae8cb8be11914e1337f55c797f08d0a905e366d0f55db2cb17ba6074f6b5314f57fccdf9cb728e84a64f37bdf7409c9e31818e0897b30ba0220be39fdad3047a3dbdfbe5fde471087a9fc88cf9e9a97d20893f5692c492b939a1ff5b2ad9ed09e229f538b67380b45d29b8f322be08b313752bb61b2ecd3eda3a007806793d8712ddcefe3836c0c4c1e08597639fd43f9b3493d99d746a2984a231203fccbb7b71daf3e92a2cb4ef1166d4f8c8a4fdf4dfafdcc601bcb75eabf286d2ccac5f8b268294c56b27e993908d0f85c9ee99b1b0bf0bc365630a5be98c8aaa306c6ee4d139db11c73404a8b68deb2a6042711c197c53afb2ab76f660fdae2795517fe0d06d149a99cffb97000a22a1f3375c29df1c615ec699ce7feda5e2e776481ab62047ab0559a3e860fa0aa81a1515891a78fc47c012792571caf9d52282b36f577d42bcbd4559d860df147cce731931382ce1f4eb4ed771dfd052722f71d97c1d77c37dc4d5963308b44ed2b0ec2985b4a2f6c66f5d1189e079b684eff7ed10e3c37e0ca681146acd418445aec323b09d17c52515fbef4d31241d3865d0a2c1f2176412a42e9b4c0cc0984f67b520a3c66a3312698b9ea73af3650b6d2d855cb155e80f958e506ef5c86360b50945c4bc0f9af845929e2f7d7c80273d652b92253af28ab8d77f0fb8beec3b6f1b6c28d633da7be1fcbf20c5f525b8c3a00391ae58302499430e331b9f6484075f9b821011be1d771677339dfe132ff66bfbff8d6bd25b2537a0a551fa6361ebb31354063d2bba8e7dd65b9bb720081cae3491af8e1a9d720008361b6ea9f2c205782e9c6bcd2f40a6023cbd0390614318349089211c8e8a299010a7becd4abc781072dc6763046e5c604229c035715fd655880e2d30c359fe3889394c242c06d71906d6b6a492b193b70292d057183612e6f83690df225834ce27fa9deb4969a2e3ea153ef31f5e1697f294e29ce516c0c1f67a0eab330caa1958acf8f2be011b690c78b013e1049973b711d17dbe39c404ea7c988dace5095430291f988f5b4843c006d90b253b29de550f7bc32186fcfc2dec0dcf3c58039db57cff56e6dfee5e06aefa96cce1e3546143398186f18b9b15378d78e61ebc3af323dd3f5106f489b641b58dc37c2903f497529ee76c1e6bbebe87e60eccb87ad8c4416bad50830fb9305e8986206b5955e4e0a3b189d9fc8dd975b51c70dc2370b123db6fadf91fc416a0cf91460fd47b3cb59e5a45fb333aac20d5519091c53f4970ba267ca230e6037c788f29abc423cfc8740ff352da8e719b23960b0e96dd69942e9e022069d0ece6f52d5ff76c1d9564a8771b9d0deececc81f33cc307c3f8d6f43079a8094a21da6ad19410ff6ab05d7d0fdaad49b954dc7831d53932e6794911cb33d43321d3d63ed07e7fbee78e7fb5c2b07bbb72bd59d04811ff89278249b74b3d9dcf14b41ea98d54a82e38f2fc9063308aa237912e00bbb081e858141c77f19659b58350bcc1127fd0ee6979d052416eb0588608651ce41d91b2bfe6fc052bd1a4a6c9aec7c576153aa74ccbb6486e9965357a814188b43caafae1f0e7f3a4913b70d825b9a7c823b0243390046356fde50bc8024c8bc56caf85f933a5bce9f44995ec8dea1acd2f564f2c2f68ebf68f9da36e9b8db573c52d2e7e9e2ffee1dbdae1ac6ae0cf6cb5594d14fa5a31c931d9abf29bddc6b300f468d86c8662605e8f93e5a5ae00c5a1d7dec8801d4b4bae4203de23f380ab69c6588e9e4835294867e2c8febe8d39f6d0c167266c640428b16a68700b6413a6e4648f872a822a76bf3b736d829971449836d68cdfff6175a55c5f1cee482814cccbb1909c21f8f4aaa864d214622bacf3af000acbada9c49d0e008c8e2b3d24a47fabcb3395bca59980c87ec17d2b174c2be853bb3ef79acd6523f2cffddef76c0c6d3edba6914474d9366267189dee588b7ba0fd52d193b8f1384646b5dba4dbb895d0a56a192ae6add1caa60704342988e2c60ea309b7550432df661508cd7ce38f7cacbf734e836f07b3c4ec710c3575495387860b045a09ea254e93c2f80a763b28de23e9ba409818cefb60dad841eccfd63380cbfb24bfd5e6bb3eb08c6e06184596dcd3b856c57706adb2817911f4a71ed0c9f18f147a92e5122f61a073dcca097918d7ffd1197e2dab1eedb8e4a5fb774a564e3b7a8003de34fb677f594a74c121f842f90c76efa73b23712d948eeaa7d7196448593ace2df1e0082d91e7c7964c3964e448a6ffa59cc5a26e326e19fd1a6a92ac5e0c0b9e45ae23275af103794d95bd6cee7c2b6405c2d9231be115234c4f918e7b20db3d17a5f26b7aa289cf4d0773fb71a714d960804ec22345d0d92cb0c0c4d61e7e651eb6725e020896d0ffabca22c6023a1a935aa970a92f5f1bc22cf0a807e9e8538a3f735e3e03d9cddcdf2fcbf89abdda064e7cc4504d7935bd763c9793a13da78495484164fb24384eaa6b47f7b9f50a0452a00b07c1c834d33ad05008cefff39f029a2d70195ec272c47bc80ab3af6e913280fea25baa36bca1b45623ab27b0ecbe218eddee7ff8f5ca97a6ad412183a5e24afd222b5268c6b8fe851c1e330076c31fe17dc53335be91b32ca41ff83b5efb19ee2e94cc6e3c65cdf490652d9ba360fc7e57da3462436aa0fd663bcc2c5b7d0df58a428a7f4b74e87d66b3e8a855227aa05cd4912dd5d3091a845eac01a0a84759f78b80e849deb655e1c599dc0e24ea0a12cf26dc0cb43bd3da685010a621b0cf2dae3d401adbf3fac7d3f46edbfe09589f281d985c634ecace225b6d94749f22ccccc79e52714d434b2d89274ab3dbad23607a9e8d6531e3c0e79e6c9c22bc66021bffd1a54a952320fd8f37098f96229acc3141bd642501c58d38ecd1f31045d336c94218efb0f12530cc687380c4238a41f4a8f2ca77434c7bf5b53e3b067559d328cf829c1bab01eca09e24db86cb564b7fc827a148553795ecc0c4cd3309b2bc5567deecca946264021e922d89ed9b2a372ba7958e54c221b6e7a8258aff7fd483eac5719467f39afb3ab294296a3a16ec29a4acb8916fe210dd735d450a8e11311eb5ece75d625df498f32aebb3be9b602454cbd7f6aec060567fe5b98ba6ae25b8afc3f436f5aaf19264188d8772d0fa31f1e007df59f97aadac8096b2636f9e66419bb5224c8e3c9c592079965991203a776fe1fbfdf96a738da108efded0a2ad07beb928a39023efeddeee0778f4a5f9a76100f1583d4ff5e758f3001bb56dd736d7a09772b18306db9326485906bac7f408354c7ba4fc35f26167341d6bea2653e2dd4fc0ea63a913978f2672622af9b60ecb8642f51f99f74e7301a1df8f1c0634b47d79d5ddb651a20afa6c04a12f01e4cd2907b83920593a9661112c283325e4d48cffac78c1bd553f9e776564ba62a40a5e5f2531098c483d849d2601ad1ac4ce51f6023221e23dffefb1fdcce1fd94bcf4ffc075273408da1af5408af5a62711ee86b20336972887f54ef47b19a2f60295b90c05dc8e98af9a9c2d8f6b80fab73de64ab222ff42aa0cf01bb4bc6718cbae7481f9d6efc60666e22519fa8bfbd52a0b0c15f06c22bf475859d75406a3127fed55e1b87da14618d8719e81040e6b16c299215c22ef3bd79f19978dad2f3d988358278268d656088ef09e11ab57033eda05027ca0d226b6ee4d8a98a5ac4ef272cd2ca87db3d8941af62c316766ac2ef14ab7911a08fff38a9a425724fa0b7d1cf66ca04e3133df0564d2e16879139b18d9b4469a9d15aa7879e1b4737140d60b06e9ee4b2d7f4aaeffd4ee9c870bb20c327a96a54a0e0a2907de5b758aef0e8fa985aabebf71c93c9b1e621e5523624ca1ec18a45e28f146050f6f634b4cec9e97240dbca277778b9b67265070455b4c34a8affcbc2b0708cf0240bb1dc5d100c0031751db48886d1e9f3e380c9f01d6c1c3ad2de1c8d685913f8dc0c1a5f1c1332d6c90c642e728e4bed5db91fcbf5efdf8e341d066a27cfd1721e291f1ed822dfc9e74302dae0ae977e8380b2732018f7c1c674910822cd67570b868c386376723c5194ea9e6993f90c18abdd3e217bfb125a02238ee14d68dc985bc000563acf48e1fdcfb4c9c593a27af6a4437880e7607b22ad149abb1e416f8b491992ef11893f47d913746b0565a279b036724242e21c3afc6a9d996b1f1f266abe65fb1fab5ac30723c475ddebaa23ea20f181e360815d2cb62283d38ccd243814dfe4ceca200ef456e4574924684d6890927a6c818ee5370e692cbdb94b9564e40712fc3d6d5e383ef29abffffb8148d4f0b3836d83c06fc830845c5aefb0a00d4fa14362866981c693d2810681db2fef831ea0228c2c7d12e18c3295062a93a8c738894c7de3c124d985ba2f0283a87215b5b2637cf387995f0d1052ad1b42d5255552533c0a82af7ed20255c64815d11071a77124e155aa7971780c4f9d5eab6ce70de5d637c9703424f10694021f59a98de2c044359c77ab4081a15f6a52f554a6ab3f3c5d68b31ae257c5a7bd0d9075fc559f824d9ae1c36b7a53c6d3036823a04ef8c3ec1b5ca48c57d6f0abe75896dfcf3616b3a7517789fa40a16593f9f99f7cfb349c8a70a1bbcc138aa1bbf335213b02369e495fe0da93ab73d369aaa2c9bc7d36045c58751efa9f2ebf8dedee2895e77f452272e724b509ffa577c797a7d0b4e73aaa0925a16caea4d3acc87cb6982bc4fa803fa1b37ff7dc5b0c11bbbe867da95117e3e1f28866ae794b5cea7ab16a4b0a7c8a7e8c2b7d26ac5aa6c2d65bf79a57668ab4bc8d858ea60f5bac5741bde96a9fb2771c79410adcd8348a6345e982dbf4b41148264c10ab4a6d47926018292f67d818ae048ff5b301761d73c6b5aebab7f95f2d905797725341d89ed45faac8c290a3dc3a282e49d1b93ff3ce5fa0f6ddbc40fe323b947359b69b6b1dcc98d76da3d59a5c7f0ef5dff626aea9c39e80f0ca33083dae17ef0c69619e30d5cc5386175f4f14e71dbfe1bf5fe7518addb53bc2eb2451e23162f10a69c3cf0bb34765a192fb55ad177f9cecdb5295e63579a3026df0b4c1fdd30f2ccac24274348a1edefa488b62d9617fb9096bacd1adb95d277ac60761c93cb36417d8402453fc707d0fb042f6227d7e674453b5efb6eb85714924b5fd6333616ef2df9aba44cd5bd33d8894679dd68f005996f4482c999a13167cd14e83e59fd2603e865737fba116f30dcb03645d6b508aeeecd1cf074ac5de0924aeb07fbe695df29f7fa4161c3fc3bc430e658da7f656cca30a865dd30cd638f4ab0029d3452acd8f98f56585436c75ab92128a7e4806fda8167e8b44ebc63154dd63c54a90eb3edae336bf1d8ac1d44cbaaf47d9e81d5b10da46d491bb65fa3b82c874e436befbf159929561d3ce70175c2fca19359708ad419f8d517428286f23fba286589e63ffea35c68fe8558cf082f493659297c23372041bbc00cf1c42d1d9825ebb86f8156f77e2cd90c54df1acc178facd5ae4a11b1670b8c0e02a3e4e336ebd7a6aaa2c4a65d41a28a5a11e230361482c9cfb8d5e7961255aba1c302087e191f90035132bd9eba6e2fd7c55349fafcacf0cb1d7b143520a298ab831719759537243f43992988f0df19f89cca794d4d66876a29b3db317062e3d5c189e96f8fb4af847e6f8eb1a905d5aa8a45beb32ef2d0fae379c0c955852ab136ae2d7d117c9de80f96332e03b117cff116bb0988bd96ca516cd0836d82bf296e33fff8ee497c061ca0505f5d0e0d683a8ff2ae117456be1b54b7312a70f04cf86b0a6a75eda134ca2357f1fe87fe25b63902c9eeecadbac166e7c8034d13ea524fd1755f9e86e6986c8208b4ef2776df9f12e097635273f34ab4cd96e5344048f4572e6408d20a1e74018d225effdd0f419eab6fba4cc8ca27a0b0142cd9cb53d68916a657da6b4a33e5a58346bfebf303e3bb846831f2f3eacc0092b8982cc6e9cd692151a5319697a6fee1897e95289d35228f5de4b8a7efc301a697588cdcc1bc10c663d58a05c4adfe6024d24b6c2454d5f5ffc5a7f470654f8e5948259d97cf21470db3afa1ea1404e548213a3156479c1428284bf9ef98440cb8608ecc8c641cbbf93201e3d8cde792ffe21cf4b631d963c08a44592f5a19251ae9eb6c39b3c3790c2d5bde8ac22bc2c08e0aacd8728d39739672a7d8c4b4715a26e7a9ff64186f3d6db0086008fc8c7c0ffd3b933b93eab2057f0bedc83434e45b563d5e8f26322f566cc54264dfd56f015f5d4651fda19ebb32044d033312fd60f9021b58d93c8b1d684f3a0532c57c5b422ab34e43704c0c60aec2debffce21e6ba9fd9a7ff1163647d750118073f6d8789db33a3124a069818f68d8348e8668f38f4ed0f3a1a8586c8e710af3688ac94d0b0166dcea4dfba8857ed894d496512c70715d394deaa46d39b0472483c655bcd08f9cc00e751ec1e221a05c4e7c7570683ba457f05c04f8e162df12e92ce03532730a30e310a035756428b3d9c3790d50e7e1f3e52634550b69ebb336f8e210faebf22d35e69b0c057a08287862dce1b61dfcdfc1b0e3fdadbd4e515698196c829cd4126fb8bc7af6a21e86d997ef51ad1f0a8db07926279283c69ff97a8fb3584d92da4e5bc9f20f186b3873d006a30ac9bbea201a489b41da4340b088d301e967896eade495bc8323cf84aaec6809812ccaeddf8df400359f5f131c43078da9162b49a4394deba800c47de1085e6f9af6f2268b20051f740735ad07e4a4630e81636287772ed28430221108727a07f1b7dfb9f5f2853c1c275a04d4bbf6bc586527aa462081a43ce33400cc780b21a5c8aa1d41016969f867e7fa8295668d3e024478f4ad49a168919979e662ef7715d89fa71ef5243b8d72d8a2836d4c67dca4731193aaa04467d997862b286e8321795d370127bb0c87dad24b51fd412e1a87f2ac3fdf8926515dae75d2f25f8434a23f405c5da0d0fce1ecd21736a5a8efd721a8151f42eaa0c7928d0183191d3596ac111ee04340fc029db6bd64e10f3209779a067fc67be984b5ba29bb1df4488c5c5c79d95ae4eee21c13f115cfdfd4d08e44b8f7cde57695fe1961ae082ef5fbe66202888f0c93fcec3c1ddf763abe5e217e090ee6ef4e8fe0e8e63ab347a9bcbe8381c8003a918ee57faeecaa1e3842863c25733bbd4f7d830952deabadca3ff5763cadea82aac7bd7df8b4221ab785e9606d4d45463177d9ca1834b4a0dabd1bac6d7f90b6e805afb7867157145d31af782037646d9620baaefabd126f45ef46326a5caf20b9c5df381cc4f348edd90a29c50972bd2bb7ce8f29d0ffff40cfa7708915464a60cb08a4180a21d09030d9ef5f5312c3e619dc2c601b8567c77bc7b06e94c3b04a90323ab1b35b6ba9488a479b2278f694bd3444e6b6d3164283027c7a1b0b9e03edc37936e794db3c4403c3fc794c635f86e82ae255249972b393c7ee2bab900b850a942c54ac9048553cc138334f42825cdaf4c3bbaf5ae6ee5b8a6bae7aea3dd01a7d622c4047e8ce3939e4adfd9a62e7829fdad04f50ab08a2c308b3e841cee8a5adfc4186d299b3f7a67246ab53df05763c6b8da850701f97bc49df4cb1f097c1f855cd52222e4fe45870a3d7e1f7eb7cb49120cdf6f7137bd1353ffb1e5d62c3202747a8c4b4a8db4dd4279281280256ee0a780ac982802dbac5d6197566da7272e919baaaa1ec6df1b91c447b9fea90b69683ff12946d8b428671e53742268dc56b8707704663451e1ba199a56ddd7b3528cdc23d396aeff282440c33e76b1aee0c7785e64e6b700c23616f3335a1c2e6f1b156d6c08d28ab69223bf0f1958639b684186ce7a36087ff19f984b3df5a027b7f4ee73a70d9384acad0b4bc89e0a34f4268c4767ac84a32530cae949f098daf58886f3418a830b44b2900cebdec1ab0e175dc0a888bcf98038268b878fe5d221022ca875ffdb93538cfca5eb6acf7c3415f8b940554923a190c44ef8425b5f6b18af4d0619ef68b5e68a2274352df5406fa4a1ff62872f488d2bd09dedc389080700212c140867348368bdea0b672e12bc3d580676a6eb652526c1eeebdedaff881b1d602afe0048c402ee0166acdf737852a28af6c0b601e963db13fa31ccf40224ab646dab899b1084ff47216c4a85ebe7588a1bb492305da2cb545b93d16b32e511c0f0c83281b5860ccf7a392c2b4d29f444c65dfd1b98bc298972dfb894e8d632d338ceeb64ebd538accfd4ace8068bb61d44d0b5f1f1250f8e01a111ef18fce19c580fcec86793e020c70820f19b14f4971c49c1f701031a80e5d8b62e66de80bdd6d9783b67b23802def133558db4ab92c466d65cfd2d2c1fa9dc33c66e185a591d6576a3e87bd5aaf92577924a0113fc50eaeb0b522245b2752e40a870454e5e77554bcffa83ac53c1d08f0a59fafa0d356b7e8c45cd38d263020e7a845fa11ef4033b0fbed570edd3f5bc98bf66ecccaf41f6f5e5b94345175043ddc8b4da67a41a69fbd66798018179720c71dd52a3d747d60f244eed2ca604043573b4fadaef438dc4347e159892e619187140fa672ef21898a92188a7918dace30830b1de29055e9d1c7690d1e31b917e7ec4345f3228b68ed39bd69a7775af42a97d9258360ef7a937eb0e0af05b95b4307c1947d6f1ce2977b2c30865830ddd7bfc99db43baaf2610f9b8a905bf54cfb31f94d92b7760e2ac9bd621a6b23a617a2663c5932d209d573ee75709cca888f7d4169418d0ae390b1d2d95972b83a16f5f5f9c62bd90c0057d9aa8036b619ebbe3d9617390fe4c0a70fdfd474a7810698167db6749e4424fe6c120e36ce79905bb97359e8664d6e3852b36619471d80c413c67cbd278c4c05a9de08580e70a4be86a7e2f3eaec28c405abbe23a64fb08eabb82cde4a8b2e6b68533a139535b166368e7b80c62e975be343a879bd302dafe80cc9d8afe3c9281c5bb8d5a278e5405f3e0dd52fc7827680516698554d42956a759d3d4e2273d1e1d48f846758a3301a8f214c48b2814278179ee93334b6d2dfd4a288bb2f45aafca8a66f463c6ae6f32c7f37c9d6857fea766c02793a7361d4b95b197c1108f114f161375bfaf5f37991a11a81d340d26edceae30161aa291bb53c360de194d28d356f78e32118dd4c2ad3d000547990500dae530450dc37aff4e15550d558c1ac06ca76bd3ae9f5e533c18de1ae68c89a8cd000e14d55c9beaff356da4e854398d534f87d04e53031ebd1fc681bbcf554645b367fead9ce221528497090eb7365b7a6e3195535ddd7b3d5db861d1e0ae85f69af1816f65db3522887c0ae15e765ec2f52f1cbd285e636279b2e7216a871ee3dd25a0d59c522811f01b257297af917f40818c4a96eae99e40c76729b71d4f872cbef85b29f21dd690f0e17de6b860666c3cfee0f40dba4f520c46137c2790c645b98528270235cde9ba389eaefc01e01b1eeeb0db58200476b1f575e474a3612d69754735ca35bc38d22c35223412c267fd74280d2bf743a657ec1c1f0fed125aebdf3cf9774a0383289b0339c554e72809dd788fe7dc81d2d9a8c7f8d88fbbab054bc14e2afea23415f3a5500f5d0fa5207f88a6e5325d1775540767aec1de01ab68874df485149c2d94b8ee8f7c4da06ba9257db9493698dcead3ff6154d27e5fd8677d0a674710796290e3c594b4fca641ea0789a57adf94525c7d0b3de4851f0299343369d45c9b0d3f3fc773077ac6758a892e21c94cab362510bb2419afc8fe4e4b339ef0d47a92d4eafa9abeb1188a309a45f56546f22771063ed3ebfb4f1c16fb28c0fd0d3d611f3ffe7eebe86a812a39d8683c6b46bb0e9f94b3747671d111ef522c0810d3a834c71a98770d4bd7c0103f77811719f64133084ec6879fa4e70eb2dc6a41a58275a57167ba8931cd66196866c65d070cdb1c6df3270436063764dd7c88c217f6e2198ebc5ba7b3fbc1db71daf53d0e04e51f0f80396229f4bd3e8804ebf92525f24f8d9d10dc471f0360da427372c632090bc628e29df4c27a13d6f74a04d74704b56daee40e7e6fbe289505aa2f34d111bf477a913f867afa85d93802b229c2b2321c34aa345634b6d6de4152e3b3b618fc863575fde485005096c695ffa4a51ebbea75fe11c4d186d8e41ed97b0c29cb683655ae5aac011e619f0d0fae0803b5577cc057727fbaabec1524db32cdc31508fc94b911e975daf710f0899cf34263cd4d5c88b39ddbc19486ddca1c1a3c342629a7c703658a0ea9c15e00a4c10c86efc91bc00a12507a6bed8b7d822df20892eedb903b9e8cc740069215fa37d81e025f76021bfa7e085cd43c532f8b0f42b1e618c39d695d8f94a971f4fc9bd44f95f6ddf7a598b3c996f9c3e1cbb92fdcfbc769e72118cb51b47792292ef8c26cad2546ab6eca4b9108afdcf96fd4c48e6828b173dbb7fae075f149d26b7580bdb1b2314045b7f017d5c58a8c5e7650d764adc4c3b8fd3c1b397cbcd754264bb714c91dc8ac2bed59dc3bf2bbd9d8490b47d5b4295743601ab2f9b61b34f9d90b269278c25bba70809e80e8312c8313111996c2a2e941f7d1ddfdb344cd1aea73052f4929b57a45492f0e34a5ec79097e7f74cc62743546df1111f2db64d3e8ae3518635ce057042bd701d14f7eb4fb8ba69ab31d31362397a3f8a3c25886c01de7380ba9bc8c1a6748e7ade836e1027c965bfa793623815587aa94f1d803cabe6cd696eeeac339dcf51ff57a4b208aed6c700357b1cf1f56cf54935c910e5aacf6a43548cf8f9d2538a36816ec211e3f86e20912d42016779139e07bd985d8d4a9ff84530e211c859614429b4093545efe6e168c0a986f67472ef690f93797b59a2f7096aababcc7d7db5ebae7aa499bf2423e11b9645d843e63722959c125f090c202798d2acb086b0de0c72a64449a89f1a57d13c6ed38a364898063ffe86323dafe7ac7c0f31b5492a9d34f0893dc371fda5d0024d2dd3ad669c47ce52aaf9139fefaf6aef5b7df8278171aad086d56de5186d7599e37d22b1c4bbb6b3c68437c1be95cdc91df7d7a44aff1f95466d124012311e79de65074532c8073b764d6541a2cc288e19c9c6f6c52dfc5593e6e1c7246cfb8a0a2bbad7113455c63e9963056261670252e947eabccbe67d0817c67d4cdf22a1356fcab538edb4cc9307a99f1b0dbcb3940282d7bb486a0e1fa39107a26ca2591c25222800ccba0bad77c40365a2b5ca3a2f4880b95602e6e2a2c59f81e2caf91e17253884b7da1a9f742117bc3d9822a3c878f098243303105550d6f80cc0d81a5f5e0e5ea7e5b0776e8a6c2968e5f76aded5f963e8ef1a47c7ee7b564ea1adf884a79f8d25a1e48d708023003d7c6308f72b36839e499e8da1f024abacb8ab80d1a5352614d51c23ef48cd994cd7c7ea40fe4186bef26b0125698b81f18be927963cd69f5adca5a6709e65309c254152072a7897303a8fd87101295f465d975c4740648d2cf52a9fc610eb962b21b9218fa12ec524c7640e3536395bd88c034547b8fe6c5b05f84bfa81ff1a0e7182bd5036182b5420b1f60c5ba483b767f98c29944e171faf6aed320ecf75045719fac7cd6dddc6f37e41cf1879d0f4fe778ae8b16afe72a2f9a011654ff296a8e0e6cca70ec041553362e3af29b6af5a0b08825ba95494b3a3e468f17e3e8046690952c199d259f507a5a3a5aff65b19d076bde91d4882daebe51c5fe911826085a717e85fde8ea1f7b52baba9199257f040fb7919c8551f4d073ddf82edb206e2e2d7915a28c2b30acc7994f736a16bb319e53d510c6442151e525246c4291378101388771bfcabb2d7c7140ccc5cfc7f3c7702a966e1f3e703ecd27dfe3e6b253f23e1f54d16f21212cd883dba9b5c1377fd10e9f47e81cecfa1c2babb7e8421f27e015dd6bf74426e9f263b7fa2d5022987e2b3209331a602280af776858fd71bc6d3f875a34fdbbb7bfad58e59156a676948554aca03d8eb4717939430ab00927fd85213908294ce5621a5b3a6687318350afeb5d5eb1ece0de646aa890e94e33cf5bd67f6c5df07d98d15f8156882cf0c8fda45386a001ce0ceb6c41ad8cc61a4bf9cc1ea1f75236cebe49a53db6599981cdeee3da7dee0b57e68f9c51158ed03468a7409ea7af4f59f9408c9b58ddf93289aba4c3728979dc7e45a3e73d22cf4d9896465c3abbc5c72e7f6310d6d9565c53fd98d71e3ebaa4f195f35124d71249751ce9695598c8a9c54f57bb4fd0b8a2e4df2c59e5a2196c832fa72c1698554bd6afa92db0c1eed7cbc7f8d3fcc4ea7d352f37ff529f080cf9bc049727cd8ac9a3d58eee84657d07b8c9250eed2ee70210ab95598f584d843547212ad12ca375cf7671c06b786a54e711c5c415f50b6296618124ced7d791ab396233720af260ee8ec3b3ed08395506ed7f30ead17ea9372b178fdaeb95d7942ded6deb91cafaa158606a479ab07ee11c9f69a3bc33c73c6e2582cd1f61ecc0a07c780b0f279d7d777965129b9b9169c78e013f3e213aeff6ae95ca3a5369efd5b8dde7adaf1b87f8b6f5cddc35944a718c842674765c08f96d23d4b469608c369cb57ede33a7189d4f41b16e4657e79f447bb7cffb674315041d738641dcb35f1fa0289e2a3ec31a60a4845aed8eb99c206c8ecde170df85a0362da6551cd0ca8f60a5ec35e651fe1b1b6c45aab3b4380db4e1b59b0ace55947e188bbb9aa7c1e13ccdaf2deecbded5efc68a4feb5c6a4e0a57683b1a6c07f0c2b98f0237213514316af7db81d241284ee49c8ccfda6fe0600601a15b59f05bb2bdb0fa404d88dfd468da40212e5e10c0d445e9a3751c1f56eb69167de05434ae1a8f67dc8507dcd084bc8d348aa26e47f605978b72c3146c791ee3ee3e272c87f405d0fa9601d6c21cdf4fa314051974a6370d72e5eec1974f546554e569fdc73ae3f39055bd82d5c6c03665a5f1641a514e2567e28e3694e9b465178df25233f1a7582c799bb4208ed1f948a0530d5d93692c2d4c1de36c8a9ef1b491a33bcb7cdc72ee858d4553c090f3a78c46d41baf224f7208aa624d8d099beda078fcb0505f7fd7ff08f2fee7c6aaad9970ad65d48f9a736137009db50b9e31749fe549a20e89889eacdc8f0ee3126a43d8261b2ffc961da229654146548656dc9f41b83a3a51af62e0b9f74dbb83991f93592b856f75e3490cc54c496a57688878ea2c1685b58a9e9ef0cf3a29201e6938a0d08eafb5dcaa5645cdf260d7777034dd7f57a1eba279b44baecc5c23504a5b85575d3165093cfeafc52f90b6565a2028aab4197cfebbeb9056751e11cb3c1974c0d3bd8a783e596543c8f70f6337e554a81493792a88da52a184096f84210eb392f150cfc2c1d474b68a3a523a33292a6002594dc0ccdbef77743c5fa129821fa24e94fbce50d195ee759f26b9a028131c689910edc9b3466633aa8e1aecd8a2ab32c442a27edb7ec282e0de970b9afcf3215ca91c7996acb77cd4838c199f14a896060b84060870e0f5e0341989281ec282dfde625848d9226923e2ef2f01c3ef5357f10c2ea8e779c9157b2a60abd61a9e9923c260404569b93b2467d196ddbac05933c481fac5d40930a0c7eddca2bdc612dc61adbeb1d8f9e10e3710289ba160e116b762fc5b52874c2b10e20342b57b828db78e9fed155bcbae539d91f0d38f4ee674825611daf0cd10bcec68601e7c3c5cd5d4a692b706120562e875d30cb864a155907d52a09e2a68fa242fc18a927f0a5077502ef7dd9e2ee68d8904d673cccf0fbefce4c9cdfff9bd5b314e93bf3d2d38348dad78c328cf83541c0c9b38a1e6c027c5e899d6662f6a9b77f926f4813c34829d5f8f10c09650b5a30dc13f7dde9d0033f46a938a51d79d94e7a6dd8e59e9656486377ec6c2a5908bfbeefc10bef61f7a78d80f520197642b0d52667e9bdd467f025d85aaf08cdf671960f5ae2e18f128a4bdc6a429c6f9e9092158c8fd96d05e1e1194f113c9d8d9ef2796b230667e717ee0076281b64b20a91e0bb2e11793b9d5efd34275a75a34b93ffe97f6e3e6a8d4395cdacf5a883996576ecf2af05358721b35a9e20d03347449d643c558c76e349a343e37a13e6bddfc94f3830997ea3fca6698be2d2f0776616799bf343d6f5b1d01072f6925e78cf635a6942fa1e81be43aef025a983860ab8655cdad227686de6fca62250d22da96f2c294311561a00dca14590593bf18f2ee8b185e9eba30ac8c15624d3c82a8fb709d13632595f2b538120172bf6432504a671c3dfe5d8e41ba1caee4d99af690335392ed94a8782aeb335918064dbfeb2772424a9f0add0c4609ce1f3ce1482a513221040f0ef580344dc73f6bd6d1366f98a949bef34797f47aa9dafe87a154956015a43c40dfcf5a1856ab54e760c236597183ef3991a63020b10cfcdc12c4b76fd81c44c4b88a64976eb5991bfff0aaf0e16bcf3b04804a65c6de402403be2bc80603b4ebfe3fa51f67107a3a945dcd0deac12b87b66de6f99837292d2799bf84a0910d4f4ec141979b814ad195f307a0d08707fbd0e3da2619779a86518b752bf3e24a016b10d8443231630204382b1ebb5a14d1ee90dbddfa2c904e32e1554ce1aaed5e1269ecb482260d78c3b87aa1979e14ffc9bea7bbd291750c68dd170ff2b599edff951a9fdc200fd31ae886f2b1053be51e0058fcf73522b5f8f637b8957f7bf209d3f83748217780e535980f896d686489ee33c11cb8844d047b64f0517c3ef0827f70dfbe929b08f52d13b578ce6e2290ad0aa47c6bb8e01e8f176e15cdbb948b45870cf3e3b025837548ef03a820d2491ed55f9a43e0ea8dccd2d64b19bbc09e101f907beac0bb08a5bb44280da14247ac902fe55a738d28e2c9792b536be68899826b4170251bef4af7dc225df375d82220148af8e4056a32bb7249e95a78ee369b8aaa0d4514f78f076b527f0c65c2f29520f61d175a681b62c02882dfd77728f04f8377a2ac7c920f8b05f243a5dfa85ef14b3a3fe55e3f6d0fc0741ac376e31277bea1146df35ffc64d9d5bfb8bb36f743c6a6424d3650013ccc2cf597a4bceebfc9ce40857dca4511545780fb6143f5655687bfb407a6e7095b839782125e813a6d2720294ab3a4319fbfea3a3c96d310e861257f102ddfdd98b149e19c6b84136f7083a46d27edb51f7d28d504eead3e7df2f869d4583680e202c45e20239db05cd0ee1f43d2b1544e2a93dead8d42921d37271fe0cacdc1c97ab6e95e4ec9b5281db462240a990c3eb19c36d283c5cbd0ff2ea7c01c984a7b81158f61563755ca5c31c911b8b4df0e1a82b1e4a22428b7c1c126a779aac39fa36249a7a7db2685d48ed43d515cdcd8b2c1cc2459171b2d0a4cc9ba07e7f355fba6d10a43b50e72d969f1f87deebd6ff1f27a59627eb717a35f2dbd38087f9407c7b4b6e1f664769286479629b140474135013a7d199079ecaab077dcc72a4a4b55674dbc0da544cbc4cf23e6c02a989d427ea1a67c4927ab8893d31305494665dc46e2d3a8439bae782cca625799ee264b255c45c6f7ee01897b6de0abe1717b3df3c20bbe3ac49c7d519a33cfcdec924d0a1611be849c5dacb97c766eb81dd1493eb627ef67cc640de5f2a1ff1033adcecd0112f89416b1a50f3cc8e77bcc3867dfa1c63a014e262c5ffc771573d14a6e9cd5ac26485c93bcfac365fe4f4788c71d329e1c19ec560de32a8d20e4e7eb717ee4c90cfc5808d3c4664c3ebf689953965c65e76b527c163737a4cb65d8271ed5cd29d0bfd2f909db19522700ba2b2546010d73316630a1a4f6c33d783cf21e686ddf0d94e4551e74877961120558886e38a89671785882f8fcd1f6e5fd1f08b5e368d76dba5a83b0a5d35e106ca42459888237c92b6b085e7d18e73e6f16160b040f865513744ced421a163d1d852c4944a28c50451e58826eb5846858d7dfe0f4a991de2015709fe99f422494803f97b7db5178d51c2d522be04afcf79f162b99aafb211edea6b546889e0965d4f8104b01c2268fb7c8bef5414012b696f528608285e404e980a76f16f55219688e6613b8d01590f80fb23010ea7cb1faf9702485a4b2cb3948a9b6511f3e2adea3c4c7ff2bfca16ca47bf691a5a880064374a0a80285f5b2575f6a920aa6ec0789cd07098d5b7976b605c01f83dc6a9191137e4d96e86087a0a665a6f505d0a12ff205bcad698768ceb7601fbb41de8e37c7549f7c8dc46216591ed95ed6cc97d12a546223e0032e45d3da2cec92aeedaca7e20693974fa293a89d43ed7065770b87bb36f4b14586529725c80620e5f21d7968c426ff5d0eb4fae70b8058630c3bf8d79995c137d090a53fb2133462df53a28f346a522ce09a4e1a01a50f2cb8b6db9361119e6307c457451ea83e7612b523f8e8ba3dbaf1a859993a7de0a06d2fbc72e4e3396f852159b5abb79e5a6438095e99db025ee87afecaf578350791777cecc2fed0d1d4c8ae4bfd9ae2078522ea67222fcc5dcaf0fcff53cb1f813ab2f29bdb4d3b0d8140a520063ba5294f390faa2e89762cf1d58570830506115f67beedc80ab7acb9ce2deef38da41200dc862643d25b1714445a85c206e426beadc1328b374ed6930123689bd7926f413e432247914ed5b0c98f3aed7fdcb0749add52ebf081ccf25482b4af0e99993bda8e0d23c2e899fe2ccd3b46399b1495e0360a35a0a536516c831023903604905ce6d63cbbb9b864ff511dfe0134f2b98a8ed3ab11784f2508ad3a6791b91ba49c52a0d810510f19c4bc9b222fd4120e14fe80f9bbd137a95a4c58e1564b92e603ce6d4a0f9e29533443c299d92ff6494751938cfe4e19b2dd30e2af7f20fe11bfe8fc7c64b62e8f027f8f6a8c6f49baa20fde03bbdfe74727573a8d7a0af5007fda9202c35142c5a3125aeda03670142eee5b3d85113df40097f9bfe1f988305cf91e2c11b7d56b75c5c0b7e28510eaf41956e5d786d823927d4dc061dd787e385ef45564ca24d604c7668bd15938b30248c93a9d715ea4b39ef7ebf1937c53e357a6bb1a41cea46dfbfabdace1bb8c78ff288d6ebacec57fd1c7701af0d0a774a535ae761d5ddcaa08d1740d4f156e5d86fbb13f5fec5aef8b786351b62dd68702abbcd067c03659cc6a01ebae13d1e5ea30adfd7a9f74fb8db5590746a21aa5d6558cb3b71ada2016c55f5cf520cd18b5e5607c68408b7a1f580de5e97419a305ba5c6ec5cdabf57095a9444e590715439a3be96f7cd3a7848e54537861923b3284a5316669553e7e19d6beabff8f782c449ea1bc08b10fa96af9eb9582b1cb2ba4d3cfae8c81d1119d1d0017e15de833e6bb421e3c7f89fee5ccba5eef7b1912225a22aabcdd3188c334c8992c500fefa244930ea7874901d29c33cae3977bc7bc82bcf2087f010c495194f74f1b77e79ea4d4081fe246301807b8d9efa4ec01e19740f873826c1356a0d247d9b3f06035ebb0bbf41ea46dac19f5d6a10dc3163145a488ed7642d16946513433b5fe17876610932b460c476ce84de01e47128e7ba5c19a90a44673de18452f182d37dae0cad4fbd4abd034ab0c93fae467ed30a4a02088d5f94b006b018c2ae21961b3684a00adffd581a89fc7d70fe82156cc0f5996c9bf6921873db33010603eba208807f79939c576a21895fd03bb25093f516e5751a1272a9480d773aa5c6f46d235062714da545eb4466aeedb03e3674e76fb5a7473630e0c53b64dfb456dc4b5466d7c943b89af94042ff7bb4f00cea0572a7fb597bb837cf65e2e60b9d5c6004787ff9200a8652c4b1d2be08d306368f7faaa6eae7bb79e3205e41b2a3547bffe95134cd9eb9a73cf90ed767dc3c1022bc994950f694257f0af856e64845c8fcb4d817b2738ea4f9dfef78d6425f90553b16b6941fb095324b037f3d006a39914038a8989c5e23d0f761b7f9540f97e760215b2d92d818ecf7cc68da153675d7011a96fc508ce3e1f2280b92ec1e041221e6e5648326305a2e3da6ecc84363867cef98303b62e13680ca11dbc7afe940b07d02c90a8a6d3d3394ca3e52e003dd261c48047f7b6fe490539ef3005f3331773d20c21ce87a9e81f57dc53bcd06426b709af6e143064d9a3034847c2c384f91d0e34278150d749296e97a7525bd209eed0b28f479ab6cd3c04af468ca8bca9e213ea239444c4ef03802bb32289763bbd810b17f887907752a93cd2620ba288e9f90198f36ddc55c4d28c8351d28de1d1febe71c56d635d7f38084e8477ff313cc3f75e6cf79054346438e11141ddb462525c12e4efcb6729f41d54d8d3eeaf94878d748c34d2272b021890bd1f25d70e92d8c036e91c33daeeb2a35c9ce9e28c33dbca940d8234e9e69cbb9d596c0a1d3d918c3747558bbecc96acb157df65e6e260705554994c3b103fba95dcdaae37ac2ad1c3f5d2d462d92bb052587ca389c23701e94510f538eb40d6bce25cecdcc7a9e386f7568981dbe9bcc0109416c97abe0d6b8b14c3a61efcb34864f2d1c2545f8f86eddcd683e77623cd0bae02b290e0d2f450f822a456533a66fd28288ac79b003cb747ed2ee4461c5c4c1b1774af11a94a11d5b88a16ae0f5757a5323b76c0dac1087e1352bea31a4d3785568fa656d9f16357677d4df07ab8bbfdf88237383ba12b84725f62c6dc55112d7681ff9ff8f2bfca73650c304d0618cda6ec06bdd50e52ce89f2b285f564573d022d6a6fca223c3c5a914e177cb6978d5ba57cc2975e536cdeb44787a17f0cea7559c4da34b46b820d0e596af8859eebd0066ce09a8b7caf92190925692ad34d9290788fae58339934adaaf0b148058368a5a237f8be7fa1e0ffbadf75c35eee0d219948561587f46517f22b04626d79bf0a274738157371f286ebe20cb5e65340fea06ed4a2cfa997f5107c221f4660e69ea30263bc46a683f81dad90b50da42a7841bcdbdb1c6713065acab6fdab2f03ae3fb100d7649669cbc1fa6213e35183b716729e3def91b2d69a1d74360c4df063ca59120d3ec5d99e3881b60a8401ce77bfc40dd96defda8d6d98f246dd16b42c6e2f5f6ab4991608264ac0d4fd702991c760f84f298c32f5e6d0dad0fc0a36f0632d37fddd8e78fab279f0d7c26e6ed9ea0412435d060757b3a54002c706592b422887313e417699a16f06f006efe5088070ec65639f4152c86b2f8b16a9c9559d61d16518e0a814612cb69bdfe77a9822f4ac0091a0d387d049e8a89eff5bcf542ee99a74c0352f74750a61d03f2fc34f5a1938730b241ba9713bfdc297a6a1cd62a6cd5890654f5f4db393c4a90848fefcb2812087f125e45af19de74748ddd727e456f7bba16b7eefd8a0d6e49784a48fb3a8b4ae6a4eb309cba348cdb0dc282892e77c680da49e2d2e01312b046b656eb51a1f62fc98e246630fd61f5f742032a06666b75ee6e142c1ddba25d30028eb59abd827a469c142684fc00d08c8f95651996c855432269dc7ecab3af7bd9ec6a2fa320c20b442d60079263826aabf57c5c2c52dc684e5e476fffe4c056876467af9dd078fcbd2fcbab49d347189599bba25aea2c72857dbd274421a0ceb40fd9242cc567fa8e8eec9878066807ee80dea1c4e3ed4b7ce9a91de4d9ef842cdc8ae2a5995bd63ab0788ca350797c5b77f2803f4618ce4c60b24ad671f31ea6601cccd486c71253be845c841d953f72d21fd2b1440e212b331bf80346683f4286e1ef631374dca2f0dcdd18e63c3ad1a0ec9468af0f0e508231baccfedb329feded164c8a044d3c316d7532ef933e921a2bccc8b6cb22f5e687ee21c7ecba24db10e1d9745723bb0760c46305f68da93dacbfdeec5d9c6aecfb9938082719440119832db2f14ee5717426f09227f6b16dcb660cd2e4e75b7a6b0599e859f2b5c5536e598b7d6e701e607dbd05a4abfce0d634f30bbfa27eb90b00c209c83bfb3c28484155e69bcea33cfd5963c8efb39123ce5da3b6be5a188344d9c1e5c368520638efee2e6390d90e75073d30b970380248f98ba43b4e86bff46a67e5d83dfe88fbb1fe0d8673e580fc0e3b4276a27b09a6fd484645232d69a815a902b55bd206cfb42f4ed179ccc5b35b9a2a6237c75fa93826dfa316529e1fc70c81724f7eb6a9ebd865b7beb34d9e6f584e962fcfbb18381c87fa82d8d67412c0ffa2cdde245e33cbcacbcaeb7d3c0ddda169c115ace326c3f4b11f68060be506bce83a6ff760bf19ef4c259b011826bd4238cba47fb02db3defe6d7796c2246218aaa7284c1ce0015f7c309610a81a32d30907f2155b77d13351c413128beb08baf9c790a1e1ea863e5d8c269b4ea55a557aa095689d91b22bbceae55607df174f6c11aed087340fe2722d34e2579ebc18dafd3c36572775d16dfb371ba54c94950985d0e5da9e7f2e8b2926689bf3bf37076ce92a870299b74b00b2a769b05f39619528a55eab9b966f8f802fa3984f6bf36d1ebdabfbd57857889352365c484fc733fe0e7d469f89273106ce494582108cc99b1c5b46254e853a66db547fde7e6215d419972ac1cbd76f5e501da89ab2726b490eb85c7ef30862a2a1e6b90c95358bd85875672f49208132cd820f57e0ccff35d35e1e525a2a6824f9e76ac7b25229d946379721c7089683bc54e1cfb82cda30952bfd852171c4ffe2267f0e39b9dacb3261870a9935067a2c35e64c7cdf66d20a49282960fe56e07de6f581ac52afec4581b49814448b53581fbf0a790be8e3aad5e56720c772bbcd0a70070a995083d1c3ad86e42092e86a402c97f736879f0f7122d6741e3b2f5aabd408ecaf172341db88efd56118d7a6cb5d4e789452a1dcf9c1d76e1aaf26a8092c15ae353ca744495f3650ffd3479d51eca73beb9bad7cf87fda4a74a7b6f6c3eb19012383c9dcb357919f1f6efb72595db8045ea7f55f5e85e40b07f210b36174ec0f3d239103af5b9adfd6f3d8d9943dc559a2737708ea649989673f4e921cf45efeed311014d5f5bc476c8f156b50d3ebb84793eabe5160f45b16c29b5ef5298bc4e2046ce64b29078e8f65e6eb86edb5dec83cd1808541894ece4b00151f6a099e4714a0ee07c1b48d06c280318f7560ee45e605e91338bd285f774fe4118eb3e19cd4c436b8372596fd887af325ed2de632dcfe6ad40b0d4d33e4951e8d4a5f45239901469d9e29cd14d886bfb55ca34553b54521ed98e5546fc9fe0eaa36c1d134a93ea88fcb762aecb5dbed8a47200ecde65b4235c36f0ceb8da5e9173a52cfe3f79b1132d5e24cf782bcf43a87992cdf160d22a902b05101278817a7da1ba320da84dd0801b58ac8c59bbe9a8024bc8eae8c5d70662c890a3f9b7946b3432c7f5dc5a26ff0a8987a350f0ed271fd9838bb31553c30d20d5d7487ec76c6e5b5794895400b229fa4d85d8fa07d8a71ed285b2b8cc5c050b61b42cd2810fcc959c283d4dad1c24c99cedc453143fc84ac2db27ab144ce0e5746c85e19efff73ec8b9b9ef6caed34fef66fcfc08d62e4113ea55bea2012fba2f1e8c425893a746f7dc3c100250be7b6cb7d7384f86e56fc7415cfbf95bc231e43accbf32b97695f092cbb68eb03da1168a41f98e0c258389c738a0ab60e59675cdba7f3fbfd8fdf4b83f8e9b8495f45fb57c92d8e3728235c5ef67c3fe0e85788a2c6a470651f6a37a97b596f841ff154af2de9035c23c57b663dd61c73dad0c2e7f6080213f98db5ce8952271868db798f15acd898cff77fea964d3627a80482038e12edd3e133a23d1e74d7a4bc859f898e85b0c117a8bdaff088d495755c290b01641232dd071ffb60eff8ccddfd78094f70328fe4181843679391af5b62df98381223da316c7d9ff5f84d13a8b2ea36625c1882508f9069956c3e2fd48d4a47d1feca9ec4c24181ff0a8d7a59b33df8084a1fc112e8cfd57a40f79b0c66fc0545d00ecdcefa27b524e15e8800c443c4871c3ed10174c17a92f2fd947abceb4fc7ef36d76937ef8357156f4a74392ce736d442d1acc420a4fe14f85abd6b4aac189fbd862274982b3fa4273ef63ea26da16fff5a2081201008c90b807606dc6055003ee1532c4065c72ff9a0fea8a555eea62e7414ec6ce0fdc3c2bfaccd5859c4945516b189206e3d320c3483515ef4d3187db8cb36ec9937726b8e3b58b224e7c3776d3346c0bdf51097f9ad4f07754bf8d0b23b5bbaec29a45bce5bca2f87a381bfe37924862c17c4c2f10c2d167a386e3c4e9dcf205904d4ee961e28ee346c0c3c1a34cef7f0f1337f5ed37aab3d2549c3e57eebaa14b8da6d6fd7af4c4923d82c866fb1e5ec09c44b6078ae51e147cdf7921e831caa32263c1c761d69330eb23e997d907977302c77af2302ec04e49cfdb8babc3265dc0dd483aa733623be7be4900924360df90e3a29f87150e4781abb3a22822de785b16947dfe89544976d488576c49124ffdb550fe044aef2a8e8bb97e1e6fa199208575f1cd21c5de2ffc9ee52a1e69db9256e1a45e7571fbf40d209cc53c1ec4f66d24b883f0d686d2d63c345e13e134839110bce4a2e820df1aa199cff8c958af4ad5f8749a21aed3c1286c82fce1d8c02822c874aab5d79423502c24af62522aeb66e998751f1fe4427cbbe845f3ccef618ec3829dcbf7457ddbf69ae4b3a589521ec3bd67134ee99584f3102b9ac175de47b5c23eeedda44c7c06e6e17f0de22f29665b9378060f755f92275e0bdab389200b02070520e69f5695ff196a298d8b44f97879fcaa6530bad274a8387f0d0f3e9d44f9fad2cfbc299a193060d8e15a2b76751b5f072754dd0e075d2be62af948cfb0df0b7ff1cb158456b1527ff72b89d716190244f4a1e7a67059c1af9ee7bfba78b1c78e25348eaaa37fff459c7bb77544c83fda62e2784c7a47e56db5b7ccd890e63b7dd7c75113cc2fd6f468c9d05720da6e5b2c550707e7aace440f59c48bf6c611a4d10b96c88de603ded519e25a991a1638a69da3155db282066c7fe7cd2e1dbf0eaa1ac05dd6445363f26d1609dc21bebdcb9d37e7bf1cdde9dd412e5b8013f0ed8d74f9714b2089c27d617487625036c6c7b91cc43650fa91e27ad6951ffd0125679f32cdfc1e4fef0c1fa8e8a57977aa0853e44216c74004691c11820cc2541dd0c5b2c39d04ce8a05cecc8b0f788f0cccbca3f70c2047e2ce0924428698b3e894d466c915b20db73d0d28ea92dbd3837ccf405b252dc949e4b7b85dc106b983949460e8e22a895c959cc3a2a150eff35df831b99aa312cf5ebd345e4524aa7339fb88d2f7718bc95fbb89297609687e95da14314c0c0c9b92</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">暂未公布.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>设计原则</title>
    <url>/2021/03/23/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</url>
    <content><![CDATA[<p><a name="teaqH"></a></p>
<h3 id="总的原则"><a href="#总的原则" class="headerlink" title="总的原则"></a>总的原则</h3><p>抽象与复用<br />松耦合<br><a name="jYbyJ"></a></p>
<span id="more"></span>
<h3 id="1、单一设计原则"><a href="#1、单一设计原则" class="headerlink" title="1、单一设计原则"></a>1、单一设计原则</h3><p><a name="LZwGq"></a></p>
<h3 id="2、开闭原则（OCP）"><a href="#2、开闭原则（OCP）" class="headerlink" title="2、开闭原则（OCP）"></a>2、开闭原则（OCP）</h3><p>模块和函数应该对扩展开放，对修改封闭<br />通过扩展实现变化，而不是修改<br><a name="0ei0B"></a></p>
<h3 id="3、里氏代换原则（LSP）"><a href="#3、里氏代换原则（LSP）" class="headerlink" title="3、里氏代换原则（LSP）"></a>3、里氏代换原则（LSP）</h3><p>子类型必须能够替换掉它们的基类型<br />是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化<br /><br><br />LSP是多态顺利实现的保证，从而使OCP成为可能。<br />正是子类型的可替代性才使得使用基类的模块在无需修改的情况下就可以扩展。<br />增加或修改任何一个子类型，基类不用修改（封闭）<br />基类的使用者（客户程序）通过多态得到扩展或修改过的行为（开放）<br><a name="xxRN7"></a></p>
<h3 id="4、依赖倒置原则"><a href="#4、依赖倒置原则" class="headerlink" title="4、依赖倒置原则"></a>4、依赖倒置原则</h3><p>改掉过程化的高层依赖底层，变成细节依赖抽象。即针对接口编程，不针对实现编程。使用接口和抽象类对返回值和变量说明<br />设计时，尽量从抽象类继承，而不是从具体类继承。继承等级树的所有叶子节点应当是具体类，而所有的树枝节点应当是抽象类或者接口。</p>
<ul>
<li>可减少类间的耦合，提高系统的稳定性，减少并行开发引起的风险，提高代码的可读性和可维护性。</li>
<li>大型项目中体现明显。规避非技术性因素引起的问题。以轻松扩展</li>
<li>是几个设计原则中最难实现的。是实现开闭原则的重要途径</li>
</ul>
<p>A.高层模块不应该依赖于底层模块，二者都应该依赖于抽象（针对抽象编程）<br />B.抽象不应该依赖于细节，细节应该依赖于抽象</p>
<ul>
<li>高层使用低层的对象及其服务</li>
<li>设计抽象接口，上层类使用接口，下层类实现接口<br><a name="F7Sus"></a><h3 id="5、接口分离原则（ISP）"><a href="#5、接口分离原则（ISP）" class="headerlink" title="5、接口分离原则（ISP）"></a>5、接口分离原则（ISP）</h3>尽量提供小接口。简单设计会过大。因为每个客户程序并不依赖于接口里的很多<br><a name="xXjFd"></a><h3 id="6、多用组合少用继承"><a href="#6、多用组合少用继承" class="headerlink" title="6、多用组合少用继承"></a>6、多用组合少用继承</h3>希望类之间<strong>尽量是低耦合</strong>的关系，而不希望是强耦合关系<br />即在许多情况下需要避开继承的缺点，而需要组合的优点<br><a name="zH5XO"></a><h3 id="7、迪米特法则"><a href="#7、迪米特法则" class="headerlink" title="7、迪米特法则"></a>7、迪米特法则</h3>知识最少原则，不要和陌生人说话。熟人好办事<br />即 一个对象应该对其他对象有尽可能少的了解。即 <strong>两个类不必彼此直接通信</strong>。通过第三者调用对方的方法。</li>
</ul>
]]></content>
      <categories>
        <category>系统分析与设计</category>
      </categories>
      <tags>
        <tag>系统分析与设计</tag>
        <tag>设计原则</tag>
      </tags>
  </entry>
  <entry>
    <title>git操作</title>
    <url>/2021/03/20/git%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h3 id="git-的相关操作"><a href="#git-的相关操作" class="headerlink" title="git 的相关操作"></a>git 的相关操作</h3><p>git init 初始化</p>
<p>git add .    把所有修改的文件加到下一次的commit中，也可把.换成特定的文件名</p>
<p>git commit -m “” 提交加入的文件，双引号内填写提交信息</p>
<span id="more"></span>

<p>git status 显示哪些文件已被staged、未被staged以及未追踪（untracked）</p>
<p>git switch -c &lt; breach &gt; 进行分支的切换，去掉-c将切换到一个已有分支</p>
<p>git merge &lt; branch &gt; 将制定分支合并到当前分支</p>
<p>git remote add &lt; name &gt; &lt; url &gt; 添加一个新的远程连接。添加后可使用name作为指定url远程连接的名称</p>
<p>git fetch &lt; remote &gt; &lt; branch &gt; 从指定remote抓取指定branch的所有commit到本地repo。去掉branch将抓取远程所有分支的修改</p>
<p>git pull &lt; remote &gt; 从指定remote抓取所有分支的commit并立刻合并到本地repo</p>
<p>git push &lt; remote &gt; &lt; branch &gt; 将本地指定的branch推送到指定远程remote。如果远程没有对应的分支，将自动在远程创建此分支</p>
<p>git config –global user.name &lt; name &gt;</p>
<p>git config –global user.email &lt; email &gt;<br><br></p>
<h3 id="把本地文件提交到github"><a href="#把本地文件提交到github" class="headerlink" title="把本地文件提交到github"></a>把本地文件提交到github</h3><p>git init<br>git add README.md<br>git commit -m “first commit”<br>git branch -M master<br>git remote add origin &lt; 仓库地址 &gt;<br>git push -u origin master</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>给原来的hexo要装新的插件</title>
    <url>/2021/03/18/%E7%BB%99%E5%8E%9F%E6%9D%A5%E7%9A%84hexo%E8%A6%81%E8%A3%85%E6%96%B0%E7%9A%84%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<p>1.把原来的source克隆下来，在本地装好插件                                                                                                                  </p>
<p>2.然后传到新的仓库例如A11     </p>
<span id="more"></span>                                                                                                                                        

<p>3.需要给A11，添加秘钥（Repository secrets  HEXO_DEPLOY_PRI），秘钥存在blogSourceCodeFinal仓库的github-deploy-key文件里</p>
<p>4.还需修改A11里的.github/workflows/deploy.yml文件的第11行</p>
<p>5.然后修改A11里的themes/next/_config.yml文件的第300行</p>
<p>6.然后就完事了</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>A01答疑总结</title>
    <url>/2021/03/18/A01%E7%AD%94%E7%96%91%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="e272aae7efda7835d83ca3e1dd3b8164ff727c4eb3a032aa18c5cf999034da43"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 内部资料需要密码，只允许我们看.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>Mac上使用VSCode编辑Latex+Skim跳转预览</title>
    <url>/2021/03/18/Mac%E4%B8%8A%E4%BD%BF%E7%94%A8VSCode%E7%BC%96%E8%BE%91Latex+Skim%E8%B7%B3%E8%BD%AC%E9%A2%84%E8%A7%88/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="57054eaab5aec90ff016b74580c15d1293880db314b675c79b253f3e1a8cc541">fa609df12acca9fd5a65b3cc320f972365657f851aefd155068797416e9e2762534e67a2ab0a0ca180cd7d6c320bcd590d1ec98a850d57bec49e9dd089004e6a2c2172ab83c3a615ff7b8d34ab16788d7ae4f6bae6d4b2bb69b25db6fa4204d9403fcdf7ee6e0690f22c8fe3e9b0603a13cf3f22a4682f66800879c3cea746b2febd3e9cc8883c522a46e929c02bf28126db4dece4c9ef5840389909aef07b766d43d00afbeb8d92011ec943450b9b43f546b39d346dd99eb3680588ecd2781c3e5c4f46d9c548a53f00ebfe9b171ad7f173b7f27598ecaa6a89c81008fbcd7e0fc73efbfcfc85b1dd1310a0b88286c5eb1ba0c03257dfa4a7b0e71c74ef3c16c9395322ef63d85a8cde686bf08594fc729c88fdc73ac186b28111a58573283831c689cc2cd9c8e73f5ee38ca7370a974b3bd302f49db7c89ee22120a4d299c9a575b5a5bee074eacb7950417f90972f0a8237f159c61f7dd311a95a724beaec5f4ad059fc1b74bf3bfde41c61a8aae5fae88b0ead1994ccc41e5822b9c718f53faf8d3cb4c2c490f18658d0070d77b97a34f7559277206b6d9ca1d3d65875ff5af3372b036e4794d8436c8961c16eb35bda9a1983596af81e78d8dfe8b6fe4e84d5425330f9c50c829be722b68bc08dacca09ceb0dedb31e2f60fda99e809901e6c997602f426d3d867559ab2eb4461795a8dc2f867cf46a19180d80894a0c8822006f464bd60decb4e01b9fce55c30e0a088cac162be5f3620da407924b7bb054a165d333eec8e5ea704502eb657ad</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 内部资料需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>论文</category>
        <category>Latex</category>
      </categories>
      <tags>
        <tag>Latex</tag>
        <tag>技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>Python--Matlibplot入门练习2</title>
    <url>/2021/03/15/Python--Matlibplot%E5%85%A5%E9%97%A8%E7%BB%83%E4%B9%A02/</url>
    <content><![CDATA[<h2 id="figure"><a href="#figure" class="headerlink" title="figure"></a>figure</h2><p>plt.figure(figsize=(8,4))<br />定义图的大小<br><a name="z0q2G"></a></p>
<h2 id="plt-xlim-plt-ylim"><a href="#plt-xlim-plt-ylim" class="headerlink" title="plt.xlim() plt.ylim()"></a>plt.xlim() plt.ylim()</h2><p>限定轴的刻度，范围</p>
<span id="more"></span>

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">b = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">plt.figure(figsize=(<span class="number">8</span>,<span class="number">4</span>))</span><br><span class="line">plt.xlim(<span class="number">0</span>,<span class="number">11</span>,<span class="number">2</span>)</span><br><span class="line">plt.ylim(<span class="number">0</span>,<span class="number">9</span>)</span><br><span class="line">plt.scatter(a, b, c=<span class="string">&#x27;r&#x27;</span>, marker=<span class="string">&#x27;v&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.legend(<span class="string">&#x27;x&#x27;</span>) <span class="comment"># 将图例显示出来</span></span><br><span class="line"></span><br><span class="line">plt.plot()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210315200140.png" alt="image"><br><a name="4KWR0"></a></p>
<h2 id="plt-subplot"><a href="#plt-subplot" class="headerlink" title="plt.subplot()"></a>plt.subplot()</h2><p>多张子图展示在一起<br />subplot(nrows, ncols, index, *<em>kwargs)<br />nrows表示一共有几行，ncols一共有几列，index表示这是第几个子图<br />例如ax1 = plt.subplot(2, 2, 1)  <br />表示该图放在2</em>2的第一个位置</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 首先通过 np.linspace 方式生成 x，</span></span><br><span class="line"><span class="comment"># 它包含了 50 个元素的数组，这 100 个元素均匀的分布在 [0, 50] 的区间上</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">50</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ax1 = plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>) </span><br><span class="line">plt.plot(x, np.sin(x), <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ax2 = plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, sharey=ax1)  <span class="comment"># 与 ax1 共享y轴</span></span><br><span class="line">plt.plot(x, <span class="number">2</span> * np.cos(x), <span class="string">&#x27;g&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ax3 = plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">plt.plot(x, np.tan(x), <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ax4 = plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, sharey=ax3)  <span class="comment"># 与 ax3 共享y轴</span></span><br><span class="line">plt.plot(x, <span class="number">2</span> * np.sin(x), <span class="string">&#x27;y&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210315200200.png" alt="image (1)">\</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>数据处理</tag>
      </tags>
  </entry>
  <entry>
    <title>面向对象设计—动态建模</title>
    <url>/2021/03/12/%E5%8A%A8%E6%80%81%E5%BB%BA%E6%A8%A1/</url>
    <content><![CDATA[<h3 id="消息概述"><a href="#消息概述" class="headerlink" title="消息概述"></a>消息概述</h3><p>消息（Messages）: 从一个对象（发送者）向另一个或几个其他对象（接收者）发送信号，或由一个对象（发送者或调用者）调用另一个对象（接收者）的操作。</p>
<p>•消息定义的是对象之间某种形式的通信，它可以激发某个操作、唤起信号或导致目标对象的创建或撤销。</p>
<span id="more"></span>

<img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/%E6%B6%88%E6%81%AF%E6%A6%82%E8%BF%B0.png" alt="image-20210312163212533" style="zoom:33%;" />

<p>两种系统：<br>顺序系统中的消息（都是同步的）<br>并发系统中的消息:同步（阻断 ，限时），异步（不论是否准备好）</p>
<p>消息的接收者是否唯一<br>1）发消息定向发送给唯一的接受者，为<strong>定向消息</strong>，<br>2）把消息发送给某个范围内所有可能的接收者，为<strong>广播消息</strong></p>
<img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/%E6%B6%88%E6%81%AF%E7%AC%A6%E5%8F%B7%E8%A1%A8%E7%A4%BA.png" alt="image-20210312165153349" style="zoom:33%;" />

<h3 id="顺序图"><a href="#顺序图" class="headerlink" title="顺序图"></a>顺序图</h3><p>组成：</p>
<p>•活动者（actor）或者 对象（object）</p>
<p>•生命线（lifeline）</p>
<p>•激活(activation)/ 控制焦点（focus of control）</p>
<p>•消息（message）</p>
<p> <strong>顺序图用来描述对象间的交互行为。</strong>表现用例中的行为顺序，描述了如何一步步完成系统的某项功能</p>
<p>序列图将交互关系表示为一个二维图。其中，纵轴是时间轴，时间沿竖线向下延伸。横轴代表了在交互中各独立的对象。</p>
<img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%A1%A8%E7%A4%BA%E6%96%B9%E6%B3%95.png" alt="image-20210312165628621" style="zoom:33%;" />

<img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210312171501%E5%AF%B9%E8%B1%A1%E9%97%B4%E6%B6%88%E6%81%AF%E9%80%9A%E4%BF%A1.png" alt="image-20210312171500939" style="zoom:33%;" />

<p>复杂控制逻辑有活动图描述更清晰，但<strong>活动图不能表示消息</strong></p>
<h3 id="协作图"><a href="#协作图" class="headerlink" title="协作图"></a>协作图</h3><p>合作图可以用来描述系统<strong>对象之间的交互</strong>,表现对象协作关系的图，动态视图的另一种表现形式。强调这组<strong>对象之间的关系</strong>，强调发送和接受消息的对象之间的结构组织的交互图，显示对象、对象之间的链接以及对象之间的消息 。<br>  它表示了协作中作为各种类元角色的对象所处的位置，在图中主要显示了<strong>类元角色（Classifier Roles）和关联角色（Association Roles）。</strong></p>
<p>1 对象：系统中的对象可以参与一个或多个协作<br>2  链接：表示参与协作执行的<strong>关联</strong>的描述多重性、角色。<br><strong>当协作被实例化时，对象受限于类元角色，连接受限于关联角色</strong></p>
<h3 id="协作图与顺序图的区别与联系"><a href="#协作图与顺序图的区别与联系" class="headerlink" title="协作图与顺序图的区别与联系"></a>协作图与顺序图的区别与联系</h3><p>顺序图</p>
<img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210312195008%E9%A1%BA%E5%BA%8F%E5%9B%BE.png" alt="image-20210312195008385" style="zoom:33%;" />



<p>协作图</p>
<img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/20210312195032%E5%8D%8F%E4%BD%9C%E5%9B%BE.png" style="zoom:33%;" />]]></content>
      <categories>
        <category>系统分析与设计</category>
      </categories>
      <tags>
        <tag>面向对象的设计</tag>
        <tag>动态建模</tag>
      </tags>
  </entry>
  <entry>
    <title>面向对象设计---静态建模</title>
    <url>/2021/03/12/%E9%9D%99%E6%80%81%E5%BB%BA%E6%A8%A1/</url>
    <content><![CDATA[<h4 id="类图建立"><a href="#类图建立" class="headerlink" title="类图建立"></a>类图建立</h4><ol>
<li>发现类</li>
<li>发现类的属性</li>
<li>发现类的操作</li>
<li>类之间的关系</li>
<li>调整类图结构<span id="more"></span>
<h4 id="类的分类"><a href="#类的分类" class="headerlink" title="类的分类"></a>类的分类</h4></li>
</ol>
<p>有形性：有形还是抽象</p>
<p>包含性：原子还是聚合</p>
<p>顺序性：并发还是顺序</p>
<p>持久性：短暂、临时、还是持久的</p>
<p>完整性：是易被外界影响，还是保护的</p>
<p>三个主要的类：</p>
<ul>
<li>边界类：系统及其参与者的边界</li>
<li>控制类：系统的控制逻辑</li>
<li>实体类：系统使用的信息</li>
</ul>
<h5 id="边界类"><a href="#边界类" class="headerlink" title="边界类"></a>边界类</h5><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/%E8%BE%B9%E7%95%8C%E7%B1%BB.png" alt="image-20210311215521409" style="zoom:33%;" />

<p>系统与参与者的边界，即信息或响应的事件</p>
<p>两类边界类</p>
<ul>
<li>用户边界类</li>
<li>系统和设备接口类</li>
</ul>
<p>识别边界类</p>
<p>每对参与者/用例定义一个边界类<br>不描述窗口组件等界面的组成元素。<br>若两个用例同时与一个参与者交互,可共用一个边界类</p>
<h5 id="控制类"><a href="#控制类" class="headerlink" title="控制类"></a>控制类</h5><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/%E6%8E%A7%E5%88%B6%E7%B1%BB.png" alt="image-20210311215650763" style="zoom:33%;" />

<p>控制类表示系统的控制逻辑</p>
<p>识别控制类</p>
<p>开发早期，为每个用例定义一个控制类，负责该用例的控制逻辑</p>
<p>针对复杂用例，可为备选路径分别定义不同控制类</p>
<p>随着分析的继续，一个复杂用例的控制类可以发展为多个</p>
<p>隔离和协调边界类和实体类。当用例复杂时(如有分支的事件流)，一个用例可以有控制类，本身不处理具体任务，而是调度其它类完成具体的任务。</p>
<p>当用例事件流逻辑结构简单，没必要用控制类，可用边界类实现用例的行为，如“登录”。 </p>
<h5 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h5><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/%E5%AE%9E%E4%BD%93%E7%B1%BB.png" alt="image-20210311215710974" style="zoom:33%;" />

<p>用例中参与对象，对应现实世界中的事物</p>
<p>实体类描述必须存储的信息及其相关行为</p>
<p>实体类的识别质量取决于文档的风格和质量</p>
<h4 id="类的属性"><a href="#类的属性" class="headerlink" title="类的属性"></a>类的属性</h4><p>类可有任意数目的属性，也可没属性。所有对象共享的属性是类属性，用下划线标识</p>
<p>尽可能将所有属性的可见性设置为private；<br>仅通过set方法更新属性；<br>仅通过get方法访问属性；</p>
<h4 id="类的操作"><a href="#类的操作" class="headerlink" title="类的操作"></a>类的操作</h4><p>一个类可有任意数量的操作或 没操作，且每个操作只应用于该类的对象。 </p>
<p>属性是描述类的对象特性的值，而操作用于操纵属性的值进行改变或执行其他动作。</p>
<p>操作有时 也叫  函数，方法。  </p>
<p>注:类操作:用下划线标识 </p>
<p>（1）寻找潜在的对象类操作<br>系统功能<br>问题域<br>对象状态<br>（2）筛选、确定操作<br>功能性<br>关联性<br>单一性<br>完整性</p>
<h4 id="类之间的关联"><a href="#类之间的关联" class="headerlink" title="类之间的关联"></a>类之间的关联</h4><p>（1）建立实例连接（对象间的静态联系）</p>
<p>​            对象之间的实例连接称为<strong>链接(Link)</strong></p>
<p>​            把类之间的实例连接称为<strong>关联(Association)</strong></p>
<p>（2）消息传递（动态）</p>
<p>​            对象之间的通信只能通过消息的传递和接收完成</p>
<p>（3）筛选对象间的关联</p>
<ul>
<li><p>原始性：删除衍生关联，即重复关联</p>
</li>
<li><p>单一性：删除多重关联关系</p>
</li>
<li><p>结构性：删除非结构的暂时性关系</p>
</li>
<li><p>相关性：删除与实际操作无关的关系</p>
</li>
</ul>
<p>关联（拥有， ASSOSATION，使用实例连接/单，双，自，弱）<br><strong>聚合（整体和部分关系，HAS A比关联 强，比组合 弱）</strong><br><strong>组合（整体和部分关系，合成关系， contains-a，部分不能离开整体）</strong></p>
<p>泛化（一般和特殊关系(区别），继承， GENERALIZATION ）<br>实现（拥有，类和接口的关系 Realization）<br>依赖（DEPENDENCY）</p>
<p>关联和聚合的区别：语义上，关联的两个对象之间一般是平等的<br>关联和泛化（类之间的语义关系）</p>
<img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/%E7%B1%BB%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E8%81%94%E7%AC%A6%E5%8F%B7.png" alt="image-20210311230746206" style="zoom: 33%;" />

<h4 id="关联"><a href="#关联" class="headerlink" title="关联"></a>关联</h4><p>程序中,关联常表示拥有对其他对象的引用的实例变量</p>
<p>==导航性==：若A指向B   则B为A的成员变量。 </p>
<ul>
<li>两个类之间有关联，其关联关系可以通过在自己类的属性和操作定义中将相关联的类作为对象成员使用而体现出来。</li>
</ul>
<ul>
<li>在操作定义中也体现了关联关系，将对象作为参数成员使用。</li>
</ul>
<ul>
<li>也可以通过发送消息调用相关联的类的操作。</li>
</ul>
<p>关联：单项关联，有约束的关联，限定关联，关联类</p>
<h5 id="单项关联："><a href="#单项关联：" class="headerlink" title="单项关联："></a>单项关联：</h5><ul>
<li>通过在自己类的属性和操作定义中将相关联的类作为对象成员使用而体现出来。</li>
<li>在操作定义中也体现了关联关系，将对象作为参数成员使用。</li>
<li>也可以通过发送消息调用相关联的类的操作。</li>
</ul>
<p>在系统中可能会存在一些类的属性对象类型为该类本身，这种特殊的关联关系称为<strong>自关联</strong>。例如：一个节点类(Node)的成员又是节点Node类型的对象</p>
<p><strong>多重性关联关系</strong>又称为重数性(Multiplicity)关联关系，表示两个关联对象在数量上的对应关系。在UML中，对象之间的多重性可以直接在关联直线上用一个数字或一个数字范围表示。</p>
<img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/%E5%A4%9A%E9%87%8D%E6%80%A7%E5%85%B3%E7%B3%BB.png" alt="image-20210311234025708" style="zoom:33%;" />

<h5 id="有约束的关联"><a href="#有约束的关联" class="headerlink" title="有约束的关联"></a>有约束的关联</h5><p>关联次序（对多关联的多端对象进行排序）</p>
<p>用继承表示有约束的关联</p>
<p>花括号表约束</p>
<h5 id="限定关联："><a href="#限定关联：" class="headerlink" title="限定关联："></a>限定关联：</h5><p>采用限定词把一对多关系简化成一对一关系</p>
<p>受限关联用于一对多或多对多的关联，一个小方块，内标限制内容，位于靠近受限制方的关联末端。</p>
<p>限制符号用来区分关联多端的对象集合，指明了在关联多端某个特殊对象受限制，利用限定词把一对多关系简化成了一对一关系，将多对多简化为多对一。</p>
<p>设计中的类图关联限定符用某种键值或者记号实现的，而不是用Java的引用实现的</p>
<h5 id="关联类："><a href="#关联类：" class="headerlink" title="关联类："></a>关联类：</h5><p><strong>任何时候有多对多的关联，应考虑是否需要一个关联类。</strong></p>
<p>OO语言不直接支持关联类,关联类变为具体类</p>
<p>一个关联类有两个多对一的关联，要创建一个关联类的实例，必须已经创建了它所关联的两个类的实例。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN//img/%E5%85%B3%E8%81%94%E7%B1%BB.png" alt="image-20210312001020791"></p>
<h5 id="多重（N元）关联："><a href="#多重（N元）关联：" class="headerlink" title="多重（N元）关联："></a>多重（N元）关联：</h5><p>解决多对多的关联是将其化简为二元关联</p>
<ul>
<li><p>用词组通过限定词方式 </p>
</li>
<li><p>建立链上的属性</p>
</li>
<li><p>增设具体的类</p>
</li>
</ul>
<h5 id="有子集的关联："><a href="#有子集的关联：" class="headerlink" title="有子集的关联："></a>有子集的关联：</h5><h5 id="关联的构造型："><a href="#关联的构造型：" class="headerlink" title="关联的构造型："></a>关联的构造型：</h5><p>丰富了表示法的含义，不改变结构，改变含义</p>
<p>《create》构造型表明源对象<strong>创建了目标对象</strong>,然后把它传递给系统其他部分</p>
<p>《local》构造型表明源类对象<strong>创建了目标类对象实例</strong>,并把这个实例包含在一个局部变量中。</p>
<h4 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h4><p>在聚合关系中，成员对象是整体对象的一部分，但是成员对象可以脱离整体对象独立存在。</p>
<h4 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h4><p>在组合关系中整体对象可以控制成员对象的生命周期，一旦整体对象不存在，成员对象也将不存在，成员对象与整体对象之间具有同生共死的关系。</p>
<h4 id="泛化"><a href="#泛化" class="headerlink" title="泛化"></a>泛化</h4><p>也就是继承关系，用于描述父类与子类之间的关系，父类又称作基类或超类，子类又称作派生类</p>
<h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><p>是一种使用关系，特定事物的改变有可能会影响到使用该事物的其他事物，在需要表示一个事物使用另一个事物时使用依赖关系。大多数情况下，依赖关系体现在某个类的方法使用另一个类的对象作为参数。</p>
<p>在系统实施阶段，依赖关系通常通过三种方式来实现：</p>
<p>1)第一种也是最常用的一种方式是将一个类的对象作为另一个类中方法的参数</p>
<p>2)第二种方式是在一个类的方法中将另一个类的对象作为其局部变量</p>
<p>3)第三种方式是在一个类的方法中调用另一个类的静态方法。</p>
<h4 id="接口与实现"><a href="#接口与实现" class="headerlink" title="接口与实现"></a>接口与实现</h4><p>在很多面向对象语言中都引入了接口的概念，在接口中，通常没有属性，而且所有的操作都是抽象的，只有操作的声明，没有操作的实现。</p>
<p>接口之间也可以有与类之间关系类似的继承关系和依赖关系，但是接口和类之间还存在一种实现(Realization)关系，在这种关系中，类实现了接口，类中的操作实现了接口中所声明的操作。</p>
<h4 id="类的结构和层次"><a href="#类的结构和层次" class="headerlink" title="类的结构和层次"></a>类的结构和层次</h4><ol>
<li><p>整体和部分结构</p>
</li>
<li><p>一般与特殊结构（分类关系、归纳关系、继承关系）</p>
<p>从特殊类发现一般类</p>
<p>通过增加属性简化一般-特殊结构</p>
<p>取消用途单一的一般类</p>
<img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/%E4%B8%80%E8%88%AC%E5%92%8C%E7%89%B9%E6%AE%8A.png" alt="image-20210312151126382" style="zoom: 33%;" />

<img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/%E4%B8%80%E8%88%AC%E7%89%B9%E6%AE%8A%E7%BB%93%E6%9E%84.png" alt="image-20210312151607041" style="zoom:33%;" />

<img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/%E5%8F%96%E6%B6%88%E7%94%A8%E9%80%94%E5%8D%95%E4%B8%80%E7%9A%84%E4%B8%80%E8%88%AC%E7%B1%BB.png" alt="image-20210312151707321" style="zoom:33%;" /></li>
<li><p>实例连接</p>
<ol>
<li>简单的实例连接<ol>
<li>一对多、多对多的实现</li>
<li>多对多的关联实现</li>
</ol>
<img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/img/%E5%A2%9E%E5%8A%A0%E4%B8%80%E4%B8%AA%E7%B1%BB.png" alt="image-20210312151909501" style="zoom:33%;" />

多对多变成一对多</li>
<li>复杂的实例连接<ol>
<li>采用复杂的实例连接</li>
<li>用对象表示其复杂性</li>
</ol>
</li>
<li>三元（N元）连接</li>
</ol>
</li>
</ol>
<h4 id="对象图"><a href="#对象图" class="headerlink" title="对象图"></a>对象图</h4><p>对象图中包含<strong>对象（Object）和链（Link）</strong>。其中对象是类的特定实例，链是类之间关系的实例，表示对象之间的特定关系。</p>
<p>可以被看作是类图在某一时刻的实例。类图的实例<br>对象图——描述系统在某个时刻的静态结构。</p>
<p>状态：对象的状态包括对象的所有属性和这些属性的当前值<br>行为：没有一个对象是孤立存在的，对象可以被操作，也可以操作别的对象，而行为就是一个对象根据它的状态改变和消息传送所采取的行动和所做出的反应 </p>
<table>
<thead>
<tr>
<th><strong>类图</strong></th>
<th><strong>对象图</strong></th>
</tr>
</thead>
<tbody><tr>
<td>类通常具有三个分栏：名称、属性和操作</td>
<td>对象通常只有两个分栏：名称和属性</td>
</tr>
<tr>
<td>在类的名称分栏中只有类名</td>
<td>对象名称形式为“对象名：类名”，匿名对象名称形式为“：类名”；有下划线</td>
</tr>
<tr>
<td>类中列出了操作</td>
<td>对象图中不包含操作，因为对于属于同一个类的对象而言，其操作是相同的</td>
</tr>
<tr>
<td>类使用关联连接，关联使用名称、角色、多重性以及约束等特征定义。</td>
<td>对象使用链连接，链拥有名称、角色，但是没有多重性。对象代表的是单独的实体，所有的链都是一对一的，因此不涉及到多重性</td>
</tr>
<tr>
<td>类的属性分栏定义了所有属性的特征</td>
<td>对象则只定义了属性的<strong>当前值</strong></td>
</tr>
</tbody></table>
<h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><p>特殊的抽象类</p>
<p>属性：无（定义属性但不能实现）</p>
<p>操作：抽象操作（只有操作名，没有具体实现）</p>
<p>接口常用来定义或限制软件构件的对外运算</p>
<p><strong>接口是在没有给出对象的实现和状态的情况下对对象行为的描述。接口是一种特殊的类，所有接口都是有构造型&lt;&lt; interface &gt;&gt;的类。在UML中，接口使用一个带有名称的小圆圈来进行表示，并且可以通过一条Realize（实现关系）线与实现它的类相连接。</strong></p>
<img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN//img/%E5%AE%9E%E7%8E%B0%E6%8E%A5%E5%8F%A3%E7%9A%84%E7%B1%BB%E5%9B%BE.png" alt="image-20210311201146189" style="zoom: 33%;" />

<p>箭头指向接口</p>
<p>接口是引用类型的，和抽象类的相似之处有三点：<br>不能实例化；<br>包含未实现的方法声明；<br>位于继承层次的上层<br>派生类必须实现未实现的方法，抽象类是抽象方法，接口是所有成员</p>
<h4 id="接口与抽象类的区别"><a href="#接口与抽象类的区别" class="headerlink" title="接口与抽象类的区别"></a>接口与抽象类的区别</h4><table>
<thead>
<tr>
<th></th>
<th><strong>接口</strong></th>
<th><strong>抽象类</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>概念</strong></td>
<td><strong>定义行为规范，子类是“行为需要按照接口来完成”如“叫”</strong>  <strong>是抽象类的变体，特殊的抽象类</strong></td>
<td>事物的高度聚合，子类对于抽象类是“是”的关系  不’完全’的类**,相当于是接口和具体类的一个中间层.即满足接口的抽象,也满足具体的实现**</td>
</tr>
<tr>
<td><strong>可定义的成员</strong></td>
<td><strong>方法（但不实现）、属性（不包括字段），索引，事件（不包含委托）</strong></td>
<td><strong>可有构造方法，成员变量（可以用不同的修饰符修饰）</strong></td>
</tr>
<tr>
<td><strong>不能包含的</strong></td>
<td>常数，字段，运算符，委托，内部类，析构函数，构造函数，静态成员**(C#)**  JAVA<strong>：变量（除</strong> public static final<strong>成员变量）</strong></td>
<td><strong>不能出现抽象构造函数，抽象静态方法</strong></td>
</tr>
<tr>
<td>抽象<strong>abstract方法</strong></td>
<td>全部（<strong>public权限）</strong></td>
<td><strong>部分。一个抽象类有一个或多个抽象方法</strong></td>
</tr>
<tr>
<td><strong>定义类型方法</strong></td>
<td><strong>不给</strong></td>
<td><strong>可以给出实现也可不给</strong></td>
</tr>
<tr>
<td></td>
<td><strong>一种行为规范</strong></td>
<td><strong>对  对象的抽象</strong></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th></th>
<th><strong>接口</strong></th>
<th><strong>抽象类</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>具体属性</strong></td>
<td><strong>无</strong></td>
<td><strong>可有</strong></td>
</tr>
<tr>
<td><strong>继承类对两者涉及方法的实现</strong></td>
<td><strong>与子类相似，除了该实现类不能从接口定义中继承行为</strong>    <strong>要给出相应的方法和属性实现（都要重写）</strong></td>
<td>对抽象类定义的方法可以不重写（非抽象方法，或是子类也为抽象类）  如果一个非抽象类是某个抽象类的子类，那么它必须重写父类的<strong>abstract方法，即在子类中将abstract方法重新声明，但必须去掉abstract修饰符。同时要保证声明的方法名字、返回类型、参数个数和接口中的方法完全相同</strong></td>
</tr>
<tr>
<td><strong>新增方法</strong></td>
<td><strong>修改继承类，提供新定义方法（一旦公布不应改变</strong></td>
<td><strong>继承类可不做任何处理（不会对子类影响）</strong></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th></th>
<th><strong>接口</strong></th>
<th><strong>抽象类</strong></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>一个类可以实现多个接口</td>
<td>一个类只能继承一个直接的父类，这个父类可能是抽象类</td>
</tr>
<tr>
<td></td>
<td>在抽象类没有可供继承的默认实现时，一般用接口代替该抽象类</td>
<td>定义一个类时不打算给他创建对象，只想作为基类，可将其声明为抽象类</td>
</tr>
<tr>
<td></td>
<td>根本不知道类的存在</td>
<td>子类—父类</td>
</tr>
<tr>
<td></td>
<td>如果行为跨越不同的类，可用接口</td>
<td>对相似类的对象—使用继承类</td>
</tr>
</tbody></table>
<p>接口的优势：</p>
<p>1 不只可以作用于引用类型还可以用于值类型，抽象类只能用于引用类型<br>2 通过接口实现多继承<br>3 可以被多个类型重用<br>4 减少暴露的属性和方法，保护类型对象</p>
<p>缺点：</p>
<p>定义的方法，属性只能相对于继承它的类型。多层继承关系很难。</p>
<h4 id="包图"><a href="#包图" class="headerlink" title="包图"></a>包图</h4><p>包拥有的元素：类、接口、组件、结点、协作（对象类之间的关联）、用例、图以及其他包。<br>一个模型元素不能被一个以上的包所拥有。<br>如果包被撤销，其中的元素也要被撤销。<br>一个包形成了一个命名空间。<br>每个包必须有一个与其他包相区别的名称。<br>两种形式：简单名和路径名。</p>
<p>可见性：包对自身所包含的内部元素的可见性也有定义，<strong>私有元素对包外部元素完全不可见</strong>；protected定义的被保护的元素只对那些与包含这些元素的包有<strong>泛化关系</strong>的包可见；public定义的公共元素对所有引入的包以及它们的后代都可见。</p>
<p>包嵌套的两种表示：<br>（1）内嵌式表示法<br>（2）树形层次结构表示法</p>
<p>包之间可以有<strong>依赖和继承</strong>等关系。</p>
<p>依赖：两个包中的==对象类==之间有依赖，则两个包有依赖；<br>在一个包中==引入==另一个包输出的元素<br>继承：包之间的继承关系描述了系统的接口。</p>
]]></content>
      <categories>
        <category>系统分析与设计</category>
      </categories>
      <tags>
        <tag>面向对象的设计</tag>
        <tag>静态建模</tag>
      </tags>
  </entry>
  <entry>
    <title>系统规划方法</title>
    <url>/2021/03/10/%E7%B3%BB%E7%BB%9F%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<h3 id="系统规划方法"><a href="#系统规划方法" class="headerlink" title="系统规划方法"></a>系统规划方法</h3><p>MIS：管理信息系统( Management Information System,简称MS)</p>
<h4 id="战略集合转换法（SST）"><a href="#战略集合转换法（SST）" class="headerlink" title="战略集合转换法（SST）"></a>战略集合转换法（SST）</h4><p>面向主题：决策信息</p>
<p>侧重范围：系统目标</p>
<span id="more"></span>

<p>战略目标看成信息集合</p>
<p>组织的战略目标转化为管理信息系统战略目标</p>
<p>步骤：</p>
<p>识别组织的战略集</p>
<ul>
<li>描绘出组织各类人员或实体结构</li>
<li>识别各类人员或实体结构的目标</li>
<li>对于各类人员或实体识别系统相应的使命</li>
</ul>
<p>将组织战略集转化为信息系统战略</p>
<ul>
<li>根据组织目标确定信息系统目标</li>
<li>对应组织战略集的元素识别相应信息系统战略的约束</li>
<li>根据信息系统目标和约束提出信息系统战略</li>
</ul>
<h4 id="关键成功因素法（CSF）"><a href="#关键成功因素法（CSF）" class="headerlink" title="关键成功因素法（CSF）"></a>关键成功因素法（CSF）</h4><p>面向主题：决策信息</p>
<p>侧重范围：系统总体结构、数据结构</p>
<p>通过分析找出使得企业成功 的关键因素，然后再围绕这些关键因素来确定系统的需求，并进行规划</p>
<p>步骤：</p>
<ul>
<li>了解企业或MIS的战略目标</li>
<li>识别所有的成功因素</li>
<li>确定关键成功因素</li>
<li>明确各关键成功因素的性能指标和评估标准</li>
</ul>
<p>识别目标 — 识别CSF — 识别性能指标 — 定义数据字典</p>
<h4 id="企业资源规划法（BSP）"><a href="#企业资源规划法（BSP）" class="headerlink" title="企业资源规划法（BSP）"></a>企业资源规划法（BSP）</h4><p>面向主题：底层数据</p>
<p>侧重范围：系统目标、系统总体结构、项目计划</p>
<p>为指导企业管理信息系统的开发而建立的规范方法，用于企业内部系统开发</p>
<p>先自上而下识别系统目标、识别企业的过程、识别数据，然后再自下而上的设计系统目标，最后把企业目标转化为信息系统规划的全过程</p>
<p>根据企业目标制定出MIS战略规划的结构化方法</p>
<p>BSP方法采用自上而下的分析和自下而上的实施策略</p>
<p>BSP是最早应用面向过程管理思想的方法</p>
<p>核心步骤：</p>
<p>定义企业目标 — 定义企业过程 — 业务过程重组 — 定义数据类 — 定义信息系统总体结构</p>
<p>企业活动一般由三个方面组成<br>（1）计划和控制<br>（2）产品和服务<br>（3）支持资源</p>
<p>定义业务过程</p>
<ol>
<li><p>识别计划和控制过程</p>
<p>企业计划和控制有关的业务过程一般分为战略规划和管理控制两大类</p>
</li>
<li><p>识别企业产品与服务业务过程</p>
<p>任何产品的生命周期，可分为需求、获取、服务、退出四阶段</p>
</li>
<li><p>识别企业支持资源业务过程</p>
</li>
<li><p>归纳与分析</p>
</li>
<li><p>结果与应用</p>
</li>
</ol>
<p>定义数据类</p>
<ul>
<li>实体法</li>
<li>功能法</li>
</ul>
<p>定义系统总体结构</p>
<p>划分子系统</p>
<p>过程/数据矩阵（U/C矩阵）</p>
<p>行代表数据类、列代表过程   字母U(use)和C(create)来表示过程对数据类的使用和产生。</p>
<p>U/C矩阵的主要功能</p>
<ol>
<li>通过U／C 矩阵的正确性检验，及时发现前段分析和调查工作的疏漏和错误；</li>
<li>通过U／C 矩阵的正确性检验，分析数据的正确性和完整性；</li>
<li>通过对U／C 矩阵的求解过程最终得到子系统的划分；</li>
<li>通过对子系统之间的联系（“U”）可以确定子系统间的共享数据</li>
</ol>
<p>可能的问题：<br>1 多功能生成同一数据类<br>2 数据类无C/U<br>3 C/U分布无规律</p>
<p>可能的解决途径：<br>1 功能合并或数据类分解</p>
<p>2 对功能进行核对</p>
<p>3 行、列的调序</p>
<p>正确性检验</p>
<p>完备性检验：每个数据类必须有一个产生者（C）和至少一个使用者（U），每个功能则必须有产生或使用（U或C）数据类型。</p>
<p>一致性检验：每个数据类型必有且仅有一个产生者（C）。</p>
<p>无冗余性检验：指 U／C矩阵中不允许有空行和空列。<br><img src="https://cdn.jsdelivr.net/gh/zzl-Alexander/CDN/CDN/jpg/20210310184451.png" alt="image"></p>
]]></content>
      <categories>
        <category>系统分析与设计</category>
      </categories>
      <tags>
        <tag>系统规划</tag>
        <tag>规划方法</tag>
      </tags>
  </entry>
  <entry>
    <title>Python--Matlibplot入门练习1</title>
    <url>/2021/01/30/Python--Matlibplot%E5%85%A5%E9%97%A8%E7%BB%83%E4%B9%A01/</url>
    <content><![CDATA[<h2 id="np-linspace"><a href="#np-linspace" class="headerlink" title="np.linspace()"></a>np.linspace()</h2><p>numpy.linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None)</p>
<h3 id="endpoint"><a href="#endpoint" class="headerlink" title="endpoint"></a>endpoint</h3><p>endpoint表示生成的数组是否包含stop</p>
<span id="more"></span>

<p>endpoint=True</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x&#x3D;np.linspace(1,100,num&#x3D;10,endpoint&#x3D;True)</span><br><span class="line">print(x)</span><br><span class="line">结果：[  1.  12.  23.  34.  45.  56.  67.  78.  89. 100.]</span><br></pre></td></tr></table></figure>

<p>endpoint=False</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x&#x3D;np.linspace(1,100,num&#x3D;10,endpoint&#x3D;False)</span><br><span class="line">print(x)</span><br><span class="line">结果：[ 1.  10.9 20.8 30.7 40.6 50.5 60.4 70.3 80.2 90.1]</span><br></pre></td></tr></table></figure>

<h3 id="retstep"><a href="#retstep" class="headerlink" title="retstep"></a>retstep</h3><p>相当于公差</p>
<p>retstep=True</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x&#x3D;np.linspace(1,100,num&#x3D;10,retstep&#x3D;True)</span><br><span class="line">print(x)</span><br><span class="line">结果：(array([  1.,  12.,  23.,  34.,  45.,  56.,  67.,  78.,  89., 100.]), 11.0)</span><br></pre></td></tr></table></figure>

<h3 id="dtype"><a href="#dtype" class="headerlink" title="dtype"></a>dtype</h3><p>结果的输出类型 有np.int   np.bool……..</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x&#x3D;np.linspace(1,100,num&#x3D;10,dtype&#x3D;np.int)</span><br><span class="line">print(x)</span><br><span class="line">结果：[  1  12  23  34  45  56  67  78  89 100]</span><br></pre></td></tr></table></figure>

<h2 id="plt-plot"><a href="#plt-plot" class="headerlink" title="plt.plot()"></a>plt.plot()</h2><p>plt.plot(x,y,format_string,**kwargs)</p>
<blockquote>
<p><strong>x</strong>:X轴上的数据，一般为列表或numpy中的数组，可选（只绘制一条曲线时，可省略，把y轴数据的索引值作为x取值）；</p>
<p><strong>y</strong>:Y轴上的数据，一般为列表或numpy中的数组；</p>
<p><strong>format_string</strong>:控制绘制曲线的格式字符串，可选；</p>
<p>*<strong>*kwargs</strong>:第二组或者更多的（x,y,format_string），可以绘制多条曲线，当我们绘制多条曲线时，各条曲线的x不能省略。</p>
</blockquote>
<h3 id="同时绘制多条曲线"><a href="#同时绘制多条曲线" class="headerlink" title="同时绘制多条曲线"></a>同时绘制多条曲线</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line">a &#x3D; np.arange(10)</span><br><span class="line">plt.plot(a,a*1.5,a,a*2.5,a,a*3.5,a,a**2)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zzl_Alexander/my-image/raw/master/img/Python--Matlibplot%E5%85%A5%E9%97%A8%E7%BB%83%E4%B9%A01A.png" alt="image.png"></p>
<h3 id="曲线格式"><a href="#曲线格式" class="headerlink" title="曲线格式"></a>曲线格式</h3><p>format_string控制绘制曲线的格式字符串，由颜色字符，风格字符，和标记字符组成。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fmt &#x3D; &#39;[marker][line][color]&#39;</span><br></pre></td></tr></table></figure>

<p>color:控制颜色，color = ‘g’;</p>
<p>linestyle:控制线条风格，linestyle = ‘dashed’;</p>
<p>marker:标记的风格，marker = ‘o’;</p>
<p>markerfacecolor:标记的颜色；</p>
<p>markersize;标记的大小;</p>
<p><strong>Markers</strong></p>
<table>
<thead>
<tr>
<th>character</th>
<th>description</th>
</tr>
</thead>
<tbody><tr>
<td><code>&#39;.&#39;</code></td>
<td>point marker</td>
</tr>
<tr>
<td><code>&#39;,&#39;</code></td>
<td>pixel marker</td>
</tr>
<tr>
<td><code>&#39;o&#39;</code></td>
<td>circle marker</td>
</tr>
<tr>
<td><code>&#39;v&#39;</code></td>
<td>triangle_down marker</td>
</tr>
<tr>
<td><code>&#39;^&#39;</code></td>
<td>triangle_up marker</td>
</tr>
<tr>
<td><code>&#39;&lt;&#39;</code></td>
<td>triangle_left marker</td>
</tr>
<tr>
<td><code>&#39;&gt;&#39;</code></td>
<td>triangle_right marker</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th><code>&#39;1&#39;</code></th>
<th>tri_down marker</th>
</tr>
</thead>
<tbody><tr>
<td><code>&#39;2&#39;</code></td>
<td>tri_up marker</td>
</tr>
<tr>
<td><code>&#39;3&#39;</code></td>
<td>tri_left marker</td>
</tr>
<tr>
<td><code>&#39;4&#39;</code></td>
<td>tri_right marker</td>
</tr>
<tr>
<td><code>&#39;s&#39;</code></td>
<td>square marker</td>
</tr>
<tr>
<td><code>&#39;p&#39;</code></td>
<td>pentagon marker</td>
</tr>
<tr>
<td><code>&#39;*&#39;</code></td>
<td>star marker</td>
</tr>
<tr>
<td><code>&#39;h&#39;</code></td>
<td>hexagon1 marker</td>
</tr>
<tr>
<td><code>&#39;H&#39;</code></td>
<td>hexagon2 marker</td>
</tr>
<tr>
<td><code>&#39;+&#39;</code></td>
<td>plus marker</td>
</tr>
<tr>
<td><code>&#39;x&#39;</code></td>
<td>x marker</td>
</tr>
<tr>
<td><code>&#39;D&#39;</code></td>
<td>diamond marker</td>
</tr>
<tr>
<td><code>&#39;d&#39;</code></td>
<td>thin_diamond marker</td>
</tr>
<tr>
<td>`’</td>
<td>‘`</td>
</tr>
<tr>
<td><code>&#39;_&#39;</code></td>
<td>hline marker</td>
</tr>
</tbody></table>
<p><strong>Line Styles</strong></p>
<table>
<thead>
<tr>
<th>character</th>
<th>description</th>
</tr>
</thead>
<tbody><tr>
<td><code>&#39;-&#39;</code></td>
<td>solid line style</td>
</tr>
<tr>
<td><code>&#39;--&#39;</code></td>
<td>dashed line style</td>
</tr>
<tr>
<td><code>&#39;-.&#39;</code></td>
<td>dash-dot line style</td>
</tr>
<tr>
<td><code>&#39;:&#39;</code></td>
<td>dotted line style</td>
</tr>
</tbody></table>
<p>**<br>**</p>
<p><strong>Colors</strong></p>
<table>
<thead>
<tr>
<th>character</th>
<th>color</th>
</tr>
</thead>
<tbody><tr>
<td><code>&#39;b&#39;</code></td>
<td>blue</td>
</tr>
<tr>
<td><code>&#39;g&#39;</code></td>
<td>green</td>
</tr>
<tr>
<td><code>&#39;r&#39;</code></td>
<td>red</td>
</tr>
<tr>
<td><code>&#39;c&#39;</code></td>
<td>cyan</td>
</tr>
<tr>
<td><code>&#39;m&#39;</code></td>
<td>magenta</td>
</tr>
<tr>
<td><code>&#39;y&#39;</code></td>
<td>yellow</td>
</tr>
<tr>
<td><code>&#39;k&#39;</code></td>
<td>black</td>
</tr>
<tr>
<td><code>&#39;w&#39;</code></td>
<td>white</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line">a &#x3D; np.arange(10)</span><br><span class="line">plt.plot(a,a*1.5,&#39;go-&#39;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zzl_Alexander/my-image/raw/master/img/Python--Matlibplot%E5%85%A5%E9%97%A8%E7%BB%83%E4%B9%A01B.png" alt="image.png"></p>
<h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line">a &#x3D; [1, 2, 3, 4] </span><br><span class="line">b &#x3D; [5, 6, 7, 8]</span><br><span class="line"></span><br><span class="line">plt.plot(a, b, &#39;r--&#39;, label &#x3D; &#39;aa&#39;)</span><br><span class="line">plt.xlabel(&#39;this is x&#39;)</span><br><span class="line">plt.ylabel(&#39;this is y&#39;)</span><br><span class="line">plt.title(&#39;this is a demo&#39;)</span><br><span class="line">plt.legend() # 将图例显示出来</span><br><span class="line"></span><br><span class="line">plt.plot()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zzl_Alexander/my-image/raw/master/img/Python--Matlibplot%E5%85%A5%E9%97%A8%E7%BB%83%E4%B9%A01C.png" alt="image.png"></p>
<h2 id="plt-scatter"><a href="#plt-scatter" class="headerlink" title="plt.scatter()"></a>plt.scatter()</h2><p>散点图</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line">a &#x3D; [1, 2, 3, 4]</span><br><span class="line">b &#x3D; [5, 6, 7, 8]</span><br><span class="line"></span><br><span class="line">plt.scatter(a, b, c&#x3D;&#39;r&#39;, marker&#x3D;&#39;v&#39;)</span><br><span class="line"></span><br><span class="line">plt.legend(&#39;x&#39;) # 将图例显示出来</span><br><span class="line"></span><br><span class="line">plt.plot()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zzl_Alexander/my-image/raw/master/img/Python--Matlibplot%E5%85%A5%E9%97%A8%E7%BB%83%E4%B9%A01D.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>数据处理</tag>
      </tags>
  </entry>
  <entry>
    <title>PAC自定义规则</title>
    <url>/2021/01/30/PAC%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A7%84%E5%88%99/</url>
    <content><![CDATA[<h1 id="PAC自定义规则"><a href="#PAC自定义规则" class="headerlink" title="PAC自定义规则"></a>PAC自定义规则</h1><p>某些特定网站需要在全局模式下访问，来回切换很麻烦<br />在PAC文件中加入要访问的网站的url<br><a name="B6CaY"></a></p>
<h2 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h2><span id="more"></span>

<ul>
<li>通配符支持，如 <em>.example.com/</em> 实际书写时可省略 如 .example.com/ 意即 <code>*.example.com/*</code></li>
<li>正则表达式支持，以\开始和结束， 如 [\w]+://example.com<br />例外规则 @@，如 @@<em>.example.com/</em> 满足@@后规则的地址不使用代理</li>
<li>匹配地址开始和结尾 |，如 |<a href="http://example.com、example.com|/">http://example.com、example.com|</a> 分别表示以 <a href="http://example.com/">http://example.com</a> 开始和以 example.com 结束的地址</li>
<li>|| 标记，如 ||example.com 则 <a href="http://example.com/">http://example.com</a> 、<a href="https://example.com/">https://example.com</a> 、<a href="ftp://example.com/">ftp://example.com</a> 等地址均满足条件，只用于匹配地址开头</li>
<li>注释 ! 如 ! Comment</li>
<li>分隔符^，表示除了字母、数字或者 _ - . % 之外的任何字符。如 <a href="http://example.com^/">http://example.com^</a> ，<a href="http://example.com/">http://example.com/</a> 和<a href="http://example.com:8000/">http://example.com:8000/</a> 均满足条件，而 <a href="http://example.com.ar/">http://example.com.ar/</a> 不满足条件<br><a name="MxSse"></a><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2>在v2ray中的PAC中，在填写手动规则里填写<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i.stack.imgur.com</span><br><span class="line">|https://i.stack.imgur.com/</span><br></pre></td></tr></table></figure>
点击保存设置并从GFW List更新<br />浏览Pac文件 发现多了下面两行内容<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;i.stack.imgur.com&quot;</span>,</span><br><span class="line"><span class="string">&quot;|https:\/\/i.stack.imgur.com\/&quot;</span>,</span><br></pre></td></tr></table></figure></li>
</ul>
<p>如果不知道怎么写</p>
<p>直接把url的网址比较独特的一段粘贴来就行，因为支持通配符</p>
<p>比如下面的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.example.com</span><br></pre></td></tr></table></figure>

<p>就相当于匹配了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*.example.com*</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>科学上网</category>
      </categories>
      <tags>
        <tag>科学上网</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/10/01/hello-world/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="2c39beb0877a86453e756cda3d12ac275a39a9c9a03d50031207c0313c3bd01a">8857952509ef9895f61625fe2d594ef3c9251b16e75667b105d9b8e2f98fa4e0c494f99b3d7554ae30086249b805cde1fe829b34d38aa0681ad350aafa2c2da4c8681f4421e346dbc95e2e6923f9aeeaa7cb0ef799698a147bdd2547f87a667e80c4a457c4883e6a81c948b927aacdc8269abeb88afac5bbc909b14dfc1b0b17a2c72d6e20855b7f036ad637e406b96743a43a6c316871106e837e1bd6267befaadec082c11fd845ddf6c9c26eb5eafa6c71e5f7481fcd0821adeb5e5f7538c7d82b6357cc0a428a90dd2cb346d68f73fd55de4b0ead7d7488faddce0f62dd303df3ea0fe875c5fe284dc715cfa64ab1bdc4a9b449d0fcb4a5e41699583904cbb629413ee14378578d3540101f40ce6e93be912dfedf12723b663517027c0e1f677fa7cb6f67e581c42e8874d27ba96a40f6d9aeec6a527e368987493283f493372cf11342e3d2a4c530c6c3979e12f1c2761035d7ee2a597e6a60988d2d38cb5bb373a6c5c100e6663b683470d7681ff1493d477e1a31b20c08159bacf4406461a024726c9fab32fc0b423009a3942995804910e5a93cef058bc5229daa2c350fb0b30592da132e5c00058daa83114ce3684d937e25d7f9d888d54e7a6f3c76961e17f0156c335bb6e7e9fecc7e4fbaf7bea5c23849bca8d38e9edde3160d9a9e45711b8c450e653706eb619ef2f2a69baf67b88c51971c3a9c87afa86dff05d3dba36e4903b2e2543ac0b5d0260ea2528fdd4f09bb982f0f1c0b717a1c7a0f4a645918b35acdbf7b41e85a42df50ff7eb3b1f0e5d2e619a9dd351b44d0f942d7dc89823967c327536563c7fb8964fa4370488589da03106034c57a542f0b15acb9d597642bd15a20bb3c06a8c340cd583a7a850103f01d602540c7668db6e6e4cbb19893760fa5794a440a0c74043c2091d38480e702c52a65612054b381b4ba18867f34b4337c07d5df8cc17aa415f945521f0017c7db1a88d572d1d678514cd5008a25424b17271dd652a6e37468f5efe1dc718320d603baf7c0d969972a077a6edc19cd271cb4b5e3974f15e1b4381d3f1053bc978ec5728891d6fbedce553f45347a33d904d3d9ecffb633f5e5e32ec408f21c30a7d4d5ca85b21c383bd9d51dea3310bb284eba806a9dc49c19f03a0a4cf24034b487967c50f3d799355a81249b29586a51896bade3be3cdc5f6031249290f04e7fd05df804f7953c214dc15c1e71d3016b3848e74c06dae7f5e1e80eff053c31b8c2da32dfc03d70c3b37c761e92fc5ea4888536f66dba9f642a6cd7a417a7f147003e2705b6f29d7cb8d0acc7e3be94a05111c02cfd79b096e1e2072da27cab648aa9e6e2315af1e67b1d217e1199e0673b0b4c6a37421db26588ba7ab8f7119ec0ab421238122ca513dcf78898e2100ff3416cbddc2ba4238eaae43092d93131d3b7f409de2ea78ab32df9de9caefc53d0572b3e5806c65f1ffe661c8cd64bbf1c54e5f63dc1993bce73df41b20a1bee9f3575bc4646b5eb61433611e6dd0dd728f8a6c78caca55ce957bef323fd8ba47ebb3e19496c4870693100f4ce32ee06ff889de880b50d78c95710dc06d65c0d0a7717a91b43fb741ab16743ed17e1508fb12d722c242166e8d5f96a2cd0a4fcc5c65363faba256d2ec8f484b847b9be8b9aa37c85fc63f92bdb345a3b65ae86bc210d2ea06ee794aaed7baa505bbbbe190177b55289d235a95f47c8d1ebae4275686cf7bd7ae77ec657c965e0148b418e98ee542975e6e43d57c951fab08c79559daf6bd2354e0883aba987dcfe2e408ef332d2001db3740435a7c1fe9784db593da2cbeb1adceb9ee4404f7aeedfc0e0e817cb68aa03d30b264980ba76f845f10f4f1b314bbf4aea226a04bfb24fc33405b28feea57dc2fb0df9f6140f4d0ab246964203985935a560cda463f4369cdfbdc3beb4176457e98d6e26ed183c606d4a0f491d8c003a1ea10ad7ebf522fca18face13f629b9edff8cd94e2fb568a07919586eb2e246d54de8559057c4f82feaacf3eb82912c039d5fdfb9dfda3f28a48e664f2dc1511f3edcc688dff90755ee69e2ed7ecf26973914c855de3dabeef492c1d8c073ea0057cba0f2fb435df3ea97a000e3389383efde12ddbf126f76a4421f0cc49419844a2d3d7875e7c315ae18b8ea5c2a5406723d7a23500713d3cdc9dd63d5eb8107f5719e40045a29eb57814715a5f0fd0bd683bb2d980eeee67bb363f705c38852086d4588ba8b657575d1420f52975b128ba7b406cdeb5d6ef1e997f76c3f71c34516e3f0dd559767ba37d091aa9af7dd29c9b9577d0b49a8c999ae3eb726ad2305a9f7c5850ebfa5ef4778e1bdcb4903a9b61139f900144b080df3474afe3da646f8915422a2af8c50b218ec32952377bc73de50e07e904d242fee491f4e005abe19579bbe9a9c90d8c7b55c488014e3fa197c9e72c165d087537c8cfeb2d675843e532d5baa8162aaa3bc8818e54eff4aef1cb54c51abaf697c1e7f03880e8aab0075b121928ad3e593bfdd9997461f0898d9d7f23e6d890cf0a1f985ef40ce77bdd395cd91e67feab349bde5a943a7b707f8ee9a72911789d80abf5ab3aacfa618c6bf6fb240156e3df4d494ef7fa4e1dc6d55523359aeee1a70a5bcc1aefcd19f6c26d4c081e1396188c439c685b94e101173ef65d1803122cac071e431150a1d93f658ece2168610acea09cb125a3ef3fbfc6194a9ffeed57839b92305c77d585216c956e6b296052cab317b49f3dcb9ee5aba7af707e8556e3055f8cb36e70abc446cf28029c352baadcf1fa112600146c21c68927c1c5dc4b3b9f406974bc8eec88b413938fb67dd2ec6e80702b57c2eefbd9442ce98e80f13672d9e2e5f8ec6233cc86c46373de2eca42deb2b673fe109eb1f16d8e14b6e4e5a0029ea7a5e4a0bf6ed917a0e157ee765efb1846b447f8fcf81304aa1fc236bdac20a3a3fd939da8febae0aa4e3f27cc7d58b0265c27bf74749022ae5f6ac5c3c3fef8689c66c54bf54293e794ba382b5c3c9389b35264308163261e44328dc19a8bcde13d9088a6e722f9349a3a1ec362a8e4fa094e2ab9d5c0ad4ac2eda949fdeef072356bbf2a9a5e2627ee81f766896092a59406ff8504ac6baf72662cb9604222</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>测试使用</title>
    <url>/2020/07/30/%E5%9B%BE%E8%AE%BA/</url>
    <content><![CDATA[<p><font color=#00ffff size=72>color=#00ffff</font></p>
]]></content>
      <categories>
        <category>A</category>
      </categories>
      <tags>
        <tag>A</tag>
      </tags>
  </entry>
</search>
